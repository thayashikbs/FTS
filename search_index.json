[["index.html", "金融時系列解析 1 はじめに 1.1 時系列モデリング 1.2 金融時系列データの特徴 1.3 シミュレーションによるサンプルパス生成 1.4 Rにおける時系列オブジェクト・クラスおよび関数の例 1.5 時系列データの分解", " 金融時系列解析 林 高樹 2023-12-21 1 はじめに 1.1 時系列モデリング ターゲットの時系列データの特徴を表現できるような確率・統計モデルの構築 “stylized facts”等の中から, 重要な特徴にフォーカスする 実際の時系列データと構築モデルの持つ特徴が類似するように 時系列プロット, 散布図, ヒストグラム, 要約統計量等に関して 理論計算やシミュレーション(パスの生成) 金融時系列データに現れる特徴は, データ期間 (例, コロナ禍以前・以後) の他, データの観測頻度 (例, 月次, 週次, 日次, 5分次) にも依存 構築される時系列モデルに望まれる性質 (要件) 記述性 (ターゲットの時系列データとの特徴の類似性の表現) 解析容易性, 解釈可能性 操作性・取扱容易性 推定容易性, 計算効率性 モデル安定性・頑強性 予測精度の高さなど 候補となるモデルは無数 汎用的で, 良い性質を持つモデルクラスに関する研究 時系列解析分野で中核を成すクラス → 線形+定常時系列過程 モデル選択・推定, モデルの利用 ターゲット時系列の特徴を踏まえ. 適切なモデルクラスを選択する データに対してモデルを適合し, パラメータを推定する 推定モデルの妥当性をチェック (モデル診断) 予測や制御等に利用 本授業で扱う対象・アプローチ 目的変数(観測変数)自体が時系列構造を持ち, 時系列モデルで記述されるケースに主要な関心 出発点(基本的設定): 1変量の線形・定常時系列過程 → 金融時系列データは, 線形・定常時系列過程から乖離する特徴も有する → 非線形 and/or 非定常な時系列過程へ 観測変数が多次元で時系列構造を持つケース (多変量時系列) 外部変数のあるケース 金融時系列解析におけるチャレンジ 時系列データは, 確率過程の観点からは, 一本の”サンプルパス”の実現と見なせる マクロ・ミクロの状態が 時間と共に変化する金融・経済時系列データは, 再現性の乏しいデータであると考えられる さらに, 金融市場は過去に実現したデータに基づいて市場参加者が行動を変化させる ある種の”法則性”を仮定しモデルにより表現することで, 金融市場においても”最適な”行動を取りたい 1.2 金融時系列データの特徴 金融時系列データの特徴: みずほ (8411) 株価データの例 quantmod()による株価データの取得 library(&#39;quantmod&#39;) YJ8411.T &lt;- getSymbols(&#39;8411.T&#39;,from = &#39;2020-10-01&#39;, to = &#39;2023-09-29&#39;, src = &quot;yahoo&quot;, auto.assign = FALSE) # 日次株価の時系列プロット chartSeries(YJ8411.T) Figure 1.1: … # 日次4本値 chartSeries(OHLC(YJ8411.T)) Figure 1.2: … 日次収益率の時系列プロット # 日次収益率の時系列プロット ret_YJ8411 &lt;- ClCl(YJ8411.T) chartSeries(ret_YJ8411) 日次収益率のヒストグラム # 日次収益率のヒストグラム hist(ret_YJ8411) 日次収益率の要約統計量 library(psych) describe(ret_YJ8411) #&gt; vars n mean sd median trimmed mad min max range skew kurtosis se #&gt; X1 1 734 0 0.01 0 0 0.01 -0.07 0.05 0.13 -0.12 1.86 0 # 要約統計量を計算 # デフォルト出力 # mean # standard deviation # trimmed mean (with trim defaulting to .1) # median (standard or interpolated # mad: median absolute deviation (from the median). # minimum # maximum # skew # kurtosis # standard error # 注) kurtosisは-3した値 日次収益率の自己相関 # 日次収益率の自己相関 acf(ret_YJ8411, na.action = na.pass) 日次収益率絶対値の自己相関 # 日次収益率絶対値の自己相関 acf(abs(ret_YJ8411), na.action = na.pass) 1.3 シミュレーションによるサンプルパス生成 時系列モデリングでは, 観測時系列データの特徴と比較し, 適切なモデルを見い出すため, シミュレーションを積極的に利用する 正規AR(1)モデルの例: \\(X(t)=\\phi X(t-1) + W(t)\\), \\(W(t) \\sim_{i,i.d.} N(0,\\sigma^2)\\) x.ts = NULL; Tlen = 50 phi = -0.8; s = 2 for (seed.tmp in 1:5){ set.seed(seed.tmp) x = w = rnorm(Tlen) * s for (t in 2:Tlen) x[t] = phi * x[t-1] + w[t] # x.ts = ts.intersect(x.ts, ts(cumsum(x))) } ts.plot(x.ts, type=&quot;l&quot;, col=1:5, lty=1:5, ylab=&quot;&quot;,main=&quot;Simulated sample paths&quot;) 1.4 Rにおける時系列オブジェクト・クラスおよび関数の例 1.4.1 日付・時間データに対するクラス 1.4.1.1 Dateクラス 日付を表現する R内部的には, “Date”というclass属性を持つdouble型の値を持つ # as.Date(): 日付を表す文字列をDate型に変更する tomorrow &lt;- as.Date(&quot;2023-10-04&quot;) tomorrow ## [1] &quot;2023-10-04&quot; attributes(tomorrow) # 出力オブジェクトの属性(attribute) ## $class ## [1] &quot;Date&quot; # typeof(tomorrow) # 出力オブジェクトの型(type) # typeof(&quot;2023-10-23&quot;) # 入力オブジェクトの型(type) today &lt;- Sys.Date() today ## [1] &quot;2023-12-21&quot; 1.4.1.2 POSIXctクラス 日時 (日-時間) を表現する Rの内部的には, “POSIXct”というclass属性を持つdouble型の値を持つ POSIX = Portable Operating System Interfaceの略 POSIXct, POSXltの2種類: ct = calender time, lt = local time now_ct &lt;- as.POSIXct(&quot;2023-10-05 19:00&quot;, tz = &quot;UTC&quot;) now_ct ## [1] &quot;2023-10-05 19:00:00 UTC&quot; attributes(now_ct) ## $class ## [1] &quot;POSIXct&quot; &quot;POSIXt&quot; ## ## $tzone ## [1] &quot;UTC&quot; tomorrow_ct &lt;- as.POSIXct(&quot;2023-10-06 20:00&quot;, tz = &quot;UTC&quot;) tomorrow_ct - now_ct # 時間差(1日当たり) ## Time difference of 1.041667 days attributes(tomorrow_ct - now_ct) ## $class ## [1] &quot;difftime&quot; ## ## $units ## [1] &quot;days&quot; 1.4.1.3 difftimeクラス 時間差を表現する Rの内部的には, “POSIXct”というclass属性を持つdouble型の値を持つ onewk_1 &lt;- as.difftime(1, units = &quot;weeks&quot;) onewk_1 ## Time difference of 1 weeks typeof(onewk_1) ## [1] &quot;double&quot; attributes(onewk_1) ## $class ## [1] &quot;difftime&quot; ## ## $units ## [1] &quot;weeks&quot; onewk_2 &lt;- as.difftime(7, units = &quot;days&quot;) onewk_2 ## Time difference of 7 days 1.4.1.4 よりモダンかつ柔軟な日付や時間の操作 lubridateパッケージ hmsパッケージ (日内時間の操作・蓄積に特化) 1.4.2 時系列データに対するクラス(1): tsクラス tsクラス: Rの時系列オブジェクトの基本クラス # AirPassengers, # Pan Am, # international passenger bokking (in 1000s) per month # 1949--1960 (Brown, 1963) data(AirPassengers) ap &lt;- AirPassengers ap ## Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec ## 1949 112 118 132 129 121 135 148 148 136 119 104 118 ## 1950 115 126 141 135 125 149 170 170 158 133 114 140 ## 1951 145 150 178 163 172 178 199 199 184 162 146 166 ## 1952 171 180 193 181 183 218 230 242 209 191 172 194 ## 1953 196 196 236 235 229 243 264 272 237 211 180 201 ## 1954 204 188 235 227 234 264 302 293 259 229 203 229 ## 1955 242 233 267 269 270 315 364 347 312 274 237 278 ## 1956 284 277 317 313 318 374 413 405 355 306 271 306 ## 1957 315 301 356 348 355 422 465 467 404 347 305 336 ## 1958 340 318 362 348 363 435 491 505 404 359 310 337 ## 1959 360 342 406 396 420 472 548 559 463 407 362 405 ## 1960 417 391 419 461 472 535 622 606 508 461 390 432 #is.ts(ap); is.vector(ap) #attributes(ap) class(ap) # tsクラス ## [1] &quot;ts&quot; start(ap); end(ap); frequency(ap) ## [1] 1949 1 ## [1] 1960 12 ## [1] 12 plot(ap, ylab = &quot;Passengers (1000&#39;s)&quot;) layout(1:2) plot(aggregate(ap)) # annual levelに累計, seasonal effectsの除去、trend cycle(ap) # データ内各アイテムのシーズン抽出 ## Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec ## 1949 1 2 3 4 5 6 7 8 9 10 11 12 ## 1950 1 2 3 4 5 6 7 8 9 10 11 12 ## 1951 1 2 3 4 5 6 7 8 9 10 11 12 ## 1952 1 2 3 4 5 6 7 8 9 10 11 12 ## 1953 1 2 3 4 5 6 7 8 9 10 11 12 ## 1954 1 2 3 4 5 6 7 8 9 10 11 12 ## 1955 1 2 3 4 5 6 7 8 9 10 11 12 ## 1956 1 2 3 4 5 6 7 8 9 10 11 12 ## 1957 1 2 3 4 5 6 7 8 9 10 11 12 ## 1958 1 2 3 4 5 6 7 8 9 10 11 12 ## 1959 1 2 3 4 5 6 7 8 9 10 11 12 ## 1960 1 2 3 4 5 6 7 8 9 10 11 12 boxplot(ap ~ cycle(ap)) # seasonal effects 1.4.3 時系列データに対するクラス(2): zooクラスとxtsクラス 有用な時系列オブジェクトのクラス: zoo, xts zoo, xts共に, 多変量時系列を扱うことも可能 xtsは, zooに類似. かつ, 高速なため, 大規模DATAの処理に適している zooやxtsのメリット. 有用な関数が多数用意されている: differencing, merging, periodic sampling, applying rolling functions xtsパッケージは, zooパッケージが出来ること全てできる - zooクラス・オブジェクトの生成 - ts &lt;- zoo(x, dt) - 時間(index)は, Dateオブジェクト, POSIXctオブジェクト, 整数, 浮動小数点でも, 順序付き数値なら何でもOK - xtsクラス・オブジェクトの生成 - ts &lt;- xts(x, dt) - 時間(index)は, Dateオブジェクト, POSIXctオブジェクト等、日付や時間のクラスのみに対応 # R マニュアル vignette(&quot;zoo&quot;) vignette(&quot;xts&quot;) zooクラス library(zoo) # 日経平均先物(ラージ), 2018年2月5日, 1日内約定データ prices &lt;- c(22790, 22800, 22790, 22790, 22790) seconds &lt;- c(32400.014, 32400.020, 32400.035, 32400.036) # タイムスタンプ (秒) nkft_sec &lt;- zoo(prices, seconds) print(nkft_sec) ## 32400.014 32400.02 32400.035 32400.036 ## 22790 22800 22790 22790 # 同, 2023年9月25日〜9月29日(5営業日) prices &lt;- c(32480, 32080, 32150, 31850, 32020) dates &lt;- as.Date(c(&quot;2023-09-25&quot;, &quot;2023-09-26&quot;, &quot;2023-09-27&quot;, &quot;2023-09-28&quot;, &quot;2023-09-29&quot;)) # 日付 nkft_daily &lt;- zoo(prices, dates) print(nkft_daily) ## 2023-09-25 2023-09-26 2023-09-27 2023-09-28 2023-09-29 ## 32480 32080 32150 31850 32020 coredata(nkft_daily) # 株価の取り出し ## [1] 32480 32080 32150 31850 32020 index(nkft_daily) # 時間の取り出し ## [1] &quot;2023-09-25&quot; &quot;2023-09-26&quot; &quot;2023-09-27&quot; &quot;2023-09-28&quot; &quot;2023-09-29&quot; coredata(nkft_sec) ## [1] 22790 22800 22790 22790 index(nkft_sec) ## [1] 32400.01 32400.02 32400.03 32400.04 nkft_daily[2:4] ## 2023-09-26 2023-09-27 2023-09-28 ## 32080 32150 31850 nkft_daily[as.Date(&quot;2023-09-26&quot;)] ## 2023-09-26 ## 32080 nkft_daily[&quot;2023-09-26&quot;] # &lt;-- NO ## 2023-09-26 ## 32080 window(nkft_daily, start = as.Date(&#39;2023-09-26&#39;), end = as.Date(&#39;2023-09-28&#39;)) ## 2023-09-26 2023-09-27 2023-09-28 ## 32080 32150 31850 library(xts) first(nkft_sec) # 最初のデータ ## 32400.014 ## 22790 last(nkft_sec) # 最後のデータ ## 32400.036 ## 22790 1.4.3.1 quantmodパッケージの利用による株価取得 &amp; チャート作成 library(&#39;quantmod&#39;) yj8411 &lt;- getSymbols(&#39;8411.T&#39;,from = &#39;2020-10-01&#39;, to = &#39;2023-09-29&#39;, src = &quot;yahoo&quot;, auto.assign = FALSE) # 注) R/RStudioや, guantmodのバージョンによっては, 動かないことがある # 注) 画面に&quot;Error in new.session() : Could not establish session after 5 attempts.&quot;が表示され, # 株価を取得できない場合には, quantmodのバージョンを最新のものにすること. chartSeries(ClCl(yj8411)) chartSeries(yj8411) chartSeries(OHLC(yj8411)) Mizuho_ret &lt;- diff(log(Ad(yj8411))) # Adjusted price plot(Mizuho_ret) chartSeries(Mizuho_ret) class(Mizuho_ret) ## [1] &quot;xts&quot; &quot;zoo&quot; # 便利な関数の例 Mizuho_m &lt;- apply.monthly(Mizuho_ret, mean, na.rm = T) # xts Mizuho_w &lt;- apply.weekly(Mizuho_ret, mean, na.rm = T) # xts # zooオブジェクトの場合, 一旦xtsに変換して適用 # apply.monthly(as.xts(ts), df) Mizuho_ma5 &lt;- rollapply(Mizuho_ret, width = 5, mean, align = &quot;right&quot;) # zooパッケージ内 head(Mizuho_ma5) ## 8411.T.Adjusted ## 2020-10-02 NA ## 2020-10-05 NA ## 2020-10-06 NA ## 2020-10-07 NA ## 2020-10-08 NA ## 2020-10-09 0.002418758 #Mizuho_ma21 &lt;- rollapply(Mizuho_ret, width = 21, mean, align = &quot;right&quot;) # zooパッケージ内 # timestamp is taken from the rightmost value chartSeries(Mizuho_ma5) #chartSeries(Mizuho_ma21) 1.5 時系列データの分解 - データセット: AirPassengers - Pan Am, # international passenger bokking (in 1000s) per month - 1949--1960 (Brown, 1963) data(AirPassengers) ap &lt;- AirPassengers ap ## Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec ## 1949 112 118 132 129 121 135 148 148 136 119 104 118 ## 1950 115 126 141 135 125 149 170 170 158 133 114 140 ## 1951 145 150 178 163 172 178 199 199 184 162 146 166 ## 1952 171 180 193 181 183 218 230 242 209 191 172 194 ## 1953 196 196 236 235 229 243 264 272 237 211 180 201 ## 1954 204 188 235 227 234 264 302 293 259 229 203 229 ## 1955 242 233 267 269 270 315 364 347 312 274 237 278 ## 1956 284 277 317 313 318 374 413 405 355 306 271 306 ## 1957 315 301 356 348 355 422 465 467 404 347 305 336 ## 1958 340 318 362 348 363 435 491 505 404 359 310 337 ## 1959 360 342 406 396 420 472 548 559 463 407 362 405 ## 1960 417 391 419 461 472 535 622 606 508 461 390 432 #is.ts(ap); is.vector(ap) #attributes(ap) class(ap) # tsクラス ## [1] &quot;ts&quot; start(ap); end(ap); frequency(ap) ## [1] 1949 1 ## [1] 1960 12 ## [1] 12 plot(ap, ylab = &quot;Passengers (1000&#39;s)&quot;) layout(1:2) plot(aggregate(ap)) # annual levelに累計, seasonal effectsの除去、trend cycle(ap) # データ内各アイテムのシーズン抽出 ## Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec ## 1949 1 2 3 4 5 6 7 8 9 10 11 12 ## 1950 1 2 3 4 5 6 7 8 9 10 11 12 ## 1951 1 2 3 4 5 6 7 8 9 10 11 12 ## 1952 1 2 3 4 5 6 7 8 9 10 11 12 ## 1953 1 2 3 4 5 6 7 8 9 10 11 12 ## 1954 1 2 3 4 5 6 7 8 9 10 11 12 ## 1955 1 2 3 4 5 6 7 8 9 10 11 12 ## 1956 1 2 3 4 5 6 7 8 9 10 11 12 ## 1957 1 2 3 4 5 6 7 8 9 10 11 12 ## 1958 1 2 3 4 5 6 7 8 9 10 11 12 ## 1959 1 2 3 4 5 6 7 8 9 10 11 12 ## 1960 1 2 3 4 5 6 7 8 9 10 11 12 boxplot(ap ~ cycle(ap)) # seasonal effects 1.5.1 トレンド抽出, 平滑化(smoothing) 対称移動平均法(centered moving average) # filter()関数の使用 f12 &lt;- c(1/24, rep(1/12, 11), 1/24) f12 ## [1] 0.04166667 0.08333333 0.08333333 0.08333333 0.08333333 0.08333333 ## [7] 0.08333333 0.08333333 0.08333333 0.08333333 0.08333333 0.08333333 ## [13] 0.04166667 ap_m &lt;- stats::filter(as.vector(ap), f12, sides = 2) # vectorとして入力 --&gt; 年情報が欠落 plot(cbind(as.vector(ap), ap_m)) # --&gt; 年情報が欠落 #ap_m2 &lt;- filter(ap, f12, sides = 2) # tsとして入力 #plot(cbind(ap, ap_m2)) #または ap_m &lt;- ts(ap_m, start = c(1949,1), frequency = 12) # &lt;-- 年情報を戻す #plot(cbind(ap, ap_m)) #grid() #lines(1:length(ap_m), ap_m, col=&quot;blue&quot;) # トレンド除去済データ ap_s &lt;- ap - ap_m # 上のts()を使った式によるap_mの生成が必要 plot(ap_s) 1.5.2 時系列の分解 1.5.2.1 “古典的”方法 - decompose, &quot;古典的&quot;分解モデル (Rのデフォルト) - The function first determines the trend component using a moving average (if filter is NULL, a symmetric window with equal weights is used), and removes it from the time series. Then, the seasonal figure is computed by averaging, for each time unit, over all periods. The seasonal figure is then centered. Finally, the error component is determined by removing trend and seasonal figure (recycled as needed) from the original time series. decompose(ap) ## $x ## Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec ## 1949 112 118 132 129 121 135 148 148 136 119 104 118 ## 1950 115 126 141 135 125 149 170 170 158 133 114 140 ## 1951 145 150 178 163 172 178 199 199 184 162 146 166 ## 1952 171 180 193 181 183 218 230 242 209 191 172 194 ## 1953 196 196 236 235 229 243 264 272 237 211 180 201 ## 1954 204 188 235 227 234 264 302 293 259 229 203 229 ## 1955 242 233 267 269 270 315 364 347 312 274 237 278 ## 1956 284 277 317 313 318 374 413 405 355 306 271 306 ## 1957 315 301 356 348 355 422 465 467 404 347 305 336 ## 1958 340 318 362 348 363 435 491 505 404 359 310 337 ## 1959 360 342 406 396 420 472 548 559 463 407 362 405 ## 1960 417 391 419 461 472 535 622 606 508 461 390 432 ## ## $seasonal ## Jan Feb Mar Apr May Jun ## 1949 -24.748737 -36.188131 -2.241162 -8.036616 -4.506313 35.402778 ## 1950 -24.748737 -36.188131 -2.241162 -8.036616 -4.506313 35.402778 ## 1951 -24.748737 -36.188131 -2.241162 -8.036616 -4.506313 35.402778 ## 1952 -24.748737 -36.188131 -2.241162 -8.036616 -4.506313 35.402778 ## 1953 -24.748737 -36.188131 -2.241162 -8.036616 -4.506313 35.402778 ## 1954 -24.748737 -36.188131 -2.241162 -8.036616 -4.506313 35.402778 ## 1955 -24.748737 -36.188131 -2.241162 -8.036616 -4.506313 35.402778 ## 1956 -24.748737 -36.188131 -2.241162 -8.036616 -4.506313 35.402778 ## 1957 -24.748737 -36.188131 -2.241162 -8.036616 -4.506313 35.402778 ## 1958 -24.748737 -36.188131 -2.241162 -8.036616 -4.506313 35.402778 ## 1959 -24.748737 -36.188131 -2.241162 -8.036616 -4.506313 35.402778 ## 1960 -24.748737 -36.188131 -2.241162 -8.036616 -4.506313 35.402778 ## Jul Aug Sep Oct Nov Dec ## 1949 63.830808 62.823232 16.520202 -20.642677 -53.593434 -28.619949 ## 1950 63.830808 62.823232 16.520202 -20.642677 -53.593434 -28.619949 ## 1951 63.830808 62.823232 16.520202 -20.642677 -53.593434 -28.619949 ## 1952 63.830808 62.823232 16.520202 -20.642677 -53.593434 -28.619949 ## 1953 63.830808 62.823232 16.520202 -20.642677 -53.593434 -28.619949 ## 1954 63.830808 62.823232 16.520202 -20.642677 -53.593434 -28.619949 ## 1955 63.830808 62.823232 16.520202 -20.642677 -53.593434 -28.619949 ## 1956 63.830808 62.823232 16.520202 -20.642677 -53.593434 -28.619949 ## 1957 63.830808 62.823232 16.520202 -20.642677 -53.593434 -28.619949 ## 1958 63.830808 62.823232 16.520202 -20.642677 -53.593434 -28.619949 ## 1959 63.830808 62.823232 16.520202 -20.642677 -53.593434 -28.619949 ## 1960 63.830808 62.823232 16.520202 -20.642677 -53.593434 -28.619949 ## ## $trend ## Jan Feb Mar Apr May Jun Jul Aug ## 1949 NA NA NA NA NA NA 126.7917 127.2500 ## 1950 131.2500 133.0833 134.9167 136.4167 137.4167 138.7500 140.9167 143.1667 ## 1951 157.1250 159.5417 161.8333 164.1250 166.6667 169.0833 171.2500 173.5833 ## 1952 183.1250 186.2083 189.0417 191.2917 193.5833 195.8333 198.0417 199.7500 ## 1953 215.8333 218.5000 220.9167 222.9167 224.0833 224.7083 225.3333 225.3333 ## 1954 228.0000 230.4583 232.2500 233.9167 235.6250 237.7500 240.5000 243.9583 ## 1955 261.8333 266.6667 271.1250 275.2083 278.5000 281.9583 285.7500 289.3333 ## 1956 309.9583 314.4167 318.6250 321.7500 324.5000 327.0833 329.5417 331.8333 ## 1957 348.2500 353.0000 357.6250 361.3750 364.5000 367.1667 369.4583 371.2083 ## 1958 375.2500 377.9167 379.5000 380.0000 380.7083 380.9583 381.8333 383.6667 ## 1959 402.5417 407.1667 411.8750 416.3333 420.5000 425.5000 430.7083 435.1250 ## 1960 456.3333 461.3750 465.2083 469.3333 472.7500 475.0417 NA NA ## Sep Oct Nov Dec ## 1949 127.9583 128.5833 129.0000 129.7500 ## 1950 145.7083 148.4167 151.5417 154.7083 ## 1951 175.4583 176.8333 178.0417 180.1667 ## 1952 202.2083 206.2500 210.4167 213.3750 ## 1953 224.9583 224.5833 224.4583 225.5417 ## 1954 247.1667 250.2500 253.5000 257.1250 ## 1955 293.2500 297.1667 301.0000 305.4583 ## 1956 334.4583 337.5417 340.5417 344.0833 ## 1957 372.1667 372.4167 372.7500 373.6250 ## 1958 386.5000 390.3333 394.7083 398.6250 ## 1959 437.7083 440.9583 445.8333 450.6250 ## 1960 NA NA NA NA ## ## $random ## Jan Feb Mar Apr May Jun ## 1949 NA NA NA NA NA NA ## 1950 8.4987374 29.1047980 8.3244949 6.6199495 -7.9103535 -25.1527778 ## 1951 12.6237374 26.6464646 18.4078283 6.9116162 9.8396465 -26.4861111 ## 1952 12.6237374 29.9797980 6.1994949 -2.2550505 -6.0770202 -13.2361111 ## 1953 4.9154040 13.6881313 17.3244949 20.1199495 9.4229798 -17.1111111 ## 1954 0.7487374 -6.2702020 4.9911616 1.1199495 2.8813131 -9.1527778 ## 1955 4.9154040 2.5214646 -1.8838384 1.8282828 -3.9936869 -2.3611111 ## 1956 -1.2095960 -1.2285354 0.6161616 -0.7133838 -1.9936869 11.5138889 ## 1957 -8.5012626 -15.8118687 0.6161616 -5.3383838 -4.9936869 19.4305556 ## 1958 -10.5012626 -23.7285354 -15.2588384 -23.9633838 -13.2020202 18.6388889 ## 1959 -17.7929293 -28.9785354 -3.6338384 -12.2967172 4.0063131 11.0972222 ## 1960 -14.5845960 -34.1868687 -43.9671717 -0.2967172 3.7563131 24.5555556 ## Jul Aug Sep Oct Nov Dec ## 1949 -42.6224747 -42.0732323 -8.4785354 11.0593434 28.5934343 16.8699495 ## 1950 -34.7474747 -35.9898990 -4.2285354 5.2260101 16.0517677 13.9116162 ## 1951 -36.0808081 -37.4065657 -7.9785354 5.8093434 21.5517677 14.4532828 ## 1952 -31.8724747 -20.5732323 -9.7285354 5.3926768 15.1767677 9.2449495 ## 1953 -25.1641414 -16.1565657 -4.4785354 7.0593434 9.1351010 4.0782828 ## 1954 -2.3308081 -13.7815657 -4.6868687 -0.6073232 3.0934343 0.4949495 ## 1955 14.4191919 -5.1565657 2.2297980 -2.5239899 -10.4065657 1.1616162 ## 1956 19.6275253 10.3434343 4.0214646 -10.8989899 -15.9482323 -9.4633838 ## 1957 31.7108586 32.9684343 15.3131313 -4.7739899 -14.1565657 -9.0050505 ## 1958 45.3358586 58.5101010 0.9797980 -10.6906566 -31.1148990 -33.0050505 ## 1959 53.4608586 61.0517677 8.7714646 -13.3156566 -30.2398990 -17.0050505 ## 1960 NA NA NA NA NA NA ## ## $figure ## [1] -24.748737 -36.188131 -2.241162 -8.036616 -4.506313 35.402778 ## [7] 63.830808 62.823232 16.520202 -20.642677 -53.593434 -28.619949 ## ## $type ## [1] &quot;additive&quot; ## ## attr(,&quot;class&quot;) ## [1] &quot;decomposed.ts&quot; plot(decompose(ap)) ap_decom &lt;- decompose(ap) # additive #ap_decom &lt;- decompose(ap, type = &quot;mult&quot;) # multiplicative plot(ap_decom) Trend &lt;- ap_decom$trend Seasonal &lt;- ap_decom$seasonal ts.plot(cbind(Trend, Trend * Seasonal), lty = 1:2) # トレンド成分 vs トレンド×季節性成分 → トレンド×季節性成分が圧倒 → 季節性成分にトレンド成分混入!? 時系列を対数変換 lnap &lt;- log(ap) lnap_decom &lt;- decompose(lnap) plot(lnap_decom) Trend &lt;- lnap_decom$trend Seasonal &lt;- lnap_decom$seasonal ts.plot(cbind(Trend, Trend * Seasonal), lty = 1:2) または, オプション type=“multiplicative”を指定 ap_decom_m &lt;- decompose(ap, type = &quot;multiplicative&quot;) plot(ap_decom_m) 参考文献: CM (2009), Ch.1 (自主課題) decomposeと同じように3成分に分解する自作関数を作成せよ 1.5.2.2 代替的方法 - stl(), Seasonal Decomposition of Time Series by Loess - loess(locally weighted regression)によるsmoothingを行い, 3成分に分解 #plot(stl(ap, s.window = 13)) #plot(stl(ap, s.window = 5)) plot(stl(ap, s.window = &quot;per&quot;)) - &quot;timsac&quot;: 統数研開発パッケージ - H.Akaike, T.Ozaki, M.Ishiguro, Y.Ogata, G.Kitagawa, Y-H.Tamura, E.Arahata, K.Katsura and Y.Tamura (1984) Computer Science Monographs, Timsac-84 Part 1. The Institute of Statistical Mathematics. library(timsac) # decomp() # Decompose a nonstationary time series into several possible components by square-root filter. # トレンド成分、AR成分、季節変動成分、曜日効果、白色雑音 # データセット: Blsallfood data(Blsallfood) # アメリカの食品産業に従事する労働者の人数を毎月調べた時系列 (合衆国 Bureau of Labor Statistics (BLS) 公表) #z &lt;- decomp(Blsallfood, trade = TRUE, year = 1973) # year: the first year of the data z &lt;- decomp(Blsallfood, year = 1973) z$aic; z$lkhd ## [1] 1204.446 ## [1] -581.2231 z$sigma2; z$tau1; z$tau2; z$tau3 ## [1] 27.75967 ## [1] 0.00516679 ## [1] 0.9953483 ## [1] 0.0001000029 z &lt;- decomp(Blsallfood, trade = TRUE, year = 1973) #decomp(as.vector(ap), year = 1949) # OK? z &lt;- decomp(ap, year = 1949) - baysea() - Decompose a nonstationary time series into several possible components # データセット: LaborData data(LaborData) # Labor force U.S. unemployed 16 years or over (1972-1978) data head(LaborData) ## [1] 5447 5412 5215 4697 4344 5426 z &lt;- baysea(LaborData, forecast = 12) #baysea(as.vector(ap), forecast = 12) # OK? z &lt;- baysea(ap, forecast = 12) 1.5.2.3 代替的方法 (続き) prophet() https://facebook.github.io/prophet/docs/quick_start.html#r-api https://cran.r-project.org/web/packages/prophet/prophet.pdf “非線形のトレンドに年次・週次・日次の季節性, さらに 休日効果を加えた加法モデルに基づいて時系列データを予測する手続を実装. 強い季節性があり, 数シーズンの過去データを持つ時系列データに対して良く機能. 欠損値やトレンドのシフトに対して頑強. 通常, 外れ値をうまく処理.” prophet()の主な引数 - growth: &quot;linear&quot;(デフォルト), &quot;logisitc&quot;, &quot;flat&quot; - changepoints (変化点): 日付ベクトルをユーザー指定 or 潜在的な変化点の自動選択(デフォルト) - n.changepoints (変化点の数): 25 (デフォルト) - yearly.seasonality (年次季節性への適合): &quot;auto&quot;(デフォルト), T, F, 生成するFourier項の数 - weekly.seasonality (週次季節性への適合): 同上 - daily.seasonality (週次季節性への適合): 同上 - holidays (休日の指定): なし(デフォルト - seasonality.mode (季節性の入り方): &quot;additive&quot;(加法的)(デフォルト), &quot;multiplictive&quot;(乗法的) #install.packages(&quot;prophet&quot;) library(prophet) library(zoo) # index, yearmon # 以下, 生データのまま使用 (対数変換せず) # 年月の取り出し tt &lt;- as.Date(yearmon(index(ap))) # prophetモデルの生成 ap_df &lt;- data.frame(ds = tt, y = ap) ap_ppht &lt;- prophet(ap_df) # 予測年月の生成 dates_ft &lt;- make_future_dataframe(ap_ppht, periods = 12, freq = &quot;month&quot;) tail(dates_ft) ## ds ## 151 1961-07-01 ## 152 1961-08-01 ## 153 1961-09-01 ## 154 1961-10-01 ## 155 1961-11-01 ## 156 1961-12-01 # 予測値の生成 ap_forecast &lt;- predict(ap_ppht, dates_ft) tail(ap_forecast[c(&#39;ds&#39;, &#39;yhat&#39;, &#39;yhat_lower&#39;, &#39;yhat_upper&#39;)]) ## ds yhat yhat_lower yhat_upper ## 151 1961-07-01 576.8046 548.8196 602.9587 ## 152 1961-08-01 577.2261 549.3339 607.0332 ## 153 1961-09-01 528.6678 499.4024 556.7556 ## 154 1961-10-01 493.5023 463.2596 521.7907 ## 155 1961-11-01 459.6479 430.5884 485.8496 ## 156 1961-12-01 489.0093 460.3700 515.5362 str(ap_forecast) ## &#39;data.frame&#39;: 156 obs. of 16 variables: ## $ ds : POSIXct, format: &quot;1949-01-01&quot; &quot;1949-02-01&quot; ... ## $ trend : num 107 109 111 114 116 ... ## $ additive_terms : num -21.433 -30.103 -0.467 -4.937 -3.629 ... ## $ additive_terms_lower : num -21.433 -30.103 -0.467 -4.937 -3.629 ... ## $ additive_terms_upper : num -21.433 -30.103 -0.467 -4.937 -3.629 ... ## $ yearly : num -21.433 -30.103 -0.467 -4.937 -3.629 ... ## $ yearly_lower : num -21.433 -30.103 -0.467 -4.937 -3.629 ... ## $ yearly_upper : num -21.433 -30.103 -0.467 -4.937 -3.629 ... ## $ multiplicative_terms : num 0 0 0 0 0 0 0 0 0 0 ... ## $ multiplicative_terms_lower: num 0 0 0 0 0 0 0 0 0 0 ... ## $ multiplicative_terms_upper: num 0 0 0 0 0 0 0 0 0 0 ... ## $ yhat_lower : num 58.1 49.8 79.1 80.1 83 ... ## $ yhat_upper : num 112 108 139 142 141 ... ## $ trend_lower : num 107 109 111 114 116 ... ## $ trend_upper : num 107 109 111 114 116 ... ## $ yhat : num 85.9 79.4 110.9 108.6 112 ... plot(ap_ppht, ap_forecast) # prophetによる予測の各成分のプロット prophet_plot_components(ap_ppht, ap_forecast) "],["定常性と自己相関関数.html", "2 定常性と自己相関関数 2.1 確率過程の2次特性: 平均関数と自己共分散関数 2.2 定常性 (stationarity) 2.3 標本平均と標本自己共分散関数 2.4 標本自己相関関数 2.5 自己相関関数 (標本値 vs 理論値)", " 2 定常性と自己相関関数 2.1 確率過程の2次特性: 平均関数と自己共分散関数 \\(E[X_t]&lt;\\infty\\)である確率過程 \\(\\{X_t,t=0,\\pm1,\\pm2,\\ldots\\}\\) に対して以下の二つの関数を定義することができる. 平均関数 (mean function): \\[ \\mu_X(t) = E[X_t] \\qquad (\\#eq:mean.func)\\] 自己共分散関数 (autocovariance function): \\[ \\gamma_X(t,s) = Cov[X_t,X_s] = E[(X_t - \\mu_X(t))(X_s - \\mu_X(s))] \\] さらに, 自己相関関数 (autocorrelation function) も定義できる: \\[ \\rho_X(t,s) = \\frac{\\gamma_X(t,s)}{\\sqrt{\\gamma_X(t,t)}\\sqrt{\\gamma_X(s,s)}} \\] 時系列解析では, 主にこれら1次, 2次モーメントに依存する時系列的性質に注意を向ける. 2.2 定常性 (stationarity) 確率過程に関する規則性の概念の一つ 大雑把に言えば, \\(\\{X_t,t=0,\\pm1,\\pm2,\\ldots\\}\\) とそれが時間的に任意の整数\\(h\\)だけシフトした \\(\\{X_{t+h},t=0,\\pm1,\\pm2,\\ldots\\}\\) とが統計的に類似の性質を持つこと 理論面ばかりでなく, 時系列データの解析の実践面においても想定されることの多い重要な性質 大きく, 強定常性 (strict stationarity), 弱定常性 (weak stationarity)の2種類 2.2.1 強定常性 確率過程 \\(\\{X_t,t=0,\\pm1,\\pm2,\\ldots\\}\\) が強定常であるとは (定義): 任意の長さ\\(k=1,2,\\ldots\\), 任意の時点組合せ\\(t_1,t_2,\\ldots,t_k\\), 任意のラグ\\(h=0,\\pm1,\\pm2,\\ldots\\)に対して, 二つの確率変数ベクトル \\((X_{t_1},X_{t_2},\\ldots,X_{t_k})\\) と \\((X_{t_1+h},X_{t_2+h},\\ldots,X_{t_k+h})\\) が, 同じ確率分布を持つ. すなわち, 強定常であれば, \\(X_t\\)は同一分布を持つ. また, iid確率過程は, 強定常である. 2.2.2 弱定常性 確率過程 \\(\\{X_t,t=0,\\pm1,\\pm2,\\ldots\\}\\) が弱定常であるとは (定義): \\(\\mu_X(t)\\)が時間\\(t\\)に独立である: \\(\\mu_X(t) =\\mu_X(0) =: \\mu\\) \\(\\gamma_X(t+h,t)\\)が, 各\\(h\\)に対して時間\\(t\\)に独立である: : \\(\\gamma_X(t+h,t) = \\gamma_X(h,0) =: \\gamma_X(h)\\) さらに, 自己相関関数: \\[ \\rho_X(h) = \\frac{\\gamma_X(h)}{\\gamma_X(0)}\\] 習慣により, 時系列解析では単に“定常”と言えば弱定常を指す. 2.2.3 ホワイトノイズ 最も単純な定常過程にホワイトノイズ (白色ノイズ) がある. ホワイトノイズは, 時系列解析で使われる各種モデルの構築に中心的役割を果たす. ホワイトノイズ (“弱ホワイトノイズ”): 平均が一定(通常, ゼロ), 分散が有限で一定, 自己相関がゼロの確率過程 表記: \\(\\{X_t\\} \\sim WN(0,\\sigma^2)\\) 数式表現: \\(E[X_t]=0\\), \\(E[X_t^2]=\\sigma^2 &lt; \\infty \\quad (\\forall t)\\) \\[ E[X_t X_s] = \\begin{cases} \\sigma^2 &amp; (t = s)\\\\ 0 &amp; (t \\ne s) \\end{cases} \\quad (\\forall t,s) \\] IIDノイズ 有限分散を持つiid確率過程 (通常, 平均ゼロ) 独立性 → 無相関性により, ホワイトノイズと同じ形の自己共分散関数を持つ 表記: \\(\\{X_t\\} \\sim IID(0,\\sigma^2)\\) “強ホワイトノイズ”と呼ばれることもある 2.3 標本平均と標本自己共分散関数 観測された時系列データ\\(x_1,x_2,\\ldots,x_n\\)に対して 標本平均: \\[ \\bar{x} = \\frac{1}{n} \\sum_{t=1}^n x_t \\qquad (\\#eq:smean)\\] 確率過程 \\(\\{X_t,t=0,\\pm1,\\pm2,\\ldots\\}\\) の実現値を時間軸方向に平均した値 標本自己共分散関数: \\[ \\hat{\\gamma}(h) = \\frac{1}{n} \\sum_{i=1}^{n-|h|} (x_{t+|h|}-\\bar{x})(x_{t}-\\bar{x}),\\quad|h|&lt;n \\] 標本自己相関関数: \\[ \\hat{\\rho}(h) = \\frac{\\hat{\\gamma}(h)}{\\hat{\\gamma}(0)}, \\quad |h|&lt;n \\] 定常性の仮定が成立していなとくとも, 任意の時系列データに対して, (時間軸に沿って) 標本平均関数および標本自己共分散関数・標本自己相関関数を計算することができる. 標本自己共分散関数・標本自己相関関数の形状は, トレンドや周期性の存在を示す手掛かりとなる. 2.3.1 アンサンブル平均 vs 標本平均 平均関数の定義式における期待値 (式@ref(eq:mean.func)) は, 時点\\(t\\)において, 確率変数 \\(X_t\\) の全ての実現可能な値に対して平均を計算したもの (“アンサンブル平均”) である. 一方, 標本平均 (式(??)) は, 時系列データ (確率過程の実現値) を時間軸方向に平均した値 (時系列平均) である. よって, アンサンブル平均と時系列平均は, 概念的には別物である. データの背後にある確率過程\\(\\{X_t\\}\\)が定常であれば, 平均関数は定数値 \\(\\mu\\) を取るので, 標本平均を用いて推定する意味が出てくる. 標本平均 \\(\\bar{x}\\) の計算において, 十分に長いデータ期間を取る (標本サイズ \\(n \\rightarrow \\infty\\) ) ことで, \\(\\bar{x}\\) が真の値 \\(\\mu\\)に次第に近付いていく確率過程の性質を, (平均)エルゴード性 (ergodicity in (the) mean) と呼ぶ. 定常な確率過程を前提とした時系列解析は, 通常は, エルゴード性を有するモデルを前提に行われる. 2.4 標本自己相関関数 参考文献: CM, Ch.2 &amp; 4, Tsay, Ch.2 2.4.1 白色ノイズ (正規) 白色ノイズ ((Gaussian) white noise) # 乱数のシード設定 set.seed(1) w &lt;- rnorm(100) # 時系列プロット plot(w, type = &quot;l&quot;) # ヒストグラム z &lt;- seq(-3, 3, length = 1000) hist(rnorm(100), prob = T, xlim = c(-3, 3)); points(z, dnorm(z), type = &quot;l&quot;) # 自己相関関数(ACF) acf(w) # 2乗系列のACF acf(w^2) # 絶対値系列のACF acf(abs(w)) 2.4.2 ランダムウォーク (正規) ランダムウォーク ((Gaussian) random walk) x &lt;- cumsum(w) # 時系列プロット plot(x, type = &quot;l&quot;) # ACF acf(x) # 2乗系列のACF acf(x ^ 2) # 絶対値系列のACF acf(abs(x)) 2.4.3 非定常成分を含む時系列 2.4.3.1 AirPassengersデータ (出所: CM, Ch.2) data(AirPassengers) ap &lt;- AirPassengers acf(ap) 2.4.3.2 時系列の分解 decompose関数の利用 # 乗法モデルを仮定 ap_decom &lt;- decompose(ap, &quot;multiplicative&quot;) # トレンド成分 plot(ts(ap_decom$trend[7:138])) acf(ts(ap_decom$trend[7:138])) # 季節性成分 plot(ts(ap_decom$seasonal[7:138])) acf(ts(ap_decom$seasonal[7:138])) # ランダムノイズ成分 plot(ts(ap_decom$random[7:138])) acf(ts(ap_decom$random[7:138])) #library(zoo) # na.trim()使用 #acf(ap_decom$random, na.action = na.trim) # ← NA除去 # 標準偏差 sd(ap[7:138]) # sd of the original series #&gt; [1] 109.4187 sd(ap[7:138] - ap_decom$trend[7:138]) # after substracting the trend estimate #&gt; [1] 41.11491 sd(ap_decom$random[7:138]) # the error component #&gt; [1] 0.0333884 # → std dev gets smaller #または #library(zoo) #ap_d_zoo = zoo(ap_decom$random) stl関数の利用 # stl(): Seasonal Decomposition of Time Series by Loess ap_stl&lt;- stl(ap, &quot;period&quot;) # トレンド成分 plot(ap_stl$time.series[, &quot;trend&quot;]) # 季節性成分 plot(ap_stl$time.series[, &quot;seasonal&quot;]) # ランダムノイズ成分 plot(ap_stl$time.series[, &quot;remainder&quot;]) acf(ap_stl$time.series[, &quot;remainder&quot;]) 2.4.3.3 階差 (differencing) ap &lt;- AirPassengers is.ts(ap); is.vector(ts) #&gt; [1] TRUE #&gt; [1] FALSE # ACF acf(ap) # 対数値の階差系列のACF acf(diff(log(ap), lag = 1)) # 前月との階差 acf(diff(log(ap), lag = 12))# 1年前との階差 かばん検定 # かばん検定 (portmanteau test) Box.test(diff(log(ap), lag = 12)) # Box-Pierce検定 (デフォルト) #&gt; #&gt; Box-Pierce test #&gt; #&gt; data: diff(log(ap), lag = 12) #&gt; X-squared = 67.234, df = 1, p-value = 2.22e-16 Box.test(diff(log(ap), lag = 12), type = &quot;Ljung&quot;)# Ljung-Box検定 #&gt; #&gt; Box-Ljung test #&gt; #&gt; data: diff(log(ap), lag = 12) #&gt; X-squared = 68.774, df = 1, p-value &lt; 2.2e-16 2.4.3.4 株価データの例 (出所: Tsay, Ch.2) ifl &lt;- file.path(idir, &quot;m-ibmsp-2611.txt&quot;) da &lt;- read.table(&quot;m-ibmsp-2611.txt&quot;, header = T) #da &lt;- read.table(&quot;m-ibmsp6709.txt&quot;, header = T) head(da) #&gt; data ibm sp #&gt; 1 19260130 -0.010381 0.022472 #&gt; 2 19260227 -0.024476 -0.043956 #&gt; 3 19260331 -0.115591 -0.059113 #&gt; 4 19260430 0.089783 0.022688 #&gt; 5 19260528 0.036932 0.007679 #&gt; 6 19260630 0.068493 0.043184 ibm &lt;- da$ibm sp5 &lt;- da$sp plot(sp5, ibm) plot(ibm, type = &quot;l&quot;) plot(cumsum(log(ibm + 1)), type = &quot;l&quot;) # 原系列に対する自己相関性の検証 acf(ibm) acf(ibm)$acf #&gt; , , 1 #&gt; #&gt; [,1] #&gt; [1,] 1.000000000 #&gt; [2,] 0.037561974 #&gt; [3,] -0.008664145 #&gt; [4,] -0.016156989 #&gt; [5,] -0.030554233 #&gt; [6,] 0.015370816 #&gt; [7,] -0.041809301 #&gt; [8,] 0.003236462 #&gt; [9,] 0.063082544 #&gt; [10,] 0.048232274 #&gt; [11,] 0.037150816 #&gt; [12,] 0.011816712 #&gt; [13,] 0.010848647 #&gt; [14,] -0.067274698 #&gt; [15,] -0.011545286 #&gt; [16,] -0.038790792 #&gt; [17,] 0.031043139 #&gt; [18,] 0.029670820 #&gt; [19,] 0.065795548 #&gt; [20,] 0.019771486 #&gt; [21,] -0.013009184 #&gt; [22,] -0.012984508 #&gt; [23,] 0.002353094 #&gt; [24,] -0.072724702 #&gt; [25,] 0.053508492 #&gt; [26,] -0.010189813 #&gt; [27,] 0.036015597 #&gt; [28,] 0.019976030 #&gt; [29,] 0.032989584 #&gt; [30,] 0.004650878 #&gt; [31,] -0.016390330 Box.test(ibm, lag = 30) # Box-Pierce (デフォルト) #&gt; #&gt; Box-Pierce test #&gt; #&gt; data: ibm #&gt; X-squared = 38.094, df = 30, p-value = 0.1473 Box.test(ibm, lag = 30, type = &#39;Ljung&#39;) # Ljung-Box #&gt; #&gt; Box-Ljung test #&gt; #&gt; data: ibm #&gt; X-squared = 38.75, df = 30, p-value = 0.1314 #lnibm &lt;- log(ibm + 1) # Transfer to log returns #Box.test(lnibm, lag = 30, type = &#39;Ljung&#39;) # 絶対値系列, 2乗系列に対する自己相関性の検証 acf(abs(ibm)) acf(ibm ^ 2) Box.test(abs(ibm), lag = 30, type = &#39;Ljung&#39;) # Ljung-Box #&gt; #&gt; Box-Ljung test #&gt; #&gt; data: abs(ibm) #&gt; X-squared = 256.75, df = 30, p-value &lt; 2.2e-16 Box.test(ibm^2, lag = 30, type = &#39;Ljung&#39;) # Ljung-Box #&gt; #&gt; Box-Ljung test #&gt; #&gt; data: ibm^2 #&gt; X-squared = 189.3, df = 30, p-value &lt; 2.2e-16 2.4.4 線形時系列モデル 2.4.4.1 MA(1)・AR(1)モデル 2.4.4.1.1 シミュレーションによるパス生成 AR(1)モデル #par(mfrow = c(3,1)) Tlen = 100 set.seed(1) phi &lt;- - 0.8 x &lt;- w &lt;- rnorm(100) for (t in 2:100) x[t] = phi * x[t-1] + w[t] plot(x, type = &quot;l&quot;) # 時系列プロット acf(x) # 自己相関(ACF) pacf(x) # 偏自己相関(PACF) MA(1)モデル theta &lt;- - 0.8 for (t in 2:100) x[t] &lt;- w[t] + theta * w[t-1] plot(x, type = &quot;l&quot;) # 時系列プロット acf(x) # 自己相関(ACF) pacf(x) # 偏自己相関(PACF) 2.4.4.2 ARMA(1,1)モデル ARMA(1,1)モデル phi &lt;- 0.5; theta &lt;- 0.5 set.seed(1) x &lt;- arima.sim(n = Tlen, model = list(order = c(1,0,1), ar = phi, ma = theta)) plot(x, type = &quot;l&quot;) # 時系列プロット acf(x) # 自己相関(ACF) pacf(x) # 偏自己相関(PACF) 2.5 自己相関関数 (標本値 vs 理論値) AR(2) モデル シミュレーション sim_AR2 &lt;- function(phi_par, n_sim = 100, seed = 1, ...){ set.seed(seed) par(mfrow = c(3, 1)) x &lt;- w &lt;- rnorm(n_sim) for (t in 3:n_sim) {x[t] &lt;- phi_par[1] * x[t-1] + phi_par[2] * x[t-2] + w[t]} plot(x, type = &quot;l&quot;, ...) acf(x); pacf(x) par(mfrow = c(1,1)) } # Tsay, p_57, Fig 2_9のパラメータ例 phi_par1 &lt;- c(1.2, -0.35) # (phi1, phi2) phi_par2 &lt;- c(0.6, -0.4) # (phi1, phi2) phi_par3 &lt;- c(0.2, 0.35) # (phi1, phi2) phi_par4 &lt;- c(-0.2, 0.35) # (phi1, phi2) N &lt;- 400 Sd &lt;- 100 sim_AR2(phi_par1, n_sim = N, seed = Sd, main = &quot;(1)&quot;) sim_AR2(phi_par2, n_sim = N, seed = Sd, main = &quot;(2)&quot;) sim_AR2(phi_par3, n_sim = N, seed = Sd, main = &quot;(3)&quot;) sim_AR2(phi_par4, n_sim = N, seed = Sd, main = &quot;(4)&quot;) AR(2)の特性方程式の解 sol_AR2eqn &lt;- function(phi_par){ D &lt;- phi_par[1]^2 + 4 * phi_par[2] if (D&gt;= 0){ z1 &lt;- (phi_par[1] + sqrt(D)) / (-2 * phi_par[2]) z2 &lt;- (phi_par[1] - sqrt(D)) / (-2 * phi_par[2]) } else{ z1 &lt;- complex(re = phi_par[1] / (-2 * phi_par[2]), im = sqrt(-D)/(-2 * phi_par[2])) z2 &lt;- complex(re = phi_par[1] / (-2 * phi_par[2]), im = -sqrt(-D)/(-2 * phi_par[2])) } return(c(z1,z2)) } sol_AR2eqn(phi_par1) ## [1] 2.000000 1.428571 sol_AR2eqn(phi_par2) ## [1] 0.75+1.391941i 0.75-1.391941i sol_AR2eqn(phi_par3) ## [1] -2.000000 1.428571 sol_AR2eqn(phi_par4) ## [1] -1.428571 2.000000 AR(2)のACF理論値: rhoに関する差分方程式(漸化式)より計算 plot_ACF_AR2 &lt;- function(phi_par, hlen=10){ rho_0 &lt;- 1 rho_1 &lt;- phi_par[1]/(1-phi_par[2]) ACF_h &lt;- c(rho_0, rho_1) for (h in 1:hlen){ rho_2 = phi_par[1]*rho_1 + phi_par[2]*rho_0 ACF_h = c(ACF_h, rho_2) rho_0 = rho_1; rho_1 = rho_2 } barplot(ACF_h, main=phi_par) } 代替的アプローチ: 特性方程式の解を使って導出 plot_ACF_AR2_2 &lt;- function(phi_par, hlen=10){ zvec &lt;- sol_AR2eqn(phi_par) # 特性方程式の解 rho_0 &lt;- 1 rho_1 &lt;- phi_par[1]/(1-phi_par[2]) # c1, c2に関する連立方程式 cvec &lt;- solve(matrix(c(1, 1 , 1 / zvec[1], 1 / zvec[2]), 2, byrow = T), c(rho_0, rho_1) ) hvec &lt;- 0:hlen if (! is_complex(zvec)){ # 実根の場合 if (zvec[1] != zvec[2]) ACF_h &lt;- cvec[1] * zvec[1] ^ (-hvec) + cvec[2] * zvec[2] ^ (-hvec) else ACF_h &lt;- zvec[1]^(-hvec) * (cvec[1] + cvec[2] * hvec) # 重根 } else{ # 複素共役 (complex conjugates) の場合 z_mod &lt;- Mod(zvec[1]) th &lt;- Arg(zvec[1]) ACF_h &lt;- z_mod ^ (-hvec) * cos(hvec * th) } barplot(ACF_h, main = phi_par) } plot_ACF_AR2(phi_par1) plot_ACF_AR2(phi_par2) plot_ACF_AR2(phi_par3) plot_ACF_AR2(phi_par4) &lt;!— ### MA(2)モデル - シミュレーションと標本ACF・標本PACF sim_MA2 &lt;- function(theta_par, n_sim = 100, seed = 1, ...){ set.seed(seed) par(mfrow = c(3, 1)) x &lt;- w &lt;- rnorm(n_sim) for (t in 3:n_sim) {x[t] &lt;- w[t] + theta_par[1] * w[t-1] + theta_par[2] * w[t-2]} plot(x, type = &quot;l&quot;, ...) acf(x); pacf(x) par(mfrow = c(1, 1)) } theta_par1 &lt;- c(1.2, -0.35) # (theta1, theta2) theta_par2 &lt;- c(0.6, -0.4) # (theta1, theta2) theta_par3 &lt;- c(0.2, 0.35) # (theta1, theta2) theta_par4 &lt;- c(-0.2, 0.35) # (theta1, theta2) Sd &lt;- 100 sim_MA2(theta_par1, n_sim = N, seed = Sd, main = &quot;(1)&quot;) sim_MA2(theta_par2, n_sim = N, seed = Sd, main = &quot;(2)&quot;) sim_MA2(theta_par3, n_sim = N, seed = Sd, main = &quot;(3)&quot;) sim_MA2(theta_par4, n_sim = N, seed = Sd, main = &quot;(4)&quot;) 2.5.1 ARMA(1,1)モデル シミュレーションと標本ACF・標本PACF phi &lt;- 0.5; theta &lt;- 0.5 set.seed(1) x &lt;- arima.sim(n = N, model = list(order = c(1, 0, 1), ar = phi, ma = theta)) plot(x, type = &quot;l&quot;) # 時系列プロット acf(x) # 自己相関(ACF) pacf(x) # 偏自己相関(PACF) –!&gt; "],["armapqモデル.html", "3 ARMA\\((p,q)\\)モデル 3.1 ARMA\\((p,q)\\)モデルとは 3.2 ARMA\\((p,q)\\)モデルによる予測 3.3 ARMA\\((p,q)\\)モデルの推定 3.4 ARMA\\((p,q)\\)モデルの同定 (次数の特定) 3.5 Rによる実行例 3.6 ARMAモデル: データ分析例 (Tsay, Ch2)", " 3 ARMA\\((p,q)\\)モデル 3.1 ARMA\\((p,q)\\)モデルとは 定常, かつ 次の差分方程式を満たす\\({X_t}\\): \\[ X_t - \\phi_1 X_{t-1} - \\cdots - \\phi_p X_{t-p}= Z_t + \\theta_1 X_{t-1} + \\cdots + \\theta_q Z_{t-q} \\tag{1}\\] コンパクトな代替表現: \\[ \\phi(B)X_t = \\theta(B) Z_t \\tag{2}\\] Backward shift operator \\(B\\) AR多項式 \\(\\phi(z)=1 - \\phi_1 z - \\cdots - \\phi_p z^p\\) MA多項式 \\(\\theta(z)=1 + \\theta_1 z + \\cdots + \\theta_q z^q\\) 因果性と反転可能性 差分方程式の解\\({X_t}\\) 形式的に解くと, \\[ X_t = \\frac{\\theta(B)}{\\phi(B)} Z_t \\tag{3}\\] 解が存在 (定常, 因果的) するための条件? 定常性: \\(\\phi(z) \\ne 0,\\ \\forall |z|=1\\) 因果性: \\(\\phi(z) \\ne 0,\\ \\forall |z|\\le 1\\) +反転可能性: \\(\\theta(z) \\ne 0,\\ \\forall |z|\\le 1\\) ※ \\(\\phi(z)=0, \\theta(z)=0\\)は共通根を持たない (識別可能性) ※ 因果性は実用上不可欠: \\(X_t = \\sum_{i=0}^{\\infty}\\psi_i Z_{t-i}\\) (with \\(\\sum_{i=0}^{\\infty}|\\psi_i|&lt;\\infty\\)) (MA\\((\\infty)\\)表現) ※ 反転可能性は推定のために付加する条件: \\(Z_t = \\sum_{i=0}^{\\infty}\\pi_i X_{t-i}\\) (with \\(\\sum_{i=0}^{\\infty}|\\pi_i|&lt;\\infty\\)) (AR\\((\\infty)\\)表現) ARMA\\((p,q)\\)モデルの意義 なぜ必要か? AR(p)過程 実際の時系列データの記述 → 大きな\\(p\\)が必要となる可能性 MA\\((q)\\)過程. 反転可能な場合, AR\\((\\infty)\\)表現が可能 \\[ Z_t = X_t + \\sum_{i=1}^{\\infty}\\pi_i X_{t-i} \\] ∴ AR\\((p)\\)過程にMA\\((q)\\)項を付与することで, 少ないパラメータで, 現象を表現できることが期待される 3.2 ARMA\\((p,q)\\)モデルによる予測 過去データ\\(X_t,X_{t-1},\\cdots,X_1\\)に基づき, \\(h\\)期先の値\\(X_{t+h}\\)を予測したい モデルを推定 → 推定モデルを使って予測 どのように予測するか? 定常過程の予測 (当然, ARMA\\((p,q)\\)過程を含む) 線形予測 (Best Linear Prediction) 線形回帰問題を解く(正規方程式の解) AR\\((p)\\)モデル → \\(\\phi\\)係数をそのまま予測に使用 一般的解法 (MA\\((q)\\), ARMA\\((p,q)\\)モデル等にも適用): アルゴリズムによる予測(Duribin-Levinsonアルゴリズム, Innovationアルゴリズム) 3.3 ARMA\\((p,q)\\)モデルの推定 モデルをどのように推定するか? 次数\\(p,q\\)の同定(identification) (モデル選択) モデルパラメータ\\(\\phi\\) , \\(\\theta\\)の推定 予備的な推定 (→ 最尤法の初期値に利用可能) AR\\((p)\\)モデルのみ: Yule-Walker法, Burg法 MA\\((q)\\), ARMA\\((p,q)\\)モデル: Innovationアルゴリズム, Hannan-Rissanenアルゴリズム等 最尤法 標準的には, \\(Z_t\\)が正規ホワイトノイズ (IID + 正規分布) → \\(X_t\\)は, Gaussian過程 \\(Z_t\\)が非正規のIIDノイズの場合でも, 大標本ならば使用OK モデル診断 適合モデルから得られた残差系列がホワイトノイズか? 時系列プロット, 標本ACFプロット 自己相関の検定, かばん検定 正規性検定 (qqプロット, Jarque-Bera検定など) 参考文献: Brockwell and Davis, Introduction to Time Series and Forecasting. 3.4 ARMA\\((p,q)\\)モデルの同定 (次数の特定) 標本自己相関(ACF), 標本偏自己相関(PACF)の使用 定常過程は, ACVF/ACFによって特徴付けられる →時系列データから標本SACFをプロット AR\\((p)\\) → PACFが\\((p+1)\\)次以降のラグが値\\(0\\) MA\\((q)\\) → ACFが\\((q+1)\\)次以降のラグが値\\(0\\) ARMA\\((p,q)\\) →Extended ACF(EACF)の表内で, “○”(値が有意でない)の領域中で最も左上の要素の位置(行\\(p\\),列\\(q\\))を見つける AIC, BICなどのモデル選択基準の使用 モデル推定と同時に行う モデル選択基準 = - 2・対数尤度 + 罰則項(パラメータ数の増加関数) 3.5 Rによる実行例 3.5.1 ARMA\\((p,q)\\)モデルの同定 (ACF/PACF/EACFの利用) AR(3)モデル #par(mfrow = c(3,1)) Tlen = 100 phi=c(0.5,-0.8, 0.5); theta = NULL set.seed(10) x = arima.sim(n = Tlen, model = list(order = c(3,0,0), ar = phi, ma = theta)) #plot(x, type = &quot;l&quot;) # 時系列プロット par(mfrow = c(1,2)) acf(x) # 自己相関(ACF) pacf(x) # 偏自己相関(PACF) MA(2)モデル phi = NULL; theta=c(0.3,0.4) set.seed(10) x = arima.sim(n = Tlen, model = list(order = c(0,0,2), ar = phi, ma = theta)) #plot(x, type = &quot;l&quot;) # 時系列プロット par(mfrow = c(1,2)) acf(x) # 自己相関(ACF) pacf(x) # 偏自己相関(PACF) ARMA(2,1)モデル phi = c(0.3,-0.8); theta = 0.9 set.seed(10) x = arima.sim(n = Tlen, model = list(order = c(2,0,1), ar = phi, ma = theta)) #plot(x, type=&quot;l&quot;) # 時系列プロット par(mfrow = c(1,2)) acf(x) # 自己相関(ACF) pacf(x) # 偏自己相関(PACF) require(TSA) ## Loading required package: TSA ## ## Attaching package: &#39;TSA&#39; ## The following objects are masked from &#39;package:stats&#39;: ## ## acf, arima ## The following object is masked from &#39;package:utils&#39;: ## ## tar m1 = eacf(x, 6, 8) # Simplified table ## AR/MA ## 0 1 2 3 4 5 6 7 8 ## 0 x x x x x o x o o ## 1 x x x x x x x o o ## 2 x o o o o o o o o ## 3 x o o o o o o o o ## 4 x x x o o o o o o ## 5 x o x o o o o o o ## 6 x o o o o o o o o print(m1$eacf, digits = 2) ## [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] ## [1,] 0.30 -0.613 -0.41 0.304 0.3518 -0.131 -0.269 0.048 0.197 ## [2,] 0.34 -0.767 -0.43 0.462 0.3388 -0.214 -0.250 0.088 0.182 ## [3,] 0.50 -0.021 -0.13 -0.135 -0.0102 0.053 0.033 -0.095 -0.205 ## [4,] 0.51 -0.097 -0.11 -0.140 -0.0241 0.116 0.031 -0.062 -0.183 ## [5,] 0.26 -0.364 0.40 -0.137 -0.0169 -0.032 0.012 -0.078 -0.104 ## [6,] 0.47 -0.028 0.23 -0.162 0.0055 -0.045 0.055 -0.055 -0.114 ## [7,] 0.49 0.052 0.17 -0.067 -0.1727 -0.019 0.038 -0.070 -0.059 → EACFは\\((p,q)=(2,1)\\)を示唆. 3.5.2 ARMA\\((p,q)\\)モデルの推定・診断 仮に\\((p,q)=(2,2)\\)を選んだとすると, (x.fit = arima(x,order = c(2,0,2))) # ARMA(2,2)モデルの推定(制約なし) ## ## Call: ## arima(x = x, order = c(2, 0, 2)) ## ## Coefficients: ## ar1 ar2 ma1 ma2 intercept ## 0.3556 -0.7777 0.8059 -0.0712 -0.0247 ## s.e. 0.0887 0.0687 0.1279 0.1353 0.1187 ## ## sigma^2 estimated as 0.9372: log likelihood = -140.93, aic = 291.87 # --&gt; 有意でない係数=0を指定 (x.fit2 = arima(x,order = c(2,0,2), fixed = c(NA,NA,NA,0,NA))) # 制約付き推定 ## ## Call: ## arima(x = x, order = c(2, 0, 2), fixed = c(NA, NA, NA, 0, NA)) ## ## Coefficients: ## ar1 ar2 ma1 ma2 intercept ## 0.3270 -0.7772 0.8604 0 -0.0260 ## s.e. 0.0706 0.0691 0.0802 0 0.1249 ## ## sigma^2 estimated as 0.9407: log likelihood = -141.07, aic = 290.15 tsdiag(x.fit2, gof = 20) # モデル診断 Box.test(x.fit2$residuals, lag = 20, type = &#39;Ljung&#39;) # Ljung-Box検定 ## ## Box-Ljung test ## ## data: x.fit2$residuals ## X-squared = 13.785, df = 20, p-value = 0.8412 3.5.3 パッケージ{forecast}の利用 モデルの自動選択・推定 require(forecast) ## Loading required package: forecast ## Registered S3 method overwritten by &#39;quantmod&#39;: ## method from ## as.zoo.data.frame zoo ## Registered S3 methods overwritten by &#39;forecast&#39;: ## method from ## fitted.Arima TSA ## plot.Arima TSA (x.fit3 = auto.arima(x)) # AIC/AICc(デフォルト)/BICによりモデルを自動選択&amp;推定 ## Series: x ## ARIMA(2,0,1) with zero mean ## ## Coefficients: ## ar1 ar2 ma1 ## 0.3273 -0.7773 0.8606 ## s.e. 0.0706 0.0691 0.0801 ## ## sigma^2 = 0.9702: log likelihood = -141.1 ## AIC=290.19 AICc=290.61 BIC=300.61 推定モデルを使った予測 (x.pred = forecast(x.fit3, h=20)) ## Point Forecast Lo 80 Hi 80 Lo 95 Hi 95 ## 101 4.8076600 3.5453579 6.0699620 2.8771355 6.7381844 ## 102 3.2942800 1.3342557 5.2543043 0.2966815 6.2918785 ## 103 -2.6587345 -4.6791846 -0.6382845 -5.7487463 0.4312772 ## 104 -3.4306758 -5.8473695 -1.0139821 -7.1266899 0.2653382 ## 105 0.9437980 -1.4734713 3.3610674 -2.7530964 4.6406925 ## 106 2.9754436 0.3543532 5.5965340 -1.0331682 6.9840554 ## 107 0.2401888 -2.4072595 2.8876371 -3.8087340 4.2891116 ## 108 -2.2341203 -4.9639829 0.4957423 -6.4090848 1.9408442 ## 109 -0.9178543 -3.6944931 1.8587845 -5.1643569 3.3286483 ## 110 1.4361307 -1.3626481 4.2349096 -2.8442321 5.7164936 ## 111 1.1834256 -1.6613440 4.0281953 -3.1672741 5.5341253 ## 112 -0.7289626 -3.5757196 2.1177945 -5.0827018 3.6247766 ## 113 -1.1584110 -4.0375796 1.7207575 -5.5617193 3.2448973 ## 114 0.1874876 -2.6922716 3.0672467 -4.2167240 4.5916991 ## 115 0.9617589 -1.9352597 3.8587775 -3.4688487 5.3923665 ## 116 0.1690270 -2.7318039 3.0698578 -4.2674110 4.6054649 ## 117 -0.6922301 -3.5997273 2.2152671 -5.1388633 3.7544032 ## 118 -0.3579265 -3.2709875 2.5551344 -4.8130688 4.0972157 ## 119 0.4209117 -2.4936672 3.3354906 -4.0365521 4.8783755 ## 120 0.4159582 -2.5036126 3.3355289 -4.0491400 4.8810563 plot(x.pred) # 3.6 ARMAモデル: データ分析例 (Tsay, Ch2) 出所: Tsay, Ch.2 (一部改変) 3.6.1 標本ACF pp.46–47 Example 2.1 ifl &lt;- file.path(dir_introTS, &quot;m-dec12910.txt&quot;) da = read.table(ifl, header=T) #da = read.table(&quot;m-dec12910.txt&quot;, header = T) head(da) ## date dec1 dec2 dec9 dec10 ## 1 19670131 0.068568 0.080373 0.180843 0.211806 ## 2 19670228 0.008735 0.011044 0.048767 0.064911 ## 3 19670331 0.039698 0.035364 0.067494 0.068904 ## 4 19670428 0.044030 0.037541 0.040785 0.044602 ## 5 19670531 -0.050631 -0.036233 -0.002191 0.000295 ## 6 19670630 0.014998 0.018870 0.102075 0.118678 d10 = da$dec10 # select the Decile 10 returns dec10 = ts(d10, frequency = 12, start = c(1967, 1)) par(mfcol = c(2, 1)) plot(dec10, xlab = &#39;year&#39;, ylab = &#39;returns&#39;) # matplot(da[, -1], type = &quot;l&quot;) title(main = &#39;(a): Simple returns&#39;) acf(d10, lag = 24) # command to obtain sample ACF of the data # RK: 有意性確認 f1 = acf(d10, lag = 24) f1$acf ## , , 1 ## ## [,1] ## [1,] 1.000000000 ## [2,] 0.227386585 ## [3,] -0.019026447 ## [4,] -0.021258247 ## [5,] 0.011011345 ## [6,] 0.002676057 ## [7,] -0.027654887 ## [8,] -0.016910608 ## [9,] -0.049183690 ## [10,] -0.039617756 ## [11,] 0.013265549 ## [12,] 0.061013220 ## [13,] 0.130411045 ## [14,] -0.036881195 ## [15,] -0.082462743 ## [16,] -0.020950139 ## [17,] 0.016726386 ## [18,] -0.013961209 ## [19,] -0.059422809 ## [20,] -0.082246074 ## [21,] -0.063641596 ## [22,] -0.039858376 ## [23,] 0.017770989 ## [24,] -0.015413528 ## [25,] 0.052212082 # (tt = f1$acf[13] * sqrt(516)) # nrow(da) = 516 (tt = f1$acf[13] * sqrt(length(d10))) # 絶対値の大きいh = 13でのt値 ## [1] 2.962369 Ljung-Box Q statistics P.48, Example 2.2 ifl &lt;- file.path(dir_introTS, &quot;m-ibmsp6709.txt&quot;) da = read.table(ifl, header=T) #da = read.table(&quot;m-ibmsp6709.txt&quot;, header = T) ibm = da$ibm lnibm = log(ibm + 1) # Transfer to log returns Box.test(ibm, lag = 12, type = &#39;Ljung&#39;) ## ## Box-Ljung test ## ## data: ibm ## X-squared = 7.5666, df = 12, p-value = 0.818 Box.test(lnibm, lag = 12, type = &#39;Ljung&#39;) ## ## Box-Ljung test ## ## data: lnibm ## X-squared = 7.4042, df = 12, p-value = 0.8298 3.6.2 AR, MA, ARMA (2.4–2.6) p.58, Example 2.3 GNP, 1947.Q1–2010.Q1 par(mfrow = c(1, 1)) ifl &lt;- file.path(dir_introTS, &quot;q-gnp4710.txt&quot;) da = read.table(ifl, header=T) #da = read.table(&quot;q-gnp4710.txt&quot;, header = T) head(da); tail(da); nrow(da) ## Year Mon Dat VALUE ## 1 1947 1 1 238.1 ## 2 1947 4 1 241.5 ## 3 1947 7 1 245.6 ## 4 1947 10 1 255.6 ## 5 1948 1 1 261.7 ## 6 1948 4 1 268.7 ## Year Mon Dat VALUE ## 248 2008 10 1 14317.2 ## 249 2009 1 1 14172.2 ## 250 2009 4 1 14164.2 ## 251 2009 7 1 14281.9 ## 252 2009 10 1 14442.8 ## 253 2010 1 1 14637.6 ## [1] 253 G = da$VALUE plot(G, type = &quot;l&quot;) LG = log(G) gnp = diff(LG) dim(da) ## [1] 253 4 #tdx = c(1:253) / 4 + 1947 # create the time index tdx = c(1:length(G)) / 4 + 1947 # 1947スタート, 四半期データ par(mfcol = c(2, 1)) plot(tdx, G, xlab = &#39;year&#39;, ylab = &#39;GNP&#39;, type = &#39;l&#39;) #plot(tdx[2:253], gnp, type = &#39;l&#39;, xlab = &#39;year&#39;, ylab = &#39;growth&#39;) plot(tdx[-1], gnp, type = &#39;l&#39;, xlab = &#39;year&#39;, ylab = &#39;growth&#39;) # acf(gnp, lag = 12) pacf(gnp, lag = 12) # compute PACF arima(): 一変量arimaモデルの適合 (次数order, 分析者が指定) (m1 = arima(gnp, order = c(3, 0, 0))) # ARIMA(3, 0, 0) = AR(3) ## ## Call: ## arima(x = gnp, order = c(3, 0, 0)) ## ## Coefficients: ## ar1 ar2 ar3 intercept ## 0.4386 0.2063 -0.1559 0.0163 ## s.e. 0.0620 0.0666 0.0626 0.0012 ## ## sigma^2 estimated as 9.549e-05: log likelihood = 808.56, aic = -1607.12 tsdiag(m1, gof = 12) # model checking discussed later p1 = c(1, -m1$coef[1:3]) # set-up the polynomial (AR係数) (r1 = polyroot(p1)) # solve the polynomial equation (AR特性方程式の解) ## [1] 1.616116+0.864212i -1.909216+0.000000i 1.616116-0.864212i Mod(r1) # compute absolute value ## [1] 1.832674 1.909216 1.832674 (k = 2 * pi / acos(1.616116 / 1.832674)) # compute length of the period ## [1] 12.79523 # &lt;-- (ACF)周期の計算, p.56内, k = の式 (参考) zooクラスにして実行した場合 library(zoo) ## ## Attaching package: &#39;zoo&#39; ## The following objects are masked from &#39;package:base&#39;: ## ## as.Date, as.Date.numeric G.zoo = zoo(G, tdx) plot(G.zoo) m1.zoo = arima(diff(log(G.zoo)), order = c(3, 0, 0)) tsdiag(m1.zoo, gof = 12) # gnp.zoo = zoo(gnp, tdx[-1]) gnp.zoo = diff(log(G.zoo)) # zoo クラス plot(gnp.zoo) # Q statistic: based on lag autocorrelation coefficients Box.test(m1.zoo$residuals, lag = 1, type = &quot;Ljung-Box&quot;) ## ## Box-Ljung test ## ## data: m1.zoo$residuals ## X-squared = 0.0071647, df = 1, p-value = 0.9325 Box.test(m1.zoo$residuals, lag = 5, type = &quot;Ljung-Box&quot;) ## ## Box-Ljung test ## ## data: m1.zoo$residuals ## X-squared = 6.1525, df = 5, p-value = 0.2917 Box.test(m1.zoo$residuals, lag = 12, type = &quot;Ljung-Box&quot;) # → p = 0.05271 ## ## Box-Ljung test ## ## data: m1.zoo$residuals ## X-squared = 20.844, df = 12, p-value = 0.05271 p.63 mm1 = ar(gnp, method = &#39;mle&#39;) # yule-walker(デフォルト), burg, ols, yw # aic = T (デフォルト) --&gt; 次数選択実行 mm1$order # Find the identified order ## [1] 9 names(mm1) ## [1] &quot;order&quot; &quot;ar&quot; &quot;var.pred&quot; &quot;x.mean&quot; &quot;aic&quot; ## [6] &quot;n.used&quot; &quot;n.obs&quot; &quot;order.max&quot; &quot;partialacf&quot; &quot;resid&quot; ## [11] &quot;method&quot; &quot;series&quot; &quot;frequency&quot; &quot;call&quot; &quot;asy.var.coef&quot; print(mm1$aic, digits = 3) ## 0 1 2 3 4 5 6 7 8 9 10 ## 77.767 11.915 8.792 4.669 6.265 5.950 5.101 4.596 6.541 0.000 0.509 ## 11 12 ## 2.504 2.057 aic = mm1$aic # For plotting below. length(aic) ## [1] 13 plot(c(0:12), aic, type = &#39;h&#39;, xlab = &#39;order&#39;, ylab = &#39;aic&#39;) lines(0:12, aic, lty = 2) # RK: In ar.yw the variance matrix of the innovations is computed from the fitted coefficients and the autocovariance of x. (参考) zooクラス利用の場合 aic.zoo = zoo(aic, order.by = c(0:12)) plot(aic.zoo) table 2.1 (p.61)の例, Value-weighted Index # AR係数は小さいが有意. 定数項の有意性⇒期待値非ゼロ? #vw = read.table(&#39;m-ibm3dx.txt&#39;, header = T)[, 3] ifl &lt;- file.path(dir_introTS, &#39;m-ibm3dx2608.txt&#39;) vw = read.table(ifl, header=T)[, 3] ar(vw, method = &quot;mle&quot;) # demean = T ## ## Call: ## ar(x = vw, method = &quot;mle&quot;) ## ## Coefficients: ## 1 2 3 4 5 6 7 8 ## 0.1167 -0.0112 -0.1126 0.0217 0.0735 -0.0452 0.0254 0.0462 ## 9 ## 0.0660 ## ## Order selected 9 sigma^2 estimated as 0.002831 #ar(vw) # average annual simple gross returnの計算 (t1 = prod(vw + 1)) ## [1] 1592.953 # t1^(12 / 996)-1 # 年平均成長率 t1^(12 / length(vw))-1 # 年平均成長率 ## [1] 0.09290084 #tmp &lt;- ar(vw, method = &quot;mle&quot;) # tmp$ar / sqrt(diag(tmp$asy)) (m3 = arima(vw, order = c(3, 0, 0))) # include.mean = T (デフォルト) ## ## Call: ## arima(x = vw, order = c(3, 0, 0)) ## ## Coefficients: ## ar1 ar2 ar3 intercept ## 0.1158 -0.0187 -0.1042 0.0089 ## s.e. 0.0315 0.0317 0.0317 0.0017 ## ## sigma^2 estimated as 0.002875: log likelihood = 1500.86, aic = -2991.73 # --&gt; phi2有意でない (1-.1158 + .0187 + .1042)*mean(vw) # Compute the intercept phi(0). ## [1] 0.008967611 # m3$coef sqrt(m3$sigma2) # Compute standard error of residuals ## [1] 0.0536189 Box.test(m3$residuals, lag = 12, type = &#39;Ljung&#39;) ## ## Box-Ljung test ## ## data: m3$residuals ## X-squared = 16.352, df = 12, p-value = 0.1756 # --&gt; X-squared = 16.352 (pv = 1-pchisq(16.35, 9)) # Compute p value using 12 degrees of freedom ## [1] 0.05992276 # ← カイ2乗分布の自由度12-3 = 9(AR多項式の次数p = 3) (m3 = arima(vw, order = c(3, 0, 0), fixed = c(NA, 0, NA, NA))) ## Warning in arima(vw, order = c(3, 0, 0), fixed = c(NA, 0, NA, NA)): some AR ## parameters were fixed: setting transform.pars = FALSE ## ## Call: ## arima(x = vw, order = c(3, 0, 0), fixed = c(NA, 0, NA, NA)) ## ## Coefficients: ## ar1 ar2 ar3 intercept ## 0.1136 0 -0.1063 0.0089 ## s.e. 0.0313 0 0.0315 0.0017 ## ## sigma^2 estimated as 0.002876: log likelihood = 1500.69, aic = -2993.38 # ← パラメータを推定する場合には&quot;NA&quot;指定: この例では, phi2 = 0 (1-.1136 + .1063)*.0089 # compute phi(0) ## [1] 0.00883503 sqrt(m3$sigma2) # compute residual standard error ## [1] 0.05362832 Box.test(m3$residuals, lag = 12, type = &#39;Ljung&#39;) ## ## Box-Ljung test ## ## data: m3$residuals ## X-squared = 16.828, df = 12, p-value = 0.1562 (pv = 1-pchisq(16.83, 10)) ## [1] 0.07821131 # ← カイ2乗分布の自由度12-2 = 10(AR多項式の次数p = 2) p.77 ifl &lt;- file.path(dir_introTS, &#39;m-ibm3dx2608.txt&#39;) da = read.table(ifl, header=T) head(da) ## date ibmrtn vwrtn ewrtn sprtn ## 1 19260130 -0.010381 0.000724 0.023174 0.022472 ## 2 19260227 -0.024476 -0.033374 -0.053510 -0.043956 ## 3 19260331 -0.115591 -0.064341 -0.096824 -0.059113 ## 4 19260430 0.089783 0.038358 0.032946 0.022688 ## 5 19260528 0.036932 0.012172 0.001035 0.007679 ## 6 19260630 0.068493 0.056888 0.050487 0.043184 ew = da$ewrtn (m1 = arima(ew, order = c(0, 0, 9))) # unrestricted model ## ## Call: ## arima(x = ew, order = c(0, 0, 9)) ## ## Coefficients: ## ma1 ma2 ma3 ma4 ma5 ma6 ma7 ma8 ## 0.2144 0.0374 -0.1203 -0.0425 0.0232 -0.0302 0.0482 -0.0276 ## s.e. 0.0316 0.0321 0.0328 0.0336 0.0319 0.0318 0.0364 0.0354 ## ma9 intercept ## 0.1350 0.0122 ## s.e. 0.0323 0.0028 ## ## sigma^2 estimated as 0.005043: log likelihood = 1220.86, aic = -2419.72 # --&gt; 有意でない係数 = 0を指定 (m1 = arima(ew, order = c(0, 0, 9), fixed = c(NA, 0, NA, 0, 0, 0, 0, 0, NA, NA))) ## ## Call: ## arima(x = ew, order = c(0, 0, 9), fixed = c(NA, 0, NA, 0, 0, 0, 0, 0, NA, NA)) ## ## Coefficients: ## ma1 ma2 ma3 ma4 ma5 ma6 ma7 ma8 ma9 intercept ## 0.1909 0 -0.1199 0 0 0 0 0 0.1227 0.0122 ## s.e. 0.0293 0 0.0338 0 0 0 0 0 0.0312 0.0027 ## ## sigma^2 estimated as 0.005097: log likelihood = 1215.61, aic = -2421.22 sqrt(0.005097) ## [1] 0.07139328 Box.test(m1$residuals, lag = 12, type = &#39;Ljung&#39;) # model checking ## ## Box-Ljung test ## ## data: m1$residuals ## X-squared = 17.604, df = 12, p-value = 0.1283 (pv = 1-pchisq(17.6, 9)) # compute p-value after adjusting the d.f. ## [1] 0.04010828 # ← カイ2乗分布の自由度12-3 = 9(AR多項式の次数p = 3) # Out-of-sample prediction (m1 = arima(ew[1:986], order = c(0, 0, 9), fixed = c(NA, 0, NA, 0, 0, 0, 0, 0, NA, NA))) ## ## Call: ## arima(x = ew[1:986], order = c(0, 0, 9), fixed = c(NA, 0, NA, 0, 0, 0, 0, 0, ## NA, NA)) ## ## Coefficients: ## ma1 ma2 ma3 ma4 ma5 ma6 ma7 ma8 ma9 intercept ## 0.1844 0 -0.1206 0 0 0 0 0 0.1218 0.0128 ## s.e. 0.0295 0 0.0338 0 0 0 0 0 0.0312 0.0027 ## ## sigma^2 estimated as 0.005066: log likelihood = 1206.44, aic = -2402.88 predict(m1, 10) # prediction ## $pred ## Time Series: ## Start = 987 ## End = 996 ## Frequency = 1 ## [1] 0.004282626 0.013558874 0.015024191 0.014453445 0.012046343 0.001805558 ## [7] 0.012211538 0.005514814 0.008513456 0.012791824 ## ## $se ## Time Series: ## Start = 987 ## End = 996 ## Frequency = 1 ## [1] 0.07117456 0.07237493 0.07237493 0.07288176 0.07288176 0.07288176 ## [7] 0.07288176 0.07288176 0.07288176 0.07339566 EACF table ifl &lt;- file.path(dir_introTS, &#39;m-3m4608.txt&#39;) da = read.table(ifl, header=T) head(da) ## date rtn ## 1 19460228 -0.077922 ## 2 19460330 0.018592 ## 3 19460430 -0.100000 ## 4 19460531 0.209877 ## 5 19460628 0.005128 ## 6 19460731 0.076531 mmm = log(da$rtn + 1) library(TSA) # Load the package ## ## Attaching package: &#39;TSA&#39; ## The following objects are masked from &#39;package:stats&#39;: ## ## acf, arima ## The following object is masked from &#39;package:utils&#39;: ## ## tar m1 = eacf(mmm, 6, 12) # Simplified table ## AR/MA ## 0 1 2 3 4 5 6 7 8 9 10 11 12 ## 0 o o x o o x o o o x o x o ## 1 x o x o o x o o o o o x o ## 2 x x x o o x o o o o o o o ## 3 x x x o o o o o o o o o o ## 4 x o x o o o o o o o o o o ## 5 x x x o x o o o o o o o o ## 6 x x x x x o o o o o o o o print(m1$eacf, digits = 2) ## [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] ## [1,] -0.056 -0.0380 -0.082 -0.0046 0.01774 0.0821 0.0080 0.0127 -0.03014 ## [2,] -0.474 0.0096 -0.074 -0.0209 0.00196 0.0772 -0.0288 0.0026 -0.00683 ## [3,] -0.383 -0.3476 -0.074 0.0160 -0.00553 0.0772 0.0269 0.0120 0.00045 ## [4,] -0.177 0.1381 0.384 -0.0224 0.00232 0.0419 -0.0232 0.0154 -0.00440 ## [5,] 0.421 0.0287 0.454 -0.0079 0.00071 0.0025 -0.0140 0.0305 0.01159 ## [6,] -0.114 0.2135 0.449 0.0096 0.20242 -0.0063 -0.0038 0.0403 -0.01294 ## [7,] -0.208 -0.2504 0.243 0.3111 0.16745 -0.0388 -0.0034 0.0429 -0.01009 ## [,10] [,11] [,12] [,13] ## [1,] -0.0778 0.0488 0.0909 -0.011 ## [2,] -0.0694 0.0372 0.0938 -0.024 ## [3,] -0.0268 0.0221 0.0428 0.042 ## [4,] -0.0254 0.0185 0.0100 0.043 ## [5,] 0.0042 0.0191 -0.0043 0.013 ## [6,] -0.0123 0.0315 0.0117 0.028 ## [7,] -0.0260 0.0078 0.0106 0.037 # --&gt; ARMA(0, 0)モデル "],["arimaモデルsarimaモデル.html", "4 ARIMAモデル/SARIMAモデル 4.1 ARIMA\\((p,d,q)\\)モデルとは 4.2 SARIMA\\((p,d,q)\\times (P,D,Q)_s\\)モデル (周期\\(s\\))とは 4.3 SARIMAモデルのパス発生 ({sarima}パッケージの利用) 4.4 SARIMAモデルの推定・診断 4.5 パッケージ{forecast}の利用", " 4 ARIMAモデル/SARIMAモデル 4.1 ARIMA\\((p,d,q)\\)モデルとは \\(Y_t:=(1-B)^d X_t\\)が, causal ARMA\\((p,q)\\)となる確率過程\\(X_t\\) (\\(d\\)は非負整数), すなわち, \\[ \\phi(B)Y_t = \\theta(B) Z_t \\tag{2}\\] Backward shift operator \\(B\\) AR多項式 \\(\\phi(z)=1 - \\phi_1 z - \\cdots - \\phi_p z^p\\) MA多項式 \\(\\theta(z)=1 + \\theta_1 z + \\cdots + \\theta_q z^q\\) 4.2 SARIMA\\((p,d,q)\\times (P,D,Q)_s\\)モデル (周期\\(s\\))とは \\(Y_t:=(1-B)^d (1-B^s)^D X_t\\)が, 以下で定義されるcausal ARMAとなる確率過程\\(X_t\\) (\\(d,D\\)は非負整数) \\[ \\phi(B)\\Phi(B^s) Y_t = \\theta(B) \\Theta(B^s) Z_t \\tag{2}\\] Backward shift operator \\(B\\) AR多項式 \\(\\phi(z)=1 - \\phi_1 z - \\cdots - \\phi_p z^p\\) MA多項式 \\(\\theta(z)=1 + \\theta_1 z + \\cdots + \\theta_q z^q\\) SAR多項式 \\(\\Phi(z)=1 - \\Phi_1 z - \\cdots - \\Phi_p z^P\\) SMA多項式 \\(\\Theta(z)=1 + \\Theta_1 z + \\cdots + \\Theta_q z^Q\\) 4.3 SARIMAモデルのパス発生 ({sarima}パッケージの利用) “SAR(1)”モデル (s=12) require(sarima) ## Loading required package: sarima ## Loading required package: stats4 ## ## Attaching package: &#39;sarima&#39; ## The following object is masked from &#39;package:stats&#39;: ## ## spectrum #par(mfrow=c(3,1)) Seedv = 10 Tlen = 144 set.seed(Seedv) #x &lt;- sim_sarima(n = 144, model = list(ar = c(rep(0,11), 0.8))) # 12 seasons x &lt;- sim_sarima(n = 144, model = list(sar = 0.8, nseasons = 12, sigma2 = 1)) # 12 seasons ts.plot(x, type = &quot;l&quot;) # 時系列プロット par(mfrow = c(1,2)) acf(x) # 自己相関(ACF) pacf(x) # 偏自己相関(PACF) “SMA(1)”モデル set.seed(Seedv) #x &lt;- sim_sarima(n = 144, model = list(ma = c(rep(0,11), 0.8))) # 12 seasons x &lt;- sim_sarima(n = 144,model = list(sma = 0.8, nseasons = 12, sigma2 = 1)) # 12 seasons ts.plot(x, type = &quot;l&quot;) # 時系列プロット par(mfrow = c(1,2)) acf(x) # 自己相関(ACF) pacf(x) # 偏自己相関(PACF) I(1) モデル (“Random Walk”) set.seed(Seedv) x &lt;- sim_sarima(n = 144, model = list(iorder = 1, sigma2 = 1)) # (1-B)X_t = e_t (random walk) ts.plot(x, type=&quot;l&quot;) # 時系列プロット par(mfrow = c(1,2)) acf(x) # 自己相関(ACF) pacf(x) # 偏自己相関(PACF) SARIMA\\((0,0,0) \\times (0,1,0)_{12}\\) set.seed(Seedv) x &lt;- sim_sarima(n = 144, model = list(siorder = 1,nseasons = 12, sigma2 = 1)) # (1-B)^{12} X_t = e_t ts.plot(x, type=&quot;l&quot;) # 時系列プロット par(mfrow = c(1,2)) acf(x) # 自己相関(ACF) pacf(x) # 偏自己相関(PACF) SARIMA\\((0,1,0) \\times (0,1,0)_{12}\\) set.seed(Seedv) x &lt;- sim_sarima(n = 144, model = list(iorder = 1, siorder = 1, nseasons = 12, sigma2 = 1)) ts.plot(x, type = &quot;l&quot;) # 時系列プロット par(mfrow = c(1,2)) acf(x) # 自己相関(ACF) pacf(x) # 偏自己相関(PACF) SARIMA\\((0,1,0) \\times (0,1,0)_{12}\\)に, 初期値xを指定したシミュレーション x &lt;- sim_sarima(n = 144, model = list(iorder = 1, siorder = 1, nseasons = 12, sigma2 = 1), x = list(init=AirPassengers[1:13])) ts.plot(x, type = &quot;l&quot;) # 時系列プロット par(mfrow = c(1,2)) acf(x) # 自己相関(ACF) pacf(x) # 偏自己相関(PACF) SARIMA\\((0,0,0) \\times (1,0,1)_{12}\\) set.seed(Seedv) x &lt;- sim_sarima(n = 144, model = list(sar = 0.4, sma = 0.5, iorder = 0, siorder = 0, nseasons = 12)) ts.plot(x, type = &quot;l&quot;) # 時系列プロット par(mfrow = c(1,2)) acf(x) # 自己相関(ACF) pacf(x) # 偏自己相関(PACF) SARIMA\\((0,0,1) \\times (1,0,1)_{12}\\) set.seed(Seedv) x &lt;- sim_sarima(n = 144, model = list(ma = 0.7, sar = 0.4, sma = 0.5, iorder = 0, siorder = 0, nseasons = 12)) ts.plot(x, type = &quot;l&quot;) # 時系列プロット par(mfrow = c(1,2)) acf(x) # 自己相関(ACF) pacf(x) # 偏自己相関(PACF) SARIMA\\((2,1,1) \\times (1,1,1)_{12}\\) set.seed(Seedv) x &lt;- sim_sarima(n = 144, model = list(ar = c(1.2, -0.8), ma = 0.4, sar = 0.3, sma = 0.7, iorder = 1, siorder = 1, nseasons = 12)) ts.plot(x, type = &quot;l&quot;) # 時系列プロット par(mfrow = c(1,2)) acf(x) # 自己相関(ACF) pacf(x) # 偏自己相関(PACF) 4.4 SARIMAモデルの推定・診断 arima関数は, SARIMAモデルの推定が可能 (一方, arima.sim関数はSARIMAモデルのパスを生成できない) 仮に\\((p,d,q)=(2,1,1), (P,D,Q)=(1,1,1), s=12\\)を正しく選んだとすると, (x.fit = arima(x, order = c(2,1,1), seasonal = list(order = c(1,1,1), period = 12))) ## ## Call: ## arima(x = x, order = c(2, 1, 1), seasonal = list(order = c(1, 1, 1), period = 12)) ## ## Coefficients: ## ar1 ar2 ma1 sar1 sma1 ## 1.2462 -0.8486 0.3504 0.2220 1.0000 ## s.e. 0.0589 0.0558 0.0842 0.0909 0.2598 ## ## sigma^2 estimated as 0.7217: log likelihood = -183.18, aic = 378.35 tsdiag(x.fit, gof = 20) # モデル診断 Box.test(x.fit$residuals,lag = 20,type = &#39;Ljung&#39;) # Ljung-Box検定 ## ## Box-Ljung test ## ## data: x.fit$residuals ## X-squared = 12.586, df = 20, p-value = 0.8944 ※ ARIMAモデル指定の場合には, 定数項パラメータは推定されない (include.meanオプションは無視される) 4.5 パッケージ{forecast}の利用 モデルの自動選択・推定 forecast::auto.arima関数は, seasonalオプションによりSARIMAモデルを推定可能 (デフォルトは, seasonal = T) require(forecast) ## Loading required package: forecast ## Registered S3 method overwritten by &#39;quantmod&#39;: ## method from ## as.zoo.data.frame zoo (x.fit3 = auto.arima(x)) # AIC/AICc(デフォルト)/BICによりモデルを自動選択&amp;推定 ## Series: x ## ARIMA(4,1,1) with drift ## ## Coefficients: ## ar1 ar2 ar3 ar4 ma1 drift ## 2.2193 -2.3467 1.3199 -0.4084 -0.7300 -3.0955 ## s.e. 0.0898 0.1786 0.1721 0.0780 0.0598 0.4031 ## ## sigma^2 = 14.72: log likelihood = -393.94 ## AIC=801.88 AICc=802.71 BIC=822.62 → モデルは正しく推定はされてはいない. 定数項は大きな値 tsdiag(x.fit3, gof = 20) # モデル診断 Box.test(x.fit3$residuals, lag = 20, type = &#39;Ljung&#39;) # Ljung-Box検定 ## ## Box-Ljung test ## ## data: x.fit3$residuals ## X-squared = 145.11, df = 20, p-value &lt; 2.2e-16 → 季節性も残留 推定モデルを使った予測 (x.pred = forecast(x.fit3, h = 20)) ## Point Forecast Lo 80 Hi 80 Lo 95 Hi 95 ## 145 -436.1359 -441.0524 -431.2195 -443.6550 -428.6169 ## 146 -445.6132 -458.8023 -432.4240 -465.7842 -425.4421 ## 147 -452.7936 -474.2717 -431.3155 -485.6416 -419.9457 ## 148 -455.4497 -482.6672 -428.2321 -497.0753 -413.8240 ## 149 -454.4453 -484.5206 -424.3700 -500.4415 -408.4491 ## 150 -452.2585 -483.3464 -421.1706 -499.8034 -404.7136 ## 151 -451.0034 -482.3361 -419.6708 -498.9226 -403.0843 ## 152 -451.6076 -482.9808 -420.2343 -499.5887 -403.6264 ## 153 -454.0855 -485.4704 -422.7006 -502.0846 -406.0864 ## 154 -458.0720 -489.4894 -426.6545 -506.1208 -410.0231 ## 155 -463.0825 -494.6429 -431.5221 -511.3499 -414.8151 ## 156 -468.5396 -500.5108 -436.5684 -517.4353 -419.6439 ## 157 -473.8106 -506.5744 -441.0469 -523.9185 -423.7028 ## 158 -478.3561 -512.2327 -444.4796 -530.1658 -426.5464 ## 159 -481.8994 -516.9893 -446.8096 -535.5647 -428.2341 ## 160 -484.4929 -520.6666 -448.3192 -539.8159 -429.1700 ## 161 -486.4490 -523.4555 -449.4425 -543.0455 -429.8524 ## 162 -488.1924 -525.7803 -450.6045 -545.6781 -430.7066 ## 163 -490.1157 -528.1020 -452.1293 -548.2108 -432.0206 ## 164 -492.4836 -530.7678 -454.1994 -551.0343 -433.9330 plot(x.pred) # 参考. 任意トレンドを加えてのシミュレーション (xinterceptオプション使用) set.seed(Seedv) x = sim_sarima(n = 144, model = list(sma = 0.4, ma = 0.4, sar = 0.8, ar = 0.5, nseasons = 12, sigma2 = 1), xintercept = (1:144) * 0.05) ts.plot(x, type = &quot;l&quot;) # 時系列プロット par(mfrow = c(1,2)) acf(x) # 自己相関(ACF) pacf(x) # 偏自己相関(PACF) モデル次数, 線形トレンドを正しく指定した場合のarimaによる推定 (x.fit = arima(x,order = c(1,0,1), seasonal = list(order = c(1,0,1), period = 12), xreg = 1:144)) ## ## Call: ## arima(x = x, order = c(1, 0, 1), seasonal = list(order = c(1, 0, 1), period = 12), ## xreg = 1:144) ## ## Coefficients: ## ar1 ma1 sar1 sma1 intercept 1:144 ## 0.7606 0.1744 0.7531 0.6228 -5.2907 0.3521 ## s.e. 0.0656 0.1134 0.0576 0.0957 3.0592 0.0310 ## ## sigma^2 estimated as 0.9208: log likelihood = -211.59, aic = 437.19 tsdiag(x.fit, gof = 20) # モデル診断 Box.test(x.fit$residuals, lag = 20, type = &#39;Ljung&#39;) # Ljung-Box検定 ## ## Box-Ljung test ## ## data: x.fit$residuals ## X-squared = 11.261, df = 20, p-value = 0.9392 線形トレンドを正しく指定した場合のauto.arimaによる推定 require(forecast) (x.fit3 = auto.arima(x, xreg = 1:144)) # AIC/AICc(デフォルト)/BICによりモデルを自動選択&amp;推定 ## Series: x ## Regression with ARIMA(1,0,0) errors ## ## Coefficients: ## ar1 intercept xreg ## 0.8291 -8.3410 0.3737 ## s.e. 0.0485 1.9888 0.0233 ## ## sigma^2 = 4.862: log likelihood = -317.26 ## AIC=642.53 AICc=642.81 BIC=654.41 "],["単位根過程と単位根検定.html", "5 単位根過程と単位根検定 5.1 単位根過程と見せかけの回帰 5.2 主な単位根検定法", " 5 単位根過程と単位根検定 5.1 単位根過程と見せかけの回帰 5.1.1 単位根過程 ランダムウォークモデル (I(1))のパス生成 #require(sarima) Tlen &lt;- 100 Seedv &lt;- 1 # set.seed(Seedv) #x &lt;- sim_sarima(n = Tlen, model = list(iorder = 1, sigma2 = 1)) # (1-B)X_t = e_t (random walk) #y &lt;- sim_sarima(n = Tlen, model = list(iorder = 1, sigma2 = 1)) x &lt;- arima.sim(n = Tlen, list(order = c(0, 1, 0))) y &lt;- arima.sim(n = Tlen, list(order = c(0, 1, 0))) # #par(mfrow=c(1,2)) #acf(x) # 自己相関(ACF) #pacf(x) # 偏自己相関(PACF) #matplot(cbind(x, y), type = &quot;l&quot;) ts.plot(cbind(x, y), lty = 1:2) 5.1.2 見せかけの回帰 reslm &lt;- lm(y ~ x) summary(reslm) ## ## Call: ## lm(formula = y ~ x) ## ## Residuals: ## Min 1Q Median 3Q Max ## -9.049 -2.862 1.383 3.172 5.519 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 0.42205 0.68668 0.615 0.54 ## x -0.51303 0.09909 -5.178 1.18e-06 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 3.752 on 99 degrees of freedom ## Multiple R-squared: 0.2131, Adjusted R-squared: 0.2051 ## F-statistic: 26.81 on 1 and 99 DF, p-value: 1.182e-06 plot(x, y) plot(as.numeric(x), as.numeric(y)) abline(reslm) 5.1.3 見せかけの回帰の判定 library(lmtest) ## Loading required package: zoo ## ## Attaching package: &#39;zoo&#39; ## The following objects are masked from &#39;package:base&#39;: ## ## as.Date, as.Date.numeric dwtest(reslm) ## ## Durbin-Watson test ## ## data: reslm ## DW = 0.080227, p-value &lt; 2.2e-16 ## alternative hypothesis: true autocorrelation is greater than 0 Durbin-Watson検定 (簡便法) 回帰残差の系列相関の有無を検定 \\(DW \\approx 2(1-\\rho)\\) \\(0&lt;DW&lt;4\\). 無相関 \\(\\Leftrightarrow DW=2\\) 見せかけの回帰の場合. DWが小さい傾向 (正の系列相関) 代替法: Engle-Granger検定 「見せかけの回帰」については後日扱う 5.2 主な単位根検定法 ADF検定: tseries内, adf.test(); fUnitRoots内, unitrootTest(), adfTest() Phillips-Perron(PP)検定: urca内, ur.pp(); tseries内, pp.test() PP検定は, 沖本, pp.118–120参照 KPSS検定: urca内, ur.kpss(); tseries内, kpss.test() KPSS検定は, 福地・伊藤, pp.139–140参照 5.2.1 Augmented Dicky-Fuller (ADF) 検定の実行例 fUnitRootsパッケージ内, unitrootTest()使用 adfTest(): Banerjee&#39;s et al.(93)による検定統計量の計算 unitrootTest(): McKinnons(96) のアプローチによる検定統計量の計算 - type: &quot;nc&quot;(定数項・時間トレンド項共なし), &quot;c&quot;(定数項のみ有), &quot;ct&quot;(定数項・時間トレンド項共有) - lags: 誤差項の持つ最大ラグ数 上記シミュレーションデータに対して, ADF検定を実行 library(fUnitRoots) adfTest(x, type = &quot;nc&quot;, lags = 1) ## ## Title: ## Augmented Dickey-Fuller Test ## ## Test Results: ## PARAMETER: ## Lag Order: 1 ## STATISTIC: ## Dickey-Fuller: 0.282 ## P VALUE: ## 0.703 ## ## Description: ## Thu Dec 21 22:47:08 2023 by user: unitrootTest(x, type = &quot;nc&quot;, lags = 1) ## ## Title: ## Augmented Dickey-Fuller Test ## ## Test Results: ## PARAMETER: ## Lag Order: 1 ## STATISTIC: ## DF: 0.282 ## P VALUE: ## t: 0.7657 ## n: 0.7506 ## ## Description: ## Thu Dec 21 22:47:08 2023 by user: 二つの関数の結果を比較せよ. adfTest(y, type = &quot;nc&quot;, lags = 1) ## ## Title: ## Augmented Dickey-Fuller Test ## ## Test Results: ## PARAMETER: ## Lag Order: 1 ## STATISTIC: ## Dickey-Fuller: -0.7206 ## P VALUE: ## 0.3835 ## ## Description: ## Thu Dec 21 22:47:08 2023 by user: unitrootTest(y, type = &quot;nc&quot;, lags = 1) ## ## Title: ## Augmented Dickey-Fuller Test ## ## Test Results: ## PARAMETER: ## Lag Order: 1 ## STATISTIC: ## DF: -0.7206 ## P VALUE: ## t: 0.4021 ## n: 0.522 ## ## Description: ## Thu Dec 21 22:47:08 2023 by user: → いずれも, 帰無仮説(phi_1=1)を棄却せず(単位根有り) adfTest(x, type = &quot;c&quot;, lags = 1) ## ## Title: ## Augmented Dickey-Fuller Test ## ## Test Results: ## PARAMETER: ## Lag Order: 1 ## STATISTIC: ## Dickey-Fuller: -1.4551 ## P VALUE: ## 0.5166 ## ## Description: ## Thu Dec 21 22:47:08 2023 by user: #unitrootTest(x, type = &quot;c&quot;, lags = 1) adfTest(y, type = &quot;c&quot;, lags = 1) ## ## Title: ## Augmented Dickey-Fuller Test ## ## Test Results: ## PARAMETER: ## Lag Order: 1 ## STATISTIC: ## Dickey-Fuller: -1.0635 ## P VALUE: ## 0.6617 ## ## Description: ## Thu Dec 21 22:47:08 2023 by user: #unitrootTest(y, type = &quot;c&quot;, lags = 1) adfTest(x, type = &quot;c&quot;, lags = 1) ## ## Title: ## Augmented Dickey-Fuller Test ## ## Test Results: ## PARAMETER: ## Lag Order: 1 ## STATISTIC: ## Dickey-Fuller: -1.4551 ## P VALUE: ## 0.5166 ## ## Description: ## Thu Dec 21 22:47:08 2023 by user: #unitrootTest(x, type = &quot;ct&quot;, lags = 1) adfTest(y, type = &quot;c&quot;, lags = 1) ## ## Title: ## Augmented Dickey-Fuller Test ## ## Test Results: ## PARAMETER: ## Lag Order: 1 ## STATISTIC: ## Dickey-Fuller: -1.0635 ## P VALUE: ## 0.6617 ## ## Description: ## Thu Dec 21 22:47:08 2023 by user: #unitrootTest(y, type = &quot;ct&quot;, lags = 1) 株価データ(quantmodパッケージにより取得) tseriesパッケージ内, adf.test()使用 adf.test(x, alternative = c(&quot;stationary&quot;, &quot;explosive&quot;), k = trunc((length(x)-1)^(1/3))) - k: number of lags in the regression. - default: trunc((length(x)-1)^(1/3)): the suggested upper bound on the rate - (to grow with the sample size for the general ARMA(p,q) setup) - alternative: &quot;stationary&quot;(デフォルト) or &quot;explosive&quot; # 対立仮説の指定 library(&#39;quantmod&#39;) ## Loading required package: xts ## Loading required package: TTR ## Registered S3 method overwritten by &#39;quantmod&#39;: ## method from ## as.zoo.data.frame zoo yj8411 &lt;- getSymbols(&#39;8411.T&#39;,from = &#39;2020-10-01&#39;, to = &#39;2023-09-29&#39;, src = &quot;yahoo&quot;, auto.assign = FALSE) # 注) R/RStudioや, guantmodのバージョンによっては, 動かないことがある p8411 &lt;- Ad(yj8411) # 調整後株価 #lnp8411 &lt;- log(Ad(yj8411)) # 同対数値 (← 期間が長い場合など) # plot(p8411) #plot(lnp8411) acf(p8411) pacf(p8411) #acf(diff(p8411), na.action = na.omit) #pacf(diff(p8411),na.action = na.omit) 株価データに対してADF検定を実行 # ADF検定 (Augmentd Dicky-Fuller test) # (H0: x has unit root) library(tseries) adf.test(p8411) adf.test(p8411, k = 1) # adfTest(p8411, type =&quot;ct&quot;, lags = 1) # → 同一の結果 # adf.test(p8411, k = 1, alternative = &quot;explosive&quot;) # &lt;-- H0 と H1を入替 (→ 同一のDF値. 上行のp値 = 1-下行のp値) ## ## Augmented Dickey-Fuller Test ## ## data: p8411 ## Dickey-Fuller = -0.72097, Lag order = 9, p-value = 0.9687 ## alternative hypothesis: stationary ## ## ## Augmented Dickey-Fuller Test ## ## data: p8411 ## Dickey-Fuller = -0.88565, Lag order = 1, p-value = 0.954 ## alternative hypothesis: stationary ## ## ## Title: ## Augmented Dickey-Fuller Test ## ## Test Results: ## PARAMETER: ## Lag Order: 1 ## STATISTIC: ## Dickey-Fuller: -0.8856 ## P VALUE: ## 0.954 ## ## Description: ## Thu Dec 21 22:47:09 2023 by user: ## ## ## Augmented Dickey-Fuller Test ## ## data: p8411 ## Dickey-Fuller = -0.88565, Lag order = 1, p-value = 0.04604 ## alternative hypothesis: explosive 5.2.2 ADF検定以外の検定法 Phillips-Perron検定の実行例 #library(tseries) pp.test(p8411, type = &quot;Z(alpha)&quot;, lshort = T) # デフォルト ## ## Phillips-Perron Unit Root Test ## ## data: p8411 ## Dickey-Fuller Z(alpha) = -3.5464, Truncation lag parameter = 6, p-value ## = 0.9096 ## alternative hypothesis: stationary pp.test(p8411, type = &quot;Z(alpha)&quot;, lshort = F) ## ## Phillips-Perron Unit Root Test ## ## data: p8411 ## Dickey-Fuller Z(alpha) = -2.4057, Truncation lag parameter = 19, ## p-value = 0.957 ## alternative hypothesis: stationary pp.test(p8411, type = &quot;Z(t_alpha)&quot;) ## ## Phillips-Perron Unit Root Test ## ## data: p8411 ## Dickey-Fuller Z(t_alpha) = -0.93464, Truncation lag parameter = 6, ## p-value = 0.9493 ## alternative hypothesis: stationary #pp.test(p8411, alternative = &quot;explosive&quot;) library(urca) ## ## Attaching package: &#39;urca&#39; ## The following objects are masked from &#39;package:fUnitRoots&#39;: ## ## punitroot, qunitroot, unitrootTable #lags: ラグの長さの指定. 4(T/100)^(1/4) or 12(T/100)^(1/4) #model: トレンドを持つ(&quot;trend&quot;), 定数項を持つ(&quot;constant&quot;) ur.pp(p8411, type = &quot;Z-alpha&quot;, model = &quot;trend&quot;, lags = &quot;short&quot;) ## ## ################################################## ## # Phillips-Perron Unit Root / Cointegration Test # ## ################################################## ## ## The value of the test statistic is: -3.5414 ur.pp(p8411, type = &quot;Z-alpha&quot;, model = &quot;trend&quot;, lags = &quot;long&quot;) ## ## ################################################## ## # Phillips-Perron Unit Root / Cointegration Test # ## ################################################## ## ## The value of the test statistic is: -2.4118 ur.pp(p8411, type = &quot;Z-tau&quot;, model = &quot;trend&quot;, lags = &quot;long&quot;) ## ## ################################################## ## # Phillips-Perron Unit Root / Cointegration Test # ## ################################################## ## ## The value of the test statistic is: -0.6917 ur.pp(p8411, type = &quot;Z-tau&quot;, model = &quot;constant&quot;) ## ## ################################################## ## # Phillips-Perron Unit Root / Cointegration Test # ## ################################################## ## ## The value of the test statistic is: 0.8101 KPSS検定の実行例 ur.kpss(p8411, type = &quot;mu&quot;, lags = &quot;long&quot;) ## ## ####################################### ## # KPSS Unit Root / Cointegration Test # ## ####################################### ## ## The value of the test statistic is: 2.9445 ur.kpss(p8411, type = &quot;tau&quot;, lags = &quot;long&quot;) ## ## ####################################### ## # KPSS Unit Root / Cointegration Test # ## ####################################### ## ## The value of the test statistic is: 0.6989 "],["長期記憶過程.html", "6 長期記憶過程 6.1 ARFIMA(p,d,q)過程のシミュレーション 6.2 ARFIMA, fractional Gaussian過程のシミュレーション 6.3 Hurst指数の推定 6.4 ARFIMAモデルの推定 6.5 ARFIMAモデル: データ分析例 (Tsay, 2.11, pp.119–120)", " 6 長期記憶過程 6.1 ARFIMA(p,d,q)過程のシミュレーション fracdiffパッケージの利用 サンプルパス生成(1): p = 2, d = 0.49, q = 0 簡単のため, MA項入れず Tlen = 300 Seedv = 100; set.seed(Seedv) library(fracdiff) fds_sim &lt;- fracdiff.sim(Tlen, ar = c(0.7, -0.2), d = 0.49) # -0.5&lt;=d&lt;=0.5 x &lt;- fds_sim$series # 長期記憶系列 plot(x, type = &quot;l&quot;) par(mfrow = c(1, 2)) acf(x) # 自己相関(ACF) pacf(x) # 偏自己相関(PACF) サンプルパス生成(2): p = 2, d = 0.1, q = 0 set.seed(Seedv) fds_sim &lt;- fracdiff.sim(Tlen, ar = c(0.7, -0.2), d = 0.1) x &lt;- fds_sim$series # 長期記憶系列 plot(x, type = &quot;l&quot;) par(mfrow = c(1, 2)) acf(x) # 自己相関(ACF) pacf(x) # 偏自己相関(PACF) サンプルパス生成(3): p = 2, d = -0.49, q = 0 set.seed(Seedv) fds_sim &lt;- fracdiff.sim(Tlen, ar = c(0.7, -0.2), d = -0.49) x &lt;- fds_sim$series # 長期記憶系列 plot(x, type = &quot;l&quot;) par(mfrow = c(1, 2)) acf(x) # 自己相関(ACF) pacf(x) # 偏自己相関(PACF) 6.2 ARFIMA, fractional Gaussian過程のシミュレーション longmemoパッケージの利用 - ckARMA0(n, H) - Compute the Autocovariances of a fractional ARIMA(0,d,0) process (d = H - 1/2). - The theoretical formula, C(k) = (-1)^k Γ(1-2d) / (Γ(k+1-d) Γ(1-k-d)) , where d = H - 1/2, leads to over-/underflow for larger lags k; hence use the asymptotical formula there. - ckFGN0(n, H) - Compute the Autocovariances of a fractional Gaussian process ########################################################### #install.packages(&quot;longmemo&quot;) library(longmemo) #data(&quot;NileMin&quot;) # Nile River Minima, yearly 622-1284 #nile &lt;- NileMin Seedv &lt;- 1 Tlen &lt;- 100; Hval &lt;- 0.9 plot(ckARMA0(Tlen, H = Hval), type = &quot;h&quot;) # H &gt; 0.5の時のみ plot(x = 0:(Tlen-1), ckARMA0(Tlen, H = Hval), type = &quot;h&quot;, log = &quot;xy&quot;, main = paste0(&quot;Log-Log ACF for ARFIMA(0,d,0) with H = &quot;, Hval)) # ckFGN0(n, H) # Compute the Autocovariances of a fractional Gaussian process plot(ckFGN0(Tlen, H = Hval), type = &quot;h&quot;) # (H &gt; 0.5の時のみ) plot(x = 0:(Tlen-1), ckFGN0(Tlen, H = Hval), type = &quot;h&quot;, log = &quot;xy&quot;, main = paste0(&quot;Log-Log ACF for frac. Gauss. Noise(H = &quot;, Hval, &quot;)&quot;)) - simGauss: implements the method by Davies and Harte which is relatively fast using the FFT (fft) twice. - To simulate ARIMA(p, d, q), (for d in (-1/2, 1,2), you can use arima.sim(n, model = list(ar= .., ma = ..), innov= simARMA0(n,H=d+1/2) , n.start = 0). - simFGN.fft() is about twice as fast as simFGN0() and uses Paxson&#39;s proposal, by default via B.specFGN(*, k.approx = 3, adjust = TRUE). Seedv &lt;- 1 set.seed(Seedv) x1 &lt;- simFGN0(Tlen, H = Hval) x2 &lt;- simARMA0(Tlen, H = Hval) ts.plot(ts.union(x1, x2), col = 1:2, lty = 1:2, main = paste0(&quot;frac. Gauss. Noise vs ARFIMA(0,d,0): H = &quot;, Hval)) #ts.plot(cbind(x1, x2), col = 1:2, lty = 1:2) fBM_path &lt;- function(tlen = 100, H = 0.5, sd_val = 1) { set.seed(sd_val) cumsum(simFGN0(tlen, H)) } # plot(fBM_path(Tlen, Hval, Seedv), type = &quot;l&quot;) # 異なるHの値でのサンプルパスの比較 hvals &lt;- c(0.5, 0.1, 0.8) fBM1 &lt;- fBM_path(Tlen, hvals[1], Seedv) fBM2 &lt;- fBM_path(Tlen, hvals[2], Seedv) fBM3 &lt;- fBM_path(Tlen, hvals[3], Seedv) ts.plot(cbind(fBM1, fBM2, fBM3), col = c(&quot;black&quot;, &quot;blue&quot;, &quot;red&quot;), lty = 1, lwd = c(1, 3, 3), main = paste0(&quot;frac. Brownian Motions: H = &quot;, paste(hvals, collapse = &quot;,&quot;))) 6.3 Hurst指数の推定 pracmaパッケージの利用 - hurstexp: R/S分析によるHurst指数推定 - 出力: - Hs - simplified R over S approach - Hrs - corrected R over S Hurst exponent - He - empirical Hurst exponent - Hal - corrected empirical Hurst exponent - Ht - theoretical Hurst exponent library(pracma) data(brown72) x72 &lt;- brown72 # H = 0.72 xgn &lt;- rnorm(1024) # H = 0.50 xlm &lt;- numeric(1024); xlm[1] &lt;- 0.1 # H = 0.43 for (i in 2:1024) xlm[i] &lt;- 4 * xlm[i-1] * (1 - xlm[i-1]) plot(x72, type = &quot;l&quot;) plot(xgn, type = &quot;l&quot;) plot(xlm, type = &quot;l&quot;) hurstexp(brown72) # d: smallest box size (default = 50) ## Simple R/S Hurst estimation: 0.6628842 ## Corrected R over S Hurst exponent: 0.7378703 ## Empirical Hurst exponent: 0.6920439 ## Corrected empirical Hurst exponent: 0.6577233 ## Theoretical Hurst exponent: 0.5404756 hurstexp(xgn) ## Simple R/S Hurst estimation: 0.4784489 ## Corrected R over S Hurst exponent: 0.4898617 ## Empirical Hurst exponent: 0.5041802 ## Corrected empirical Hurst exponent: 0.4636032 ## Theoretical Hurst exponent: 0.5404756 hurstexp(xlm) ## Simple R/S Hurst estimation: 0.4762169 ## Corrected R over S Hurst exponent: 0.4722421 ## Empirical Hurst exponent: 0.4872281 ## Corrected empirical Hurst exponent: 0.4460807 ## Theoretical Hurst exponent: 0.5404756 fractalパッケージの利用 library(fractal) x &lt;- x72 hurstSpec(x) RoverS(x) hurstBlock(x, method=&quot;aggAbs&quot;) hurstBlock(x, method=&quot;aggVar&quot;) hurstBlock(x, method=&quot;diffvar&quot;) hurstBlock(x, method=&quot;higuchi&quot;) 6.4 ARFIMAモデルの推定 6.4.1 最尤法 誤ってARモデルを選択した場合 set.seed(Seedv) fds_sim &lt;- fracdiff.sim(Tlen, ar = c(0.7, -0.2), d = -0.49) x &lt;- fds_sim$series # 長期記憶系列 # (ar_fit &lt;- ar(x, method = &quot;mle&quot;)) ## ## Call: ## ar(x = x, method = &quot;mle&quot;) ## ## Coefficients: ## 1 2 3 4 5 6 ## 0.2060 -0.2321 -0.2082 -0.1717 -0.1534 -0.1875 ## ## Order selected 6 sigma^2 estimated as 0.7814 → 大きい\\(p\\)を選択 AR係数, MA係数, 階差次数\\(d\\)を最尤推定 (以下, \\(p=2\\)を正しくしていたと仮定) # nar=p, nma=q # AR, MAパラメーター数 (fds_fit &lt;- fracdiff(x, nar = 2)) ## ## Call: ## fracdiff(x = x, nar = 2) ## ## Coefficients: ## d ar1 ar2 ## 4.583013e-05 3.478729e-01 -2.143891e-01 ## sigma[eps] = 0.9577181 ## a list with components: ## [1] &quot;log.likelihood&quot; &quot;n&quot; &quot;msg&quot; &quot;d&quot; ## [5] &quot;ar&quot; &quot;ma&quot; &quot;covariance.dpq&quot; &quot;fnormMin&quot; ## [9] &quot;sigma&quot; &quot;stderror.dpq&quot; &quot;correlation.dpq&quot; &quot;h&quot; ## [13] &quot;d.tol&quot; &quot;M&quot; &quot;hessian.dpq&quot; &quot;length.w&quot; ## [17] &quot;residuals&quot; &quot;fitted&quot; &quot;call&quot; → 通常は\\(p,q\\)は未知 → 複数のnar, nmaを試すべき nsarfimaパッケージの利用 library(nsarfima) # nar = p, nma = q # AR, MAパラメーター数 (arfima.fit &lt;- mle.arfima(x, p = 2)) ## $pars ## mu sig2 d ar.1 ar.2 ## -1.267263e-02 9.022758e-01 5.522776e-08 3.414323e-01 -2.625068e-01 ## ## $std.errs ## mu sig2 d ar.1 ar.2 ## 0.1016556 0.1395288 0.1733823 0.2163811 0.1612114 ## ## $cov.mat ## sig2 d ar.1 ar.2 ## sig2 0.019468294 0.00740705 -0.01170439 -0.004266261 ## d 0.007407050 0.03006142 -0.03229578 -0.021628130 ## ar.1 -0.011704389 -0.03229578 0.04682076 0.024479505 ## ar.2 -0.004266261 -0.02162813 0.02447951 0.025989126 ## ## $fit.obj ## $fit.obj$par ## d ar.1 ar.2 ## 5.522776e-08 3.414323e-01 -2.625068e-01 ## ## $fit.obj$value ## [1] 89.3253 ## ## $fit.obj$counts ## function gradient ## 208 NA ## ## $fit.obj$convergence ## [1] 0 ## ## $fit.obj$message ## NULL ## ## ## $p.val ## [1] 0.8912225 ## ## $residuals ## [1] -0.6764961052 -0.2968632520 -1.2310910722 1.4561378726 -0.0388534504 ## [6] -0.8423204011 0.4686722844 0.4643382756 0.4107973532 -0.4309650411 ## [11] 1.4299789135 -0.0006787575 -0.7857763053 -2.3890626204 1.1014635252 ## [16] -0.3966402031 0.1652482404 1.0616568645 0.7446050471 0.5154245086 ## [21] 0.7564241338 0.4668174692 -0.2693729499 -2.3064083881 0.5227350640 ## [26] -0.4642720829 -0.1309552624 -1.4100725427 -0.2774497899 0.4650877267 ## [31] 1.4649891568 -0.0290343810 0.5782727746 -0.1757284573 -1.4912805335 ## [36] -0.3789621380 -0.4655630075 0.0738483187 1.2914770769 0.8336925539 ## [41] -0.0737873115 -0.2251819617 0.5774490180 0.3286308280 -0.8047251630 ## [46] -0.6986673145 0.2958393665 0.6510135686 -0.1339248247 0.9675384987 ## [51] 0.2259759735 -0.7281405491 0.2716268869 -1.3784731074 1.4943394505 ## [56] 1.7164276897 -0.5272803532 -1.0201592423 0.3729804733 -0.5359889283 ## [61] 2.3350415888 -0.4086512940 0.6924717331 -0.3606512486 -1.0759283895 ## [66] -0.0506511539 -2.1101132511 1.5976097508 -0.1172982949 2.3325016401 ## [71] 0.2254993256 -0.8129057325 0.3788283790 -1.4331970583 -1.3747001462 ## [76] 0.2411732472 -0.5537230862 0.2049218798 0.2004499504 -0.4766722677 ## [81] -0.4042575452 -0.0270582246 1.2728679869 -1.5304518129 0.9624356049 ## [86] 0.2186716228 1.1235112273 -0.3688834767 0.4233844401 0.0726586865 ## [91] -0.6954346528 1.1689570269 0.8808727109 0.5369119812 1.3879840390 ## [96] 0.0879308998 -1.6719344153 -0.8630402713 -1.6381541198 -0.5431240556 モデル診断/残差チェック方法の例 時系列データ\\(x_t\\)と\\(d\\)の推定値(初期値)があるとする 推定された\\(d\\)が正しい値ならば, \\(Y_t=(1-B)^d X_t\\)はARMA過程になるはず \\(x_t\\)より, パス\\(y_t\\)を(近似的に)生成する (get_fracdiff_ts関数使用. 配布のRコード参照) ARMAモデルを生成パス\\(y_t\\)に適合する. 得られる残差系列が白色ノイズか? (納得いくまで) 候補を変えて試す. ここでは, AR(p)モデルに限定. 以下, 上で生成したパス\\(x_t\\), 得られた\\(d\\)の推定値をそのまま使用. 長期記憶過程xより非整数階差系列yを生成する関数 (以下で使用) # 参考: Cowpertwait and Metcalfe(2009), Ch.8 get_fracdiff_ts &lt;- function(x, d, L = 30){ # L: 項の打ち切り数 n &lt;- length(x) # fdc: (1-B)^dの2項展開係数ベクトルを生成 fdc &lt;- d fdc[1] &lt;- fdc for (k in 2:L) fdc[k] &lt;- fdc[k-1] * (d+1-k) / k # y, 非整数階差系列(fractionally differenced series)を生成 y &lt;- rep(0, L) for (i in (L+1):n) { csm &lt;- x[i] # x, 原系列（長期記憶過程) for (j in 1:L) csm &lt;- csm + ((-1)^j) * fdc[j] * x[i-j] y[i] &lt;- csm } y &lt;- y[(L+1):n] return(y) } y &lt;- get_fracdiff_ts(x, fds_fit$d) # {x_t}より非整数階差系列{y_t}を生成 (z.ar &lt;- ar(y)) # ARモデルをフィット ## ## Call: ## ar(x = y) ## ## Coefficients: ## 1 2 3 4 ## 0.2598 -0.0943 -0.1637 -0.2469 ## ## Order selected 4 sigma^2 estimated as 0.8692 ns &lt;- 1 + z.ar$order z &lt;- z.ar$res [ns:length(y)] # z.ar$resの最初のns個は欠損 par(mfcol = c(2, 2)) plot(as.ts(x), ylab = &quot;x&quot;) acf(x) ; acf(y) ; acf(z) Box.test(z, lag = 30, type = &quot;Ljung&quot;) ## ## Box-Ljung test ## ## data: z ## X-squared = 29.658, df = 30, p-value = 0.4833 6.4.2 階差次数\\(d\\)の代替的推定法 fracdiffパッケージ利用 Geweke and Porter-Hudak(83), Reisen(94) 時系列データのperidogram (スペクトル密度の推定値) ベース # library(fracdiff) # Geweke and Porter-Hudak(83)の方法 (d_GPH = fdGPH(x)) ## $d ## [1] -0.7167363 ## ## $sd.as ## [1] 0.2935592 ## ## $sd.reg ## [1] 0.2232167 # Reisen(94)の方法 (d_Sper = fdSperio(x)) ## $d ## [1] -0.6491031 ## ## $sd.as ## [1] 0.1334138 ## ## $sd.reg ## [1] 0.08329104 # GPH推定値の使用 y &lt;- get_fracdiff_ts(x, d_GPH$d) # {x_t}より非整数階差系列{y_t}を生成 # ARMAモデルの適合に, forecastパッケージのauto.arima関数使用 library(forecast) (y_fit &lt;- auto.arima(y)) # ARモデルをフィット ## Series: y ## ARIMA(0,0,3) with zero mean ## ## Coefficients: ## ma1 ma2 ma3 ## 0.8403 0.5521 0.2549 ## s.e. 0.1171 0.1411 0.1297 ## ## sigma^2 = 0.8098: log likelihood = -90.83 ## AIC=189.66 AICc=190.27 BIC=198.65 y_resid &lt;- y_fit$res par(mfcol = c(1, 2)) acf(y_resid); pacf(y_resid) Box.test(y_resid, lag = 30, type = &quot;Ljung&quot;) ## ## Box-Ljung test ## ## data: y_resid ## X-squared = 17.267, df = 30, p-value = 0.9692 よりフォーマルなモデル同定・推定の手順は, 配布資料参照. 6.5 ARFIMAモデル: データ分析例 (Tsay, 2.11, pp.119–120) データ&amp;コードの出所: https://sites.google.com/site/econometricsr/home/rcode コードは一部改 #library(fracdiff) ifl &lt;- file.path(dir_introTS, &quot;d-ibm3dx7008.txt&quot;) da = read.table(ifl, header = T) head(da) ## Date rtn vwretd ewretd sprtrn ## 1 19700102 0.000686 0.012137 0.033450 0.010211 ## 2 19700105 0.009596 0.006375 0.018947 0.004946 ## 3 19700106 0.000679 -0.007233 -0.005776 -0.006848 ## 4 19700107 0.000678 -0.001272 0.003559 -0.002047 ## 5 19700108 0.002034 0.000564 0.002890 0.000540 ## 6 19700109 -0.001353 -0.002797 -0.002923 -0.003021 ew = abs(da$vwretd) # daily abs ret&#39;s of value-weighted CRSP, 1970--2008 plot(as.ts(ew)) 次数dの推定 # pure fractionally differenced modelに対して(p=0, q=0) # Geweke-Porter-Hudak(83) estimate #(m3 = fdGPH(da$vwretd)) # d=0.05282 (m3 = fdGPH(ew)) ## $d ## [1] 0.372226 ## ## $sd.as ## [1] 0.0698385 ## ## $sd.reg ## [1] 0.06868857 → 0&lt;d&lt;0.5 ∴ stationary, invertible # Reisen (94) estimate # (m3.2 = fdSperio(ew)) # 0.3784656 # 最尤法 (nar, nmaの指定必要) #m3.0 = fracdiff(ew,nar = 0, nma = 0) # デフォルト: nar = 0, nma = 0 #summary(m3.0) # ARFIMA(1,d,1)の最尤推定 m2 = fracdiff(ew, nar = 1, nma = 1) summary(m2) ## ## Call: ## fracdiff(x = ew, nar = 1, nma = 1) ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## d 0.490938 0.007997 61.39 &lt;2e-16 *** ## ar 0.113389 0.005988 18.94 &lt;2e-16 *** ## ma 0.575895 0.005946 96.85 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## sigma[eps] = 0.0065619 ## [d.tol = 0.0001221, M = 100, h = 0.0003742] ## Log likelihood: 3.551e+04 ==&gt; AIC = -71021.02 [4 deg.freedom] coef(m2) ## d ar ma ## 0.4909382 0.1133893 0.5758949 confint(m2) ## 2.5 % 97.5 % ## d 0.4752637 0.5066127 ## ar 0.1016536 0.1251250 ## ma 0.5642407 0.5875491 注: MA係数の符号が, arima()の符号とは反対 Table 6.1: パラメータ推定値 2.5 % 97.5 % d 0.4909382 0.4752637 0.5066127 ar 0.1133893 0.1016536 0.1251250 ma 0.5758949 0.5642407 0.5875491 → dの値, 非定常境界(d=0.5)に近い set.seed(101) m2_sim &lt;- fracdiff.sim(512, ar = coef(m2)[&quot;ar&quot;], ma = - coef(m2)[&quot;ma&quot;], d = coef(m2)[&quot;d&quot;]) plot(as.ts(m2_sim$series)) hurstexp(ew) # ハースト指数 ## Simple R/S Hurst estimation: 0.7368679 ## Corrected R over S Hurst exponent: 0.8540535 ## Empirical Hurst exponent: 0.9058207 ## Corrected empirical Hurst exponent: 0.8784372 ## Theoretical Hurst exponent: 0.5264069 "],["レジームスイッチングモデル.html", "7 レジーム・スイッチング・モデル 7.1 自己相関マルコフ・スイッチング・モデル (MSM-AR) 7.2 MSM-ARモデルの適合", " 7 レジーム・スイッチング・モデル 7.1 自己相関マルコフ・スイッチング・モデル (MSM-AR) パッケージMSwM 出所: Jose A. Sanchez-Espigares and Alberto Lopez-Moreno (2018). “MSwM examples.” サンプルデータ (example): シミュレーションにより生成 \\[y_{t}=\\begin{cases} 8+2x_{t}+\\epsilon_{t}^{(1)} &amp; \\epsilon_{t}^{(1)}\\sim N(0,1),\\quad t=101:150,181:250\\\\ 1+0.9y_{t-1}+\\epsilon_{t}^{(2)} &amp; \\epsilon_{t}^{(2)}\\sim N(0,0.5),\\quad t=1:100,151:180,251:300 \\end{cases}\\] ここで, \\(x_t\\)は外生変数 (共変量). library(MSwM) data(example) #vignette(&quot;examples&quot;) # マニュアル参照 plot(ts(example)) mod &lt;- lm(y ~ x, example) summary(mod) ## ## Call: ## lm(formula = y ~ x, data = example) ## ## Residuals: ## Min 1Q Median 3Q Max ## -2.8998 -0.8429 -0.0427 0.7420 4.0337 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 9.0486 0.1398 64.709 &lt; 2e-16 *** ## x 0.8235 0.2423 3.398 0.00077 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 1.208 on 298 degrees of freedom ## Multiple R-squared: 0.03731, Adjusted R-squared: 0.03408 ## F-statistic: 11.55 on 1 and 298 DF, p-value: 0.0007701 par(mfrow = c(1, 2)) qqnorm(resid(mod)); qqline(resid(mod), col = 2); acf(resid(mod)) par(mfrow = c(1, 1)) plot(resid(mod), type = &quot;l&quot;); abline(v=c(100, 150, 180, 250), lty = &quot;dotted&quot;, col = &quot;red&quot;) → 単回帰係数は有意. が, 残差は正規分布から乖離&amp; 有意な自己相関が持続 7.2 MSM-ARモデルの適合 - 関数msmFit(): Fitting Markov Switching Models using the EM algorithm - msmFit(object, k, sw, p, data, family, control) - k: numeric, レジーム数 - sw: a logical vector, スイッチングする係数の指定 ← intercept, sigmaはベクトルの両端に配置 - p: integer, AR次数 (デフォルト値=0) - p&gt;0のケース → the last values of sw have to contain the AR coefficients which have switching - family: モデルのクラス (It is only required when the object is a &quot;General linear formula&quot;) 正しいレジーム数 (\\(k=2\\)), 正しいモデル構造を想定出来たものとして推定した場合: mod.mswm &lt;- msmFit(mod, k = 2, p = 1, sw = c(T, T, T, T), control = list(parallel = F)) summary(mod.mswm) ## Markov Switching Model ## ## Call: msmFit(object = mod, k = 2, sw = c(T, T, T, T), p = 1, control = list(parallel = F)) ## ## AIC BIC logLik ## 637.0736 693.479 -312.5368 ## ## Coefficients: ## ## Regime 1 ## --------- ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept)(S) 8.6393 0.7124 12.1270 &lt; 2.2e-16 *** ## x(S) 1.8771 0.3106 6.0435 1.508e-09 *** ## y_1(S) -0.0569 0.0783 -0.7267 0.4674 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.9339683 ## Multiple R-squared: 0.2408 ## ## Standardized Residuals: ## Min Q1 Med Q3 Max ## -2.31102193 -0.03317755 0.01034138 0.04509105 2.85245597 ## ## Regime 2 ## --------- ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept)(S) 0.8417 0.3018 2.7889 0.005289 ** ## x(S) -0.0533 0.1303 -0.4091 0.682466 ## y_1(S) 0.9208 0.0305 30.1902 &lt; 2.2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.5034675 ## Multiple R-squared: 0.8375 ## ## Standardized Residuals: ## Min Q1 Med Q3 Max ## -1.5153667280 -0.0906543210 0.0001873641 0.1656717257 1.2020898979 ## ## Transition probabilities: ## Regime 1 Regime 2 ## Regime 1 0.97709116 0.01500271 ## Regime 2 0.02290884 0.98499729 par(mfrow = c(1, 2)) qqnorm(mod.mswm@Fit@error[, 1]); qqline(mod.mswm@Fit@error[, 1], col = 2); qqnorm(mod.mswm@Fit@error[, 2]); qqline(mod.mswm@Fit@error[, 2],col = 2); plot(ts(mod.mswm@Fit@error)) → モデルは2つのレジームを良く検出: 共変量\\(x\\)が有意なレジーム, 1期前ラグ変数\\(y_{t-1}\\)が有意なレジームを推定. 状態推定確率の対角要素(同じレジームに留まる確率)は, いずれも約0.98 レジーム#1にある状態確率の推定値 (smoothed/ filtered probabilities) par(&quot;mar&quot; = c(1, 1, 1, 1)) plotProb(mod.mswm, which = 1) レジーム#2にある状態確率の推定値 (平滑化 (smoothed) 確率, フィルター化 (filtered) 確率) par(&quot;mar&quot; = c(1, 1, 1, 1)) plotProb(mod.mswm, which = 2) 指定のレジームにおける, 反応変数, 説明変数, 状態確率の推定値 (平滑化確率) の同時プロット par(&quot;mar&quot; = c(1, 1, 1, 1)) plotReg(mod.mswm, expl = &quot;x&quot;) "],["garchモデル.html", "8 GARCHモデル 8.1 GARCHモデル 8.2 GARCHモデルの推定 8.3 GARCHモデルのバリエーション 8.4 GARCHモデル: データ分析例 (Tsay, Ch4)", " 8 GARCHモデル 8.1 GARCHモデル 8.1.1 GARCH(p,q)モデルのサンプルパス生成 ボラティリティ方程式 \\[ \\sigma_t^2=\\omega+\\alpha_1 u_{t-1}^2+\\cdots+\\alpha_p u_{t-p}^2+\\beta_1 \\sigma_{t-1}^2+\\cdots+\\beta_q \\sigma_{t-q}^2\\] パッケージfGarch https://www.rdocumentation.org/packages/fGarch/versions/3042.83.2/topics/garchSim 8.1.1.1 ARCH(p)モデル パラメータ設定例 ボラティリティ方程式 (\\(p=2, q=0\\)): \\(\\omega=10^{-6}\\) (デフォルト), \\(\\alpha_1=0.5, \\alpha_2=0.1\\) Seedv &lt;- 10 Tlen &lt;- 300 library(fGarch) ## NOTE: Packages &#39;fBasics&#39;, &#39;timeDate&#39;, and &#39;timeSeries&#39; are no longer ## attached to the search() path when &#39;fGarch&#39; is attached. ## ## If needed attach them yourself in your R script by e.g., ## require(&quot;timeSeries&quot;) # ARCH(2) - use default omega and specify alpha, set beta=0! spec &lt;- garchSpec(model = list(alpha = c(0.5, 0.1), beta = 0)) set.seed(Seedv) x &lt;- garchSim(spec, n = Tlen) plot(x) par(mfrow = c(1, 2)) acf(x); pacf(x) acf(x ^ 2); pacf(x ^ 2) acf(abs(x)); pacf(abs(x)) 8.1.1.2 GARCH(p,q)モデル パラメータ設定例 ボラティリティ方程式 (次数\\(p=2,q=1\\)): \\(\\omega=10^{-6}\\)(デフォルト), \\(\\alpha_1=0.5, \\alpha_2=0.1, \\beta_1=0.35\\) spec &lt;- garchSpec(model = list(alpha = c(0.5, 0.1), beta = 0.35)) set.seed(Seedv) x &lt;- garchSim(spec, n = Tlen) plot(x) par(mfrow = c(1, 2)) acf(x); pacf(x) acf(x ^ 2); pacf(x ^ 2) acf(abs(x)); pacf(abs(x)) 8.1.1.3 ARMA(p’,q’)-GARCH(p,q)モデル パラメータ設定例 平均方程式 (\\(p&#39;=1,q&#39;=2\\)): \\(\\phi_1=0.7,\\theta_1=0.3,\\theta_2=-0.3\\) ボラティリティ方程式 (\\(p=1,q=1\\)): \\(\\omega=10^{-6}\\)(デフォルト), \\(\\alpha_1=0.5, \\alpha_2=0.1, \\beta_1=0.35\\) spec &lt;- garchSpec(model = list(ar = 0.7, ma = c(0.3, -0.3), alpha = c(0.5, 0.1), beta = 0.35)) set.seed(Seedv) x &lt;- garchSim(spec, n = Tlen) plot(x) par(mfrow = c(1, 2)) acf(x); pacf(x) acf(x ^ 2); pacf(x ^ 2) acf(abs(x)); pacf(abs(x)) 8.2 GARCHモデルの推定 garchFit関数: 1変量ARMA-GARCHモデルを適合 最尤法 ARMAおよびGARCHのモデル次数を引数に与える (デフォルト, GARCH(1,1)) 参考: 福地・伊藤(2011). Rによる計量経済分析. Sec.8.3 https://sites.google.com/site/econometricsr/ Tsay, Ch.4 data(&quot;dem2gbp&quot;) # DEM/GBP日次対数リターン,Jan/31984〜Dec/31/1991 (1974件) x &lt;- dem2gbp; Tlen = nrow(dem2gbp) ts.plot(x) par(mfrow = c(1, 2)) acf(x); pacf(x, main = &quot;dem2gbp&quot;) acf(x ^ 2, main = &quot;dem2gbp^2&quot;); pacf(x ^ 2, main = &quot;dem2gbp^2&quot;) ARCH効果の検定 例. ラグ\\(p=5\\)を指定した場合 library(&quot;FinTS&quot;) ## Loading required package: zoo ## ## Attaching package: &#39;zoo&#39; ## The following objects are masked from &#39;package:base&#39;: ## ## as.Date, as.Date.numeric ArchTest(unlist(x), lags = 5, demean = TRUE) # xは数値ベクトルであること ## ## ARCH LM-test; Null hypothesis: no ARCH effects ## ## data: unlist(x) ## Chi-squared = 182.43, df = 5, p-value &lt; 2.2e-16 → 帰無仮説 (\\(\\alpha_1= \\ldots=\\alpha_{5}=0\\)) を棄却 例. ARCH(5)モデルの適合 fit.ARCH &lt;- garchFit(formula = ~ garch(5, 0), data = x, trace = FALSE, include.mean = TRUE) summary(fit.ARCH) ## ## Title: ## GARCH Modelling ## ## Call: ## garchFit(formula = ~garch(5, 0), data = x, include.mean = TRUE, ## trace = FALSE) ## ## Mean and Variance Equation: ## data ~ garch(5, 0) ## &lt;environment: 0x119da6240&gt; ## [data = x] ## ## Conditional Distribution: ## norm ## ## Coefficient(s): ## mu omega alpha1 alpha2 alpha3 alpha4 ## -0.00056115 0.07923997 0.24684994 0.14580250 0.08569016 0.08462344 ## alpha5 ## 0.12554184 ## ## Std. Errors: ## based on Hessian ## ## Error Analysis: ## Estimate Std. Error t value Pr(&gt;|t|) ## mu -0.0005612 0.0087236 -0.064 0.94871 ## omega 0.0792400 0.0065155 12.162 &lt; 2e-16 *** ## alpha1 0.2468499 0.0344795 7.159 8.11e-13 *** ## alpha2 0.1458025 0.0332822 4.381 1.18e-05 *** ## alpha3 0.0856902 0.0261306 3.279 0.00104 ** ## alpha4 0.0846234 0.0280618 3.016 0.00256 ** ## alpha5 0.1255418 0.0286409 4.383 1.17e-05 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Log Likelihood: ## -1118.366 normalized: -0.5665483 ## ## Description: ## Thu Dec 21 22:47:18 2023 by user: ## ## ## Standardised Residuals Tests: ## Statistic p-Value ## Jarque-Bera Test R Chi^2 817.1006 0 ## Shapiro-Wilk Test R W 0.9662239 0 ## Ljung-Box Test R Q(10) 10.09528 0.432174 ## Ljung-Box Test R Q(15) 17.39533 0.2957857 ## Ljung-Box Test R Q(20) 19.36413 0.498283 ## Ljung-Box Test R^2 Q(10) 11.95177 0.2882973 ## Ljung-Box Test R^2 Q(15) 20.96312 0.1380119 ## Ljung-Box Test R^2 Q(20) 23.97484 0.2434931 ## LM Arch Test R TR^2 11.548 0.4826274 ## ## Information Criterion Statistics: ## AIC BIC SIC HQIC ## 1.140189 1.160004 1.140164 1.147469 resd = residuals(fit.ARCH, standardize = T) par(mfcol = c(3, 1)) ts.plot(resd) acf(resd); pacf(resd ^ 2) 例. GARCH(1,1)モデルの適合 fit.GARCH &lt;- garchFit(formula = ~ garch(1, 1), data = x, trace = FALSE, include.mean = TRUE) summary(fit.GARCH) ## ## Title: ## GARCH Modelling ## ## Call: ## garchFit(formula = ~garch(1, 1), data = x, include.mean = TRUE, ## trace = FALSE) ## ## Mean and Variance Equation: ## data ~ garch(1, 1) ## &lt;environment: 0x106ed0ec0&gt; ## [data = x] ## ## Conditional Distribution: ## norm ## ## Coefficient(s): ## mu omega alpha1 beta1 ## -0.0061903 0.0107614 0.1531341 0.8059737 ## ## Std. Errors: ## based on Hessian ## ## Error Analysis: ## Estimate Std. Error t value Pr(&gt;|t|) ## mu -0.006190 0.008462 -0.732 0.464447 ## omega 0.010761 0.002838 3.793 0.000149 *** ## alpha1 0.153134 0.026422 5.796 6.8e-09 *** ## beta1 0.805974 0.033381 24.144 &lt; 2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Log Likelihood: ## -1106.608 normalized: -0.5605916 ## ## Description: ## Thu Dec 21 22:47:18 2023 by user: ## ## ## Standardised Residuals Tests: ## Statistic p-Value ## Jarque-Bera Test R Chi^2 1059.851 0 ## Shapiro-Wilk Test R W 0.9622848 0 ## Ljung-Box Test R Q(10) 10.12141 0.4299066 ## Ljung-Box Test R Q(15) 17.04349 0.3162711 ## Ljung-Box Test R Q(20) 19.29764 0.5025619 ## Ljung-Box Test R^2 Q(10) 9.062555 0.5261773 ## Ljung-Box Test R^2 Q(15) 16.07769 0.3769072 ## Ljung-Box Test R^2 Q(20) 17.50715 0.6198388 ## LM Arch Test R TR^2 9.771217 0.6360238 ## ## Information Criterion Statistics: ## AIC BIC SIC HQIC ## 1.125236 1.136559 1.125228 1.129396 coef(fit.GARCH) ## mu omega alpha1 beta1 ## -0.006190317 0.010761385 0.153134063 0.805973739 resd &lt;- residuals(fit.GARCH, standardize = T) # 標準化残差 tail(resd, 10) ## [1] 1.39586970 -0.78568121 -0.11839598 0.34278825 -1.35175439 -1.06335161 ## [7] -0.06248781 -0.30590821 -0.65122451 1.57675563 par(mfcol = c(3, 1)) ts.plot(resd) acf(resd); pacf(resd ^ 2) → 残差の系列相関は概ね消滅, 非正規性残る→ 改善余地有り Tsay, Ch.4を参照のこと ボラティリティ推定値 (内挿予測) # ボラティリティ推定値 vola &lt;- volatility(fit.GARCH) # 標準偏差表示 tail(vola, 10) ## [1] 0.3659949 0.3983608 0.3919991 0.3673416 0.3492097 0.3783785 0.3885138 ## [8] 0.3640161 0.3456269 0.3388205 par(mfcol = c(2, 1)) ts.plot(x); ts.plot(vola) \\(l\\)期先予測 (外挿予測) # n.ahead(=20)期先予測 # nx:表示する観測データ数 par(mfrow = c(1,1)) # 収益率系列xの予測 (&amp; 95%信頼区間) x.pred &lt;- predict(fit.GARCH, n.ahead = 20, plot = TRUE, conf = .95, nx = 300) # ボラティリティのl期先予測値 (標準偏差表示) (v.pred &lt;- x.pred[, &quot;standardDeviation&quot;]) ## [1] 0.3833961 0.3895421 0.3953471 0.4008358 0.4060303 0.4109507 0.4156151 ## [8] 0.4200402 0.4242410 0.4282312 0.4320237 0.4356301 0.4390612 0.4423269 ## [15] 0.4454366 0.4483989 0.4512218 0.4539128 0.4564788 0.4589264 # プロット (実績値&amp;予測値) v.pred &lt;- c(vola[(Tlen - 99):Tlen], v.pred) #; length(v.pred) plot(v.pred, type = &quot;l&quot;, ylab = &quot;vola&quot;) abline(v = 101, col = &quot;red&quot;, lty = &quot;dotted&quot;) GARCH(1,1)モデルの\\(l\\)-期先ボラティリティ予測値 \\(T\\): データ期間 (モデル推定に使用) の最終時点 (予測の起点) \\(u_T, \\sigma_T^2\\): モデル適合による時点\\(T\\)における推定値 (所与) \\(l=1\\)のケース: \\[\\sigma_T^2 (1) = \\omega + \\alpha_1 u_T^2 + \\beta_1 \\sigma_T^2\\] \\(l\\ge2\\)のケース: \\[\\sigma_T^2 (l) = \\omega \\frac{1-(\\alpha_1 + \\beta_1)^{l-1}}{1-(\\alpha_1 + \\beta_1)} + (\\alpha_1 + \\beta_1)^{l-1} \\sigma_T^2 (1)\\] 参考: Tsay, pp.200-201 代替パッケージ: rugarch library(rugarch) ## Loading required package: parallel ## ## Attaching package: &#39;rugarch&#39; ## The following object is masked from &#39;package:stats&#39;: ## ## sigma spec &lt;- ugarchspec(variance.model = list(garchOrder = c(1, 1))) # モデルの特定 fit.GARCH &lt;- ugarchfit(data = x, spec = spec) # モデルの適合 (x.pred &lt;- ugarchforecast(fitORspec = fit.GARCH, n.ahead = 20)) # 収益率系列, ボラティリティの予測 (→ x.predに2系列を格納) ## ## *------------------------------------* ## * GARCH Model Forecast * ## *------------------------------------* ## Model: sGARCH ## Horizon: 20 ## Roll Steps: 0 ## Out of Sample: 0 ## ## 0-roll forecast [T0=1975-05-29 09:00:00]: ## Series Sigma ## T+1 0.0272008 0.3850 ## T+2 -0.0197455 0.3915 ## T+3 -0.0005006 0.3976 ## T+4 -0.0083897 0.4034 ## T+5 -0.0051557 0.4088 ## T+6 -0.0064815 0.4139 ## T+7 -0.0059380 0.4187 ## T+8 -0.0061608 0.4233 ## T+9 -0.0060694 0.4276 ## T+10 -0.0061069 0.4317 ## T+11 -0.0060915 0.4356 ## T+12 -0.0060978 0.4393 ## T+13 -0.0060952 0.4427 ## T+14 -0.0060963 0.4460 ## T+15 -0.0060959 0.4492 ## T+16 -0.0060960 0.4522 ## T+17 -0.0060960 0.4550 ## T+18 -0.0060960 0.4577 ## T+19 -0.0060960 0.4603 ## T+20 -0.0060960 0.4627 # 別々に表示 #fitted(x.pred) # 収益率系列の予測値 #x.pred@forecast$seriesFor # 同 sigma(x.pred) # ボラティリティ(条件付標準偏差)の予測値 ## 1975-05-29 09:00:00 ## T+1 0.3850257 ## T+2 0.3915075 ## T+3 0.3976065 ## T+4 0.4033520 ## T+5 0.4087702 ## T+6 0.4138848 ## T+7 0.4187168 ## T+8 0.4232855 ## T+9 0.4276084 ## T+10 0.4317014 ## T+11 0.4355791 ## T+12 0.4392549 ## T+13 0.4427411 ## T+14 0.4460491 ## T+15 0.4491894 ## T+16 0.4521716 ## T+17 0.4550049 ## T+18 0.4576977 ## T+19 0.4602578 ## T+20 0.4626924 #x.pred@forecast$sigmaFor # 同 8.3 GARCHモデルのバリエーション パッケージrugarch - ugarchspec(): 一変量GARCHモデルの特定 (specification) - modelの選択肢: “sGARCH”, “fGARCH”, “eGARCH”, “gjrGARCH”, “apARCH”, “iGARCH”, “csGARCH” - submodelの選択肢(model=“fGARCH”の場合): “GARCH”, “TGARCH”, “AVGARCH”, “NGARCH”, “NAGARCH”, “APARCH”, “GJRGARCH”, “ALL- GARCH”. - distribution.mpdel(イノベーションに用いる条件付確率密度)の選択肢: &quot;norm&quot;, &quot;snorm&quot;(skew-normal), &quot;std&quot;(student t), &quot;sstd&quot;(skew-student), &quot;ged&quot;(generalized error), &quot;sged&quot;(skew-ged), &quot;nig&quot;(normal inverse gaussian), &quot;ghyp&quot;(Generalized Hyperbolic), &quot;jsu&quot;(Johnson&#39;s SU). - ugarchfit(): 一変量GARCHモデルの適合 - solverの選択肢: “nlminb”, “solnp”, “lbfgs”, “gosolnp”, “nloptr” or “hybrid” - 注): 本パッケージでは, &quot;NAGARCH (Nonlinear Asymmetric GARCH)&quot;, &quot;NGARCH (Nonlinear GARCH)&quot;である. Tsay, 4.12で紹介されているEngle and Ng (1993)の&quot;NGARCH (Nonsymmetric GARCH)&quot;は, 前者に対応する. https://www.rdocumentation.org/packages/rugarch/versions/1.4-4 データセット: spyreal - SPDR Standard and Poors 500 Open-Close Daily Return and Realized Kernel Volatility - SPDR(スパイダー) S\\&amp;P500インデックス: 始値-終値(open-close)リターン, 実現カーネル(realized kernel)ボラティリティ. - 期間: 2002-01-02 〜 2008-08-29 - Reference: Hansen, P. R., Huang, Z., and Shek, H. H. (2012). Realized GARCH: a joint model for returns and realized measures of volatility. Journal of Applied Econometrics, 27(6), 877–906. library(rugarch) ## Loading required package: parallel ## ## Attaching package: &#39;rugarch&#39; ## The following object is masked from &#39;package:stats&#39;: ## ## sigma data(spyreal) head(spyreal) ## SPY_OC SPY_RK ## 2002-01-02 0.0051151007 0.010044750 ## 2002-01-03 0.0101514981 0.005342828 ## 2002-01-04 0.0009369278 0.007978535 ## 2002-01-07 -0.0097245499 0.005772834 ## 2002-01-08 -0.0033463500 0.006452759 ## 2002-01-09 -0.0078317023 0.007684824 8.3.1 IARCH(1,1) spec1 &lt;- ugarchspec( variance.model = list(model = &quot;iGARCH&quot;, garchOrder = c(1, 1)), mean.model = list(armaOrder = c(0, 0), include.mean = TRUE), distribution.model = &quot;norm&quot;, fixed.pars = list(omega = 0)) # 平均方程式にARMA(1,1)の場合: mean.model=list(armaOrder = c(1, 1) mod_igarch &lt;- ugarchfit(spec = spec1, data = spyreal[, 1], solver = &#39;hybrid&#39;) mod_igarch ## ## *---------------------------------* ## * GARCH Model Fit * ## *---------------------------------* ## ## Conditional Variance Dynamics ## ----------------------------------- ## GARCH Model : iGARCH(1,1) ## Mean Model : ARFIMA(0,0,0) ## Distribution : norm ## ## Optimal Parameters ## ------------------------------------ ## Estimate Std. Error t value Pr(&gt;|t|) ## mu -0.000028 0.000177 -0.15908 0.8736 ## omega 0.000000 NA NA NA ## alpha1 0.043186 0.006677 6.46763 0.0000 ## beta1 0.956814 NA NA NA ## ## Robust Standard Errors: ## Estimate Std. Error t value Pr(&gt;|t|) ## mu -0.000028 0.000212 -0.13345 0.893837 ## omega 0.000000 NA NA NA ## alpha1 0.043186 0.010297 4.19426 0.000027 ## beta1 0.956814 NA NA NA ## ## LogLikelihood : 5630.331 ## ## Information Criteria ## ------------------------------------ ## ## Akaike -6.7730 ## Bayes -6.7664 ## Shibata -6.7730 ## Hannan-Quinn -6.7705 ## ## Weighted Ljung-Box Test on Standardized Residuals ## ------------------------------------ ## statistic p-value ## Lag[1] 5.479 0.019252 ## Lag[2*(p+q)+(p+q)-1][2] 8.207 0.005702 ## Lag[4*(p+q)+(p+q)-1][5] 10.148 0.008436 ## d.o.f=0 ## H0 : No serial correlation ## ## Weighted Ljung-Box Test on Standardized Squared Residuals ## ------------------------------------ ## statistic p-value ## Lag[1] 0.07752 0.7807 ## Lag[2*(p+q)+(p+q)-1][5] 0.87181 0.8880 ## Lag[4*(p+q)+(p+q)-1][9] 1.85043 0.9221 ## d.o.f=2 ## ## Weighted ARCH LM Tests ## ------------------------------------ ## Statistic Shape Scale P-Value ## ARCH Lag[3] 0.9841 0.500 2.000 0.3212 ## ARCH Lag[5] 1.3879 1.440 1.667 0.6223 ## ARCH Lag[7] 2.0139 2.315 1.543 0.7144 ## ## Nyblom stability test ## ------------------------------------ ## Joint Statistic: 0.1404 ## Individual Statistics: ## mu 0.02297 ## alpha1 0.08852 ## ## Asymptotic Critical Values (10% 5% 1%) ## Joint Statistic: 0.61 0.749 1.07 ## Individual Statistic: 0.35 0.47 0.75 ## ## Sign Bias Test ## ------------------------------------ ## t-value prob sig ## Sign Bias 1.24939 0.2117 ## Negative Sign Bias 0.07504 0.9402 ## Positive Sign Bias 0.78468 0.4328 ## Joint Effect 5.84998 0.1191 ## ## ## Adjusted Pearson Goodness-of-Fit Test: ## ------------------------------------ ## group statistic p-value(g-1) ## 1 20 40.09 0.0031807 ## 2 30 58.61 0.0009158 ## 3 40 63.78 0.0073916 ## 4 50 83.13 0.0016808 ## ## ## Elapsed time : 0.01861095 8.3.2 GJR-GARCH(1,1) spec2 &lt;- ugarchspec( variance.model = list(model = &quot;gjrGARCH&quot;, garchOrder = c(1, 1)), mean.model = list(armaOrder = c(0, 0), include.mean = TRUE), distribution.model = &quot;norm&quot;) mod_gjr &lt;- ugarchfit(spec = spec2, data = spyreal[, 1], solver = &#39;hybrid&#39;) mod_gjr ## ## *---------------------------------* ## * GARCH Model Fit * ## *---------------------------------* ## ## Conditional Variance Dynamics ## ----------------------------------- ## GARCH Model : gjrGARCH(1,1) ## Mean Model : ARFIMA(0,0,0) ## Distribution : norm ## ## Optimal Parameters ## ------------------------------------ ## Estimate Std. Error t value Pr(&gt;|t|) ## mu -0.000235 0.000166 -1.410892 0.15828 ## omega 0.000001 0.000001 1.071102 0.28412 ## alpha1 0.000000 0.001536 0.000029 0.99998 ## beta1 0.946145 0.009443 100.195459 0.00000 ## gamma1 0.090962 0.015265 5.958717 0.00000 ## ## Robust Standard Errors: ## Estimate Std. Error t value Pr(&gt;|t|) ## mu -0.000235 0.000398 -0.590324 0.554973 ## omega 0.000001 0.000003 0.176169 0.860161 ## alpha1 0.000000 0.067909 0.000001 0.999999 ## beta1 0.946145 0.079992 11.827974 0.000000 ## gamma1 0.090962 0.024658 3.688997 0.000225 ## ## LogLikelihood : 5665.74 ## ## Information Criteria ## ------------------------------------ ## ## Akaike -6.8120 ## Bayes -6.7957 ## Shibata -6.8120 ## Hannan-Quinn -6.8059 ## ## Weighted Ljung-Box Test on Standardized Residuals ## ------------------------------------ ## statistic p-value ## Lag[1] 5.697 0.016993 ## Lag[2*(p+q)+(p+q)-1][2] 7.483 0.008869 ## Lag[4*(p+q)+(p+q)-1][5] 8.806 0.018531 ## d.o.f=0 ## H0 : No serial correlation ## ## Weighted Ljung-Box Test on Standardized Squared Residuals ## ------------------------------------ ## statistic p-value ## Lag[1] 3.883 0.04878 ## Lag[2*(p+q)+(p+q)-1][5] 5.237 0.13523 ## Lag[4*(p+q)+(p+q)-1][9] 6.736 0.22230 ## d.o.f=2 ## ## Weighted ARCH LM Tests ## ------------------------------------ ## Statistic Shape Scale P-Value ## ARCH Lag[3] 0.1657 0.500 2.000 0.6840 ## ARCH Lag[5] 0.4472 1.440 1.667 0.8991 ## ARCH Lag[7] 1.9375 2.315 1.543 0.7306 ## ## Nyblom stability test ## ------------------------------------ ## Joint Statistic: 292.4172 ## Individual Statistics: ## mu 0.04326 ## omega 55.96148 ## alpha1 0.22053 ## beta1 0.17934 ## gamma1 0.19934 ## ## Asymptotic Critical Values (10% 5% 1%) ## Joint Statistic: 1.28 1.47 1.88 ## Individual Statistic: 0.35 0.47 0.75 ## ## Sign Bias Test ## ------------------------------------ ## t-value prob sig ## Sign Bias 0.9606 0.3369 ## Negative Sign Bias 0.8427 0.3995 ## Positive Sign Bias 0.6544 0.5129 ## Joint Effect 2.4783 0.4792 ## ## ## Adjusted Pearson Goodness-of-Fit Test: ## ------------------------------------ ## group statistic p-value(g-1) ## 1 20 37.13 0.007635 ## 2 30 53.67 0.003532 ## 3 40 68.35 0.002521 ## 4 50 83.07 0.001704 ## ## ## Elapsed time : 0.108568 8.3.3 APARCH spec3 &lt;- ugarchspec( variance.model = list(model = &quot;apARCH&quot;, garchOrder = c(1, 1)), mean.model = list(armaOrder = c(0, 0), include.mean = TRUE), distribution.model = &quot;std&quot;) # 一般誤差分布使用の場合: distribution.model=&quot;ged&quot;) mod_aparch &lt;- ugarchfit(spec = spec3, data = spyreal[, 1], solver = &#39;hybrid&#39;) mod_aparch ## ## *---------------------------------* ## * GARCH Model Fit * ## *---------------------------------* ## ## Conditional Variance Dynamics ## ----------------------------------- ## GARCH Model : apARCH(1,1) ## Mean Model : ARFIMA(0,0,0) ## Distribution : std ## ## Optimal Parameters ## ------------------------------------ ## Estimate Std. Error t value Pr(&gt;|t|) ## mu -0.000125 0.000172 -0.72685 0.467320 ## omega 0.000027 0.000032 0.84129 0.400187 ## alpha1 0.041590 0.012433 3.34503 0.000823 ## beta1 0.951150 0.008932 106.49292 0.000000 ## gamma1 1.000000 0.000767 1303.38424 0.000000 ## delta 1.226669 0.100403 12.21741 0.000000 ## shape 15.225663 4.931263 3.08758 0.002018 ## ## Robust Standard Errors: ## Estimate Std. Error t value Pr(&gt;|t|) ## mu -0.000125 NaN NaN NaN ## omega 0.000027 NaN NaN NaN ## alpha1 0.041590 NaN NaN NaN ## beta1 0.951150 NaN NaN NaN ## gamma1 1.000000 NaN NaN NaN ## delta 1.226669 NaN NaN NaN ## shape 15.225663 NaN NaN NaN ## ## LogLikelihood : 5675.851 ## ## Information Criteria ## ------------------------------------ ## ## Akaike -6.8217 ## Bayes -6.7989 ## Shibata -6.8218 ## Hannan-Quinn -6.8133 ## ## Weighted Ljung-Box Test on Standardized Residuals ## ------------------------------------ ## statistic p-value ## Lag[1] 5.897 0.015171 ## Lag[2*(p+q)+(p+q)-1][2] 7.942 0.006704 ## Lag[4*(p+q)+(p+q)-1][5] 9.441 0.012796 ## d.o.f=0 ## H0 : No serial correlation ## ## Weighted Ljung-Box Test on Standardized Squared Residuals ## ------------------------------------ ## statistic p-value ## Lag[1] 4.402 0.0359 ## Lag[2*(p+q)+(p+q)-1][5] 5.693 0.1061 ## Lag[4*(p+q)+(p+q)-1][9] 7.269 0.1777 ## d.o.f=2 ## ## Weighted ARCH LM Tests ## ------------------------------------ ## Statistic Shape Scale P-Value ## ARCH Lag[3] 0.03822 0.500 2.000 0.8450 ## ARCH Lag[5] 0.17688 1.440 1.667 0.9709 ## ARCH Lag[7] 1.85908 2.315 1.543 0.7471 ## ## Nyblom stability test ## ------------------------------------ ## Joint Statistic: NaN ## Individual Statistics: ## mu 0.06082 ## omega 0.10137 ## alpha1 0.19391 ## beta1 0.19336 ## gamma1 NaN ## delta 0.12311 ## shape 0.58877 ## ## Asymptotic Critical Values (10% 5% 1%) ## Joint Statistic: 1.69 1.9 2.35 ## Individual Statistic: 0.35 0.47 0.75 ## ## Sign Bias Test ## ------------------------------------ ## t-value prob sig ## Sign Bias 0.9891 0.3227 ## Negative Sign Bias 1.4526 0.1465 ## Positive Sign Bias 0.8096 0.4183 ## Joint Effect 3.4471 0.3277 ## ## ## Adjusted Pearson Goodness-of-Fit Test: ## ------------------------------------ ## group statistic p-value(g-1) ## 1 20 29.34 0.060884 ## 2 30 41.07 0.067923 ## 3 40 46.78 0.183213 ## 4 50 81.80 0.002274 ## ## ## Elapsed time : 0.883219 係数の推定値 coef(mod_aparch) ## mu omega alpha1 beta1 gamma1 ## -1.252560e-04 2.654268e-05 4.159036e-02 9.511501e-01 1.000000e+00 ## delta shape ## 1.226669e+00 1.522566e+01 #infocriteria(mod_aparch)[&quot;Akaike&quot;,] infocriteria(mod_aparch) ## ## Akaike -6.821722 ## Bayes -6.798912 ## Shibata -6.821757 ## Hannan-Quinn -6.813268 推定されたボラティリティ系列 #dat &lt;- spyreal[, 1] dat &lt;- spyreal dat$GARCH &lt;- sigma(mod_aparch) プロット library(ggplot2) library(xts) #library(zoo) autoplot(dat) # 時系列プロット # ボラティリティ推定値同士の比較 plot(as.vector(sqrt(dat$SPY_RK)), as.vector(dat$GARCH)) #plot(as.vector(dat$SPY_RK), as.vector(dat$GARCH)) Bootstrap法に基づく予測 GARCHモデルによるn期先予測には2種類の不確実性: 予測確率分布に起因するもの &amp; パラメータ推定誤差に起因するもの. Bootstrap法: 適合GARCHモデルの経験分布よりイノベーションをリサンプルすることで, 将来の時系列(series)と標準偏差(sigma)を生成. “full”法(Pascual et al (2006)): パラメータのシミュレーション分布を発生させることで, パラメータ不確実性を考慮(実行時間がかかる). “partial”法: 分布の不確実性のみ考慮 dat.pred &lt;- ugarchboot(mod_aparch, n.ahead = 30, method = &quot;Partial&quot;) #plot(dat.pred, which = &quot;all&quot;) # 時系列(リターン) plot(dat.pred, which = 2) # 標準偏差(ボラティリティ) plot(dat.pred, which = 3) # which=1は, &quot;full&quot;法のみ (Parameter Density Plots生成) dat.pred ## ## *-----------------------------------* ## * GARCH Bootstrap Forecast * ## *-----------------------------------* ## Model : apARCH ## n.ahead : 30 ## Bootstrap method: partial ## Date (T[0]): 2008-08-29 ## ## Series (summary): ## min q.25 mean q.75 max forecast[analytic] ## t+1 -0.055262 -0.005764 -0.000187 0.005750 0.030391 -0.000125 ## t+2 -0.038297 -0.006844 0.000061 0.006573 0.028299 -0.000125 ## t+3 -0.036241 -0.007133 -0.000602 0.005950 0.036360 -0.000125 ## t+4 -0.031457 -0.006337 -0.000118 0.006301 0.030326 -0.000125 ## t+5 -0.028510 -0.007150 0.000062 0.006484 0.039269 -0.000125 ## t+6 -0.036443 -0.006302 0.000095 0.006515 0.046772 -0.000125 ## t+7 -0.036293 -0.006744 -0.000378 0.005479 0.034738 -0.000125 ## t+8 -0.032886 -0.006599 -0.000726 0.004936 0.029578 -0.000125 ## t+9 -0.040465 -0.005505 0.000626 0.006583 0.038580 -0.000125 ## t+10 -0.034318 -0.007223 -0.000627 0.006010 0.052561 -0.000125 ## ..................... ## ## Sigma (summary): ## min q0.25 mean q0.75 max forecast[analytic] ## t+1 0.010004 0.010004 0.010004 0.010004 0.010004 0.010004 ## t+2 0.009665 0.009665 0.009981 0.010060 0.015776 0.009985 ## t+3 0.009341 0.009341 0.009958 0.010243 0.018470 0.009967 ## t+4 0.009030 0.009194 0.009983 0.010386 0.017785 0.009948 ## t+5 0.008733 0.009016 0.009955 0.010541 0.017128 0.009930 ## t+6 0.008447 0.008967 0.009947 0.010590 0.017770 0.009912 ## t+7 0.008174 0.008906 0.009938 0.010631 0.017114 0.009894 ## t+8 0.007911 0.008805 0.009935 0.010689 0.016484 0.009877 ## t+9 0.007660 0.008738 0.009940 0.010829 0.017070 0.009859 ## t+10 0.007428 0.008679 0.009896 0.010755 0.016442 0.009842 ## ..................... 8.4 GARCHモデル: データ分析例 (Tsay, Ch4) 出所: http://faculty.chicagobooth.edu/ruey.tsay/teaching/introTS/ (一部改変) 8.4.1 必要な関数やデータセットの入手 教科書ホームページからのRコードへの直接の読み込みの方法 # 教科書著者(Tsay)の関数 fctns &lt;- c(&quot;igarch.r&quot;, &quot;garchm.r&quot;, &quot;egarch.r&quot;, &quot;ngarch.r&quot;, &quot;tgarch11.r&quot;, &quot;vold2m.r&quot;) url_home &lt;- &quot;https://faculty.chicagobooth.edu/-/media/faculty/ruey-s-tsay/teaching/introts/&quot; for (fct in fctns) { url_tmp &lt;- file.path(url_home, fct) source(url_tmp) } # データセット # 単一テキストファイルの入手 #library(rio) #url_tmp &lt;- &quot;https://faculty.chicagobooth.edu/-/media/faculty/ruey-s-tsay/teaching/introts/d-spy-0111.txt&quot; #rio::import(url_tmp) # 複数データセットの入った圧縮フォルダ(*.zip)からのデータセット入手 url_tmp &lt;- &quot;https://faculty.chicagobooth.edu/-/media/faculty/ruey-s-tsay/teaching/introts/ch4data.zip&quot; tmp &lt;- tempfile() tmp2 &lt;- tempfile() download.file(url_tmp, tmp) unzip(tmp, exdir = tmp2) dir(tmp2, recursive = T) ## [1] &quot;d-pg-0111.txt&quot; &quot;d-sp58010.txt&quot; &quot;d-spy-0111.txt&quot; &quot;d-useu9910.txt&quot; ## [5] &quot;m-ibmsp6709.txt&quot; &quot;m-intcsp7309.txt&quot; &quot;m-ko-6111.txt&quot; &quot;m-sp56710.txt&quot; setwd(tmp2) unlink(tmp) 8.4.2 Integrated GARCH モデル Tsay 4.7, pp.211–212 Igarch(): Estimation of a Gaussian IGARCH(1,1) model. - Igarch(rtn, include.mean = F, volcnt = F) - rtn: return series - include.mean: flag for the constant in the mean equation. - volcnt: flag for the constant term of the volatility equation. # source(&quot;Igarch.R&quot;) # da &lt;- read.table(&quot;m-intcsp7309.txt&quot;, header = T) head(da) # monthly returns of Intel &amp; S&amp;P, Jan73--Dec09 ## date intc sp ## 1 19730131 0.010050 -0.017111 ## 2 19730228 -0.139303 -0.037490 ## 3 19730330 0.069364 -0.001433 ## 4 19730430 0.086486 -0.040800 ## 5 19730531 -0.104478 -0.018884 ## 6 19730629 0.133333 -0.006575 intc &lt;- log(da$intc + 1) # monthly log-returns of Intel #mm &lt;- Igarch(intc, include.mean = T, volcnt = T) # --&gt; エラー #mm &lt;- Igarch(intc, include.mean = T) # --&gt; mu, beta #mm &lt;- Igarch(intc, volcnt = T) # --&gt; omega, beta mm &lt;- Igarch(intc) # --&gt; beta ## Estimates: 0.9217433 ## Maximized log-likehood: -301.412 ## ## Coefficient(s): ## Estimate Std. Error t value Pr(&gt;|t|) ## beta 0.9217433 0.0155534 59.2633 &lt; 2.22e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 names(mm) ## [1] &quot;par&quot; &quot;volatility&quot; mm$par # --&gt; beta ## beta ## 0.9217433 head(mm$volatility) ## [1] 0.1275742 0.1225127 0.1248833 0.1213562 0.1187993 0.1181597 summary(mm) ## Length Class Mode ## par 1 -none- numeric ## volatility 444 ts numeric –&gt; 教科書の記載と出力が相違(??) plot(mm$vola) 8.4.3 GARCH-M モデル Tsay 4.8, pp.213–214 garchM(): Estimation of a Gaussian GARCH(1, 1)-M model. - The program uses GARCH(1, 1) results as initial values. - garchM(rtn, type = 1) - rtn: return series - type = 1 for Variance-in-mean - = 2 for volatility-in-mean - = 3 for log(variance)-in-mean # source(&quot;garchM.R&quot;) # Compile the script y &lt;- intc * 100 # Intel stock returns in percentages garchM(y) ## Maximized log-likehood: -1731.983 ## ## Coefficient(s): ## Estimate Std. Error t value Pr(&gt;|t|) ## mu 0.07760995 1.33185168 0.05827 0.9535318 ## gamma 0.00794320 0.00925126 0.85861 0.3905577 ## omega 9.45891460 3.94127823 2.39996 0.0163968 * ## alpha 0.08761597 0.02673487 3.27722 0.0010484 ** ## beta 0.84933817 0.03949061 21.50734 &lt; 2.22e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 –&gt; 教科書の記載と出力が相違(??) リスクプレミアム(gamma), 有意でない garchM(y, type = 2) garchM(y, type = 3) ## 注: (最適化にnlminb()使用) 実行時間かかる –&gt; 通常のGARCH(1,1)へ #&gt; library(fGarch) #&gt; fGarch::garchFit(~ garch(1, 1), data = y, trace = F) #sp5 &lt;- scan(file = &quot;sp500.txt&quot;) # &lt;-- データ無. 誤植? da &lt;- read.table(&quot;m-intcsp7309.txt&quot;, header = T) # &lt;-- 代わりに使用. --&gt; 教科書と結果が異なる #head(da) # monthly returns of Intel &amp; S&amp;P, Jan73--Dec09 #da &lt;- read.table(&quot;m-ibmsp-2611.txt&quot;, header = T) #da &lt;- da[da$data&lt; = 20091231, ] #head(da) # monthly returns of IBM &amp; S&amp;P, Jan26--Sep11 sp5 &lt;- log(da$sp + 1) # monthly log-returns of S&amp;P # library(fGarch) sp5 &lt;- sp5 * 100 m2 &lt;- fGarch::garchFit(~ 1 + garch(1, 1), data = sp5, trace = F) summary(m2) ## ## Title: ## GARCH Modelling ## ## Call: ## fGarch::garchFit(formula = ~1 + garch(1, 1), data = sp5, trace = F) ## ## Mean and Variance Equation: ## data ~ 1 + garch(1, 1) ## &lt;environment: 0x11edfa510&gt; ## [data = sp5] ## ## Conditional Distribution: ## norm ## ## Coefficient(s): ## mu omega alpha1 beta1 ## 0.56091 0.72752 0.11733 0.85910 ## ## Std. Errors: ## based on Hessian ## ## Error Analysis: ## Estimate Std. Error t value Pr(&gt;|t|) ## mu 0.56091 0.18951 2.960 0.003078 ** ## omega 0.72752 0.45322 1.605 0.108447 ## alpha1 0.11733 0.03157 3.717 0.000202 *** ## beta1 0.85910 0.03023 28.415 &lt; 2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Log Likelihood: ## -1289.671 normalized: -2.904663 ## ## Description: ## Thu Dec 21 22:47:34 2023 by user: ## ## ## Standardised Residuals Tests: ## Statistic p-Value ## Jarque-Bera Test R Chi^2 175.7289 0 ## Shapiro-Wilk Test R W 0.9655541 1.058946e-08 ## Ljung-Box Test R Q(10) 10.2148 0.4218546 ## Ljung-Box Test R Q(15) 12.76468 0.6204685 ## Ljung-Box Test R Q(20) 15.32494 0.7575226 ## Ljung-Box Test R^2 Q(10) 5.082012 0.8856326 ## Ljung-Box Test R^2 Q(15) 6.778888 0.9634974 ## Ljung-Box Test R^2 Q(20) 7.665347 0.9938604 ## LM Arch Test R TR^2 5.295219 0.9473846 ## ## Information Criterion Statistics: ## AIC BIC SIC HQIC ## 5.827345 5.864244 5.827184 5.841896 Estimate Std. Error t value Pr(&gt;|t|) mu 0.5609132 0.1895067 2.959859 0.0030778 omega 0.7275158 0.4532207 1.605213 0.1084469 alpha1 0.1173334 0.0315668 3.716989 0.0002016 beta1 0.8590999 0.0302342 28.414854 0.0000000 –&gt; GARCH(1,1), \\(\\alpha_1,\\beta_1\\)とも (5%) 有意. plot(m2, which = 1:13) –&gt; モデル診断, 正規性を除き, データによく適合 garchM(sp5) ## Maximized log-likehood: -1289.449 ## ## Coefficient(s): ## Estimate Std. Error t value Pr(&gt;|t|) ## mu 0.3467741 0.3849340 0.90087 0.36765941 ## gamma 0.0122469 0.0188799 0.64867 0.51655173 ## omega 0.7612141 0.4796083 1.58716 0.11247694 ## alpha 0.1163726 0.0317729 3.66264 0.00024963 *** ## beta 0.8581959 0.0308425 27.82511 &lt; 2.22e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 –&gt; リスクプレミアム (gamma), 有意でない (5%水準) –&gt; GARCH(1,1)を選択せよ 8.4.4 Exponential GARCH Model Tsay 4.9, pp.218–220 Egarch(): Estimation of an EGARCH(1, 1) model. Assume normal innovations - Egarch(rtn) # source(&quot;Egarch.R&quot;) # Compile R script da &lt;- read.table(&quot;m-ibmsp6709.txt&quot;, header = T) # Load data dim(da) # Check sample size of the data ## [1] 516 3 ibm &lt;- log(da$ibm + 1) # Take log transformation Box.test(ibm, lag = 12, type = &#39;Ljung&#39;) # Check serial correlations ## ## Box-Ljung test ## ## data: ibm ## X-squared = 7.4042, df = 12, p-value = 0.8298 m1 &lt;- Egarch(ibm) # Model fitting ## ## Estimation results of EGARCH(1,1) model: ## estimates: 0.006732418 -0.5983265 0.2176024 -0.4243194 0.9201499 ## std.errors: 0.002877668 0.2349184 0.05916505 0.1683056 0.03886579 ## t-ratio: 2.339539 -2.546954 3.677888 -2.521125 23.67506 names(m1) ## [1] &quot;residuals&quot; &quot;volatility&quot; 上記出力の見方: Estimation results of EGARCH(1, 1) model: estimates: 0.006732389 -0.5983263 0.217603 -0.4243245 0.92015 std.errors: 0.002877666 0.2349172 0.05916528 0.1683064 0.0388656 t-ratio: 2.339531 -2.546967 3.677882 -2.521144 23.67518 &lt;– mu, omega, alpha1, gamma1, beta1の順に出力 –&gt; 値が教科書(p.220)と若干相違 モデル診断 stresi &lt;- m1$residuals/m1$volatility # Obtain standardized residuals tdx &lt;- c(1:516)/12 + 1967 # Compute time index par(mfcol = c(2, 1)) # Plotting plot(tdx, ibm, xlab = &#39;year&#39;, ylab = &#39;logrtn&#39;, type = &#39;l&#39;) plot(tdx, stresi, xlab = &#39;year&#39;, ylab = &#39;stresi&#39;, type = &#39;l&#39;) Box.test(stresi, lag = 10, type = &#39;Ljung&#39;) # Model checking ## ## Box-Ljung test ## ## data: stresi ## X-squared = 5.2866, df = 10, p-value = 0.8712 Box.test(stresi, lag = 20, type = &#39;Ljung&#39;) ## ## Box-Ljung test ## ## data: stresi ## X-squared = 20.983, df = 20, p-value = 0.3981 Box.test(stresi^2, lag = 10, type = &#39;Ljung&#39;) ## ## Box-Ljung test ## ## data: stresi^2 ## X-squared = 5.0469, df = 10, p-value = 0.888 Box.test(stresi^2, lag = 20, type = &#39;Ljung&#39;) ## ## Box-Ljung test ## ## data: stresi^2 ## X-squared = 14.261, df = 20, p-value = 0.817 –&gt; Tsay, “The model fits the data reasonably well.” 8.4.5 Threshold GARCH モデル Tsay 4.10, pp.222–223 Tgarch(): Estimation of TGARCH(1, 1) model with Gaussian or Student-t innovations - Tgarch11(x, cond.dist = &quot;norm&quot;) da &lt;- read.table(&quot;d-useu9910.txt&quot;, header = T) # daily USD/EUR, Jan/4/99--Aug/20/10 fx &lt;- log(da$rate) eu &lt;- diff(fx) * 100 # # source(&#39;Tgarch11.R&#39;) m1 &lt;- Tgarch11(eu) ## Log likelihood at MLEs: ## [1] -2731.832 ## ## Coefficient(s): ## Estimate Std. Error t value Pr(&gt;|t|) ## mu 0.012242608 0.010727558 1.14123 0.253774 ## omega 0.001275116 0.000618444 2.06181 0.039226 * ## alpha 0.022346602 0.005249249 4.25710 2.0709e-05 *** ## gam1 0.012518109 0.007062079 1.77258 0.076298 . ## beta 0.968719987 0.004357842 222.29351 &lt; 2.22e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 –&gt; muは有意でない volatility方程式の係数は有意 特に, レバレッジ効果 (H0: gamma&lt;=0, H1: gamma&gt;0)は(片側) 5%で有意. t=1.772, p=0.038. # モデル診断 names(m1) ## [1] &quot;residuals&quot; &quot;volatility&quot; &quot;par&quot; at &lt;- m1$residuals sigt &lt;- m1$volatility resi &lt;- at/sigt Box.test(resi, lag = 10, type = &#39;Ljung&#39;) ## ## Box-Ljung test ## ## data: resi ## X-squared = 13.382, df = 10, p-value = 0.2031 Box.test(resi, lag = 20, type = &#39;Ljung&#39;) ## ## Box-Ljung test ## ## data: resi ## X-squared = 22.873, df = 20, p-value = 0.2951 Box.test(resi^2, lag = 10, type = &#39;Ljung&#39;) ## ## Box-Ljung test ## ## data: resi^2 ## X-squared = 12.893, df = 10, p-value = 0.2297 Box.test(resi^2, lag = 20, type = &#39;Ljung&#39;) ## ## Box-Ljung test ## ## data: resi^2 ## X-squared = 27.229, df = 20, p-value = 0.1289 # 追加 plot(sigt, xlab = &#39;year&#39;, ylab = &#39;volatility&#39;, type = &#39;l&#39;) plot(resi, xlab = &#39;year&#39;, ylab = &#39;residuals&#39;, type = &#39;l&#39;) → 残差プロット, heavy tailの存在? 8.4.6 Asymmetric Power ARCH モデル Tsay 4.11, pp.224–225 m1 &lt;- fGarch::garchFit(~ 1 + aparch(1, 1), data = eu, trace = F) summary(m1) ## ## Title: ## GARCH Modelling ## ## Call: ## fGarch::garchFit(formula = ~1 + aparch(1, 1), data = eu, trace = F) ## ## Mean and Variance Equation: ## data ~ 1 + aparch(1, 1) ## &lt;environment: 0x10f8d28b0&gt; ## [data = eu] ## ## Conditional Distribution: ## norm ## ## Coefficient(s): ## mu omega alpha1 gamma1 beta1 delta ## 0.0127648 0.0015919 0.0313680 0.1135337 0.9689156 1.6743076 ## ## Std. Errors: ## based on Hessian ## ## Error Analysis: ## Estimate Std. Error t value Pr(&gt;|t|) ## mu 0.0127648 0.0107626 1.186 0.2356 ## omega 0.0015919 0.0007226 2.203 0.0276 * ## alpha1 0.0313680 0.0053350 5.880 4.11e-09 *** ## gamma1 0.1135337 0.0711912 1.595 0.1108 ## beta1 0.9689156 0.0038404 252.293 &lt; 2e-16 *** ## delta 1.6743076 0.4057123 4.127 3.68e-05 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Log Likelihood: ## -2731.172 normalized: -0.9324587 ## ## Description: ## Thu Dec 21 22:47:39 2023 by user: ## ## ## Standardised Residuals Tests: ## Statistic p-Value ## Jarque-Bera Test R Chi^2 50.2052 1.253364e-11 ## Shapiro-Wilk Test R W 0.9956711 1.608397e-07 ## Ljung-Box Test R Q(10) 13.37689 0.2033562 ## Ljung-Box Test R Q(15) 20.19634 0.1645295 ## Ljung-Box Test R Q(20) 22.84736 0.2963516 ## Ljung-Box Test R^2 Q(10) 13.15609 0.2150749 ## Ljung-Box Test R^2 Q(15) 16.58007 0.3445807 ## Ljung-Box Test R^2 Q(20) 27.44886 0.1231013 ## LM Arch Test R TR^2 14.35737 0.2784718 ## ## Information Criterion Statistics: ## AIC BIC SIC HQIC ## 1.869014 1.881269 1.869006 1.873428 m1 ## ## Title: ## GARCH Modelling ## ## Call: ## fGarch::garchFit(formula = ~1 + aparch(1, 1), data = eu, trace = F) ## ## Mean and Variance Equation: ## data ~ 1 + aparch(1, 1) ## &lt;environment: 0x10f8d28b0&gt; ## [data = eu] ## ## Conditional Distribution: ## norm ## ## Coefficient(s): ## mu omega alpha1 gamma1 beta1 delta ## 0.0127648 0.0015919 0.0313680 0.1135337 0.9689156 1.6743076 ## ## Std. Errors: ## based on Hessian ## ## Error Analysis: ## Estimate Std. Error t value Pr(&gt;|t|) ## mu 0.0127648 0.0107626 1.186 0.2356 ## omega 0.0015919 0.0007226 2.203 0.0276 * ## alpha1 0.0313680 0.0053350 5.880 4.11e-09 *** ## gamma1 0.1135337 0.0711912 1.595 0.1108 ## beta1 0.9689156 0.0038404 252.293 &lt; 2e-16 *** ## delta 1.6743076 0.4057123 4.127 3.68e-05 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Log Likelihood: ## -2731.172 normalized: -0.9324587 ## ## Description: ## Thu Dec 21 22:47:39 2023 by user: Estimate Std. Error t value Pr(&gt;|t|) mu 0.0127648 0.0107626 1.186042 0.2356059 omega 0.0015919 0.0007226 2.203001 0.0275947 alpha1 0.0313680 0.0053350 5.879685 0.0000000 gamma1 0.1135337 0.0711912 1.594772 0.1107632 beta1 0.9689156 0.0038404 252.292918 0.0000000 delta 1.6743076 0.4057123 4.126835 0.0000368 –&gt; モデル診断, データに良く適合. delta = 1.67の解釈難. –&gt; delta = 2とは、有意に乖離していない(標準誤差0.406) –&gt; delta = 2 (TGARCH(1, 1))でも良い? m2 &lt;- fGarch::garchFit(~ 1 + aparch(1, 1), data = eu, delta = 2, include.delta = F, trace = F) summary(m2) ## ## Title: ## GARCH Modelling ## ## Call: ## fGarch::garchFit(formula = ~1 + aparch(1, 1), data = eu, delta = 2, ## include.delta = F, trace = F) ## ## Mean and Variance Equation: ## data ~ 1 + aparch(1, 1) ## &lt;environment: 0x119d7e768&gt; ## [data = eu] ## ## Conditional Distribution: ## norm ## ## Coefficient(s): ## mu omega alpha1 gamma1 beta1 ## 0.0122646 0.0012745 0.0282723 0.1100239 0.9687115 ## ## Std. Errors: ## based on Hessian ## ## Error Analysis: ## Estimate Std. Error t value Pr(&gt;|t|) ## mu 0.0122646 0.0107289 1.143 0.2530 ## omega 0.0012745 0.0005752 2.216 0.0267 * ## alpha1 0.0282723 0.0038637 7.317 2.53e-13 *** ## gamma1 0.1100239 0.0649051 1.695 0.0900 . ## beta1 0.9687115 0.0039421 245.735 &lt; 2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Log Likelihood: ## -2731.85 normalized: -0.9326902 ## ## Description: ## Thu Dec 21 22:47:39 2023 by user: ## ## ## Standardised Residuals Tests: ## Statistic p-Value ## Jarque-Bera Test R Chi^2 49.97678 1.405009e-11 ## Shapiro-Wilk Test R W 0.9956803 1.655878e-07 ## Ljung-Box Test R Q(10) 13.38285 0.203047 ## Ljung-Box Test R Q(15) 20.29833 0.1607845 ## Ljung-Box Test R Q(20) 22.87265 0.2950909 ## Ljung-Box Test R^2 Q(10) 12.89586 0.229553 ## Ljung-Box Test R^2 Q(15) 16.55288 0.3462875 ## Ljung-Box Test R^2 Q(20) 27.24037 0.1286359 ## LM Arch Test R TR^2 14.29662 0.2821694 ## ## Information Criterion Statistics: ## AIC BIC SIC HQIC ## 1.868795 1.879007 1.868789 1.872472 plot(m2, which = 1:13) m2 ## ## Title: ## GARCH Modelling ## ## Call: ## fGarch::garchFit(formula = ~1 + aparch(1, 1), data = eu, delta = 2, ## include.delta = F, trace = F) ## ## Mean and Variance Equation: ## data ~ 1 + aparch(1, 1) ## &lt;environment: 0x119d7e768&gt; ## [data = eu] ## ## Conditional Distribution: ## norm ## ## Coefficient(s): ## mu omega alpha1 gamma1 beta1 ## 0.0122646 0.0012745 0.0282723 0.1100239 0.9687115 ## ## Std. Errors: ## based on Hessian ## ## Error Analysis: ## Estimate Std. Error t value Pr(&gt;|t|) ## mu 0.0122646 0.0107289 1.143 0.2530 ## omega 0.0012745 0.0005752 2.216 0.0267 * ## alpha1 0.0282723 0.0038637 7.317 2.53e-13 *** ## gamma1 0.1100239 0.0649051 1.695 0.0900 . ## beta1 0.9687115 0.0039421 245.735 &lt; 2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Log Likelihood: ## -2731.85 normalized: -0.9326902 ## ## Description: ## Thu Dec 21 22:47:39 2023 by user: Estimate Std. Error t value Pr(&gt;|t|) mu 0.0122646 0.0107289 1.143134 0.2529831 omega 0.0012745 0.0005752 2.215693 0.0267125 alpha1 0.0282723 0.0038637 7.317487 0.0000000 gamma1 0.1100239 0.0649051 1.695150 0.0900469 beta1 0.9687115 0.0039421 245.735369 0.0000000 –&gt; m1と結果類似 8.4.7 Nonsymmetric GARCH モデル Tsay 4.12, pp.227–228 Ngarch(): Estimation of a non-symmertic GARCH, NGARCH(1, 1), model. - Assume normal innovations - Ngarch(rtn) da &lt;- read.table(&quot;d-useu9910.txt&quot;, header = T) fx &lt;- log(da$rate) eu &lt;- diff(fx) * 100 # source(&quot;Ngarch.R&quot;) m1 &lt;- Ngarch(eu) ## ## Estimation results of NGARCH(1,1) model: ## estimates: -0.001094043 0.002366721 0.9618047 0.02118565 0.7309616 ## std.errors: 0.01080893 0.000580552 0.006045803 0.003604727 0.2501548 ## t-ratio: -0.1012166 4.076674 159.0863 5.877186 2.922037 res &lt;- m1$residuals vol &lt;- m1$volatility resi &lt;- res / vol Box.test(resi, lag = 10, type = &#39;Ljung&#39;) ## ## Box-Ljung test ## ## data: resi ## X-squared = 14.776, df = 10, p-value = 0.1404 Box.test(resi^2, lag = 10, type = &#39;Ljung&#39;) ## ## Box-Ljung test ## ## data: resi^2 ## X-squared = 12.943, df = 10, p-value = 0.2269 # Estimation results of NGARCH(1, 1) model: # estimates: -0.001094043 0.002366721 0.9618047 0.02118565 0.7309616 #std.errors: 0.01080893 0.000580552 0.006045803 0.003604727 0.2501548 # t-ratio: -0.1012166 4.076674 159.0863 5.877186 2.922037 # &lt;-- mu, beta0, beta1, beta2, thetaの順 –&gt; muを除いて(5%)有意 特に, レバレッジ効果(theta), t=2.92で(5%)有意 –&gt; 上記TGARCH(1, 1)の結果と同様 # 追加 plot(vol, xlab = &#39;year&#39;, ylab = &#39;volatility&#39;, type = &#39;l&#39;) plot(resi, xlab = &#39;year&#39;, ylab = &#39;residuals&#39;, type = &#39;l&#39;) → 両モデルは, 類似のvolatility推定値 8.4.8 代替的アプリーチ間の比較 Tsay 4.15.1, pp.234–235 (日次データから)月次ボラティリティの推定 “ルートT・ルール”の適用 da &lt;- read.table(&quot;d-sp58010.txt&quot;, header = T) x &lt;- da[, c(1:3, 9)] dim(x) ## [1] 7737 4 方法1: 日次対数リターン使用 (white noiseを仮定) # source(&quot;vold2m.R&quot;) ## Compile the script m1 &lt;- vold2m(x) names(m1) ## [1] &quot;volatility&quot; &quot;ndays&quot; v1 &lt;- m1$volatility cnt &lt;- m1$ndays cnt[1:5] ## [1] 20 20 21 21 21 方法2: 日次対数リターン使用 (MA過程を仮定) m2 &lt;- vold2m(x, ma = 1) # Use MA(1) dependence names(m2) ## [1] &quot;volatility&quot; &quot;ndays&quot; v2 &lt;- m2$volatility 月次データの使用 da1 &lt;- read.table(&quot;m-sp56710.txt&quot;, header = T) sp &lt;- log(da1[, 9]) sp5 &lt;- diff(sp) 方法3: GARCH(1,1)を月次対数リターンに適用 # library(fGarch) m3 &lt;- fGarch::garchFit(~ 1 + garch(1, 1), data = sp5, trace = F) summary(m3) ## ## Title: ## GARCH Modelling ## ## Call: ## fGarch::garchFit(formula = ~1 + garch(1, 1), data = sp5, trace = F) ## ## Mean and Variance Equation: ## data ~ 1 + garch(1, 1) ## &lt;environment: 0x10a6c7070&gt; ## [data = sp5] ## ## Conditional Distribution: ## norm ## ## Coefficient(s): ## mu omega alpha1 beta1 ## 5.3471e-03 9.3263e-05 1.1422e-01 8.4864e-01 ## ## Std. Errors: ## based on Hessian ## ## Error Analysis: ## Estimate Std. Error t value Pr(&gt;|t|) ## mu 5.347e-03 1.742e-03 3.069 0.002149 ** ## omega 9.326e-05 4.859e-05 1.919 0.054942 . ## alpha1 1.142e-01 3.003e-02 3.804 0.000142 *** ## beta1 8.486e-01 3.186e-02 26.634 &lt; 2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Log Likelihood: ## 899.7817 normalized: 1.717141 ## ## Description: ## Thu Dec 21 22:47:57 2023 by user: ## ## ## Standardised Residuals Tests: ## Statistic p-Value ## Jarque-Bera Test R Chi^2 172.5211 0 ## Shapiro-Wilk Test R W 0.9690782 4.639274e-09 ## Ljung-Box Test R Q(10) 11.17329 0.3441774 ## Ljung-Box Test R Q(15) 15.451 0.4194449 ## Ljung-Box Test R Q(20) 17.56469 0.61606 ## Ljung-Box Test R^2 Q(10) 5.466795 0.8578981 ## Ljung-Box Test R^2 Q(15) 7.031543 0.9567685 ## Ljung-Box Test R^2 Q(20) 8.200425 0.9904566 ## LM Arch Test R TR^2 5.62988 0.9335791 ## ## Information Criterion Statistics: ## AIC BIC SIC HQIC ## -3.419014 -3.386484 -3.419129 -3.406275 v3 &lt;- volatility(m3) v3 &lt;- v3[158:524] Estimate Std. Error t value Pr(&gt;|t|) mu 0.0053471 0.0017424 3.068779 0.0021494 omega 0.0000933 0.0000486 1.919333 0.0549423 alpha1 0.1142231 0.0300281 3.803878 0.0001424 beta1 0.8486414 0.0318635 26.633652 0.0000000 3つの方法の比較 v1 &lt;- ts(v1, frequency = 12, start = c(1980, 1)) v2 &lt;- ts(v2, frequency = 12, start = c(1980, 1)) v3 &lt;- ts(v3, frequency = 12, start = c(1980, 1)) max(v1, v2, v3) ## [1] 0.2870294 # # par(mfcol=c(3,1)) # plot(v1, xlab=&#39;year&#39;, ylab=&#39;vol&#39;, type=&#39;l&#39;, ylim=c(0,.3)) # title(main=&#39;(a) No correlations&#39;) # plot(v2, xlab=&#39;year&#39;, ylab=&#39;vol&#39;, type=&#39;l&#39;, ylim=c(0,.3)) # title(main=&#39;(b) Lag-1 correlation&#39;) # plot(v3, xlab=&#39;year&#39;, ylab=&#39;vol&#39;, type=&#39;l&#39;, ylim=c(0,.3)) # title(main=&#39;(c) GARCH(1,1)&#39;) plot(ts.intersect(v1, v2, v3)) "],["varモデル.html", "9 VARモデル 9.1 VARモデル 9.2 VAR解析 9.3 VAR解析 (データ分析例)", " 9 VARモデル 9.1 VARモデル 以下では, MTSパッケージ, varsパッケージを利用 https://www.rdocumentation.org/packages/MTS/versions/1.0 https://www.rdocumentation.org/packages/vars/versions/1.5-3 9.1.1 VAR(\\(p\\))モデルのシミュレーション MTS::VARMAsim()関数 (VARMA(\\(p,q\\))モデルのパス生成) VAR(2)モデル例: \\[Y_{1,t}=0.3 + 0.2 Y_{1,t-1} + 0.3 Y_{2,t-1} - 0.5 Y_{1,t-2} (+0 \\cdot Y_{2,t-2}) + \\epsilon_{1,t}\\] \\[Y_{2,t}=-0.3 -0.6 Y_{1,t-1} + 1.1 Y_{2,t-1} (+0 \\cdot Y_{1,t-2}) - 0.6 Y_{2,t-2} + \\epsilon_{2,t}\\] \\[ \\left[ \\begin{array}{r} \\epsilon_{1,t} \\\\ \\epsilon_{2,t} \\end{array} \\right] \\sim_{\\it i.i.d.} N \\Big(\\left[ \\begin{array}{r} 0 \\\\ 0 \\end{array} \\right], \\left[ \\begin{array}{rr} 4 &amp; 0.8 \\\\ 0.8 &amp; 1 \\end{array} \\right]\\Big) \\] 上記VAR(2)モデルのサンプルパスの生成 library(MTS) Nlen &lt;- 300 Seedv &lt;- 1 set.seed(Seedv) p0 &lt;- c(0.3, -0.3) # Phi0 (定数項) p1 &lt;- matrix(c(0.2, -0.6, 0.3, 1.1), 2, 2) # Phi1 (ラグ1のVAR係数行列) p2 &lt;- matrix(c(-0.5, 0, 0, -0.6), 2, 2) # Phi2 (ラグ2のVAR係数行列) Pmat &lt;- cbind(p1, p2) # VAR係数行列を重ねた行列 Sig &lt;- matrix(c(4, 0.8, 0.8, 1), 2, 2) # イノベーションの分散共分散行列 (正値定符号) Pmat; Sig ## [,1] [,2] [,3] [,4] ## [1,] 0.2 0.3 -0.5 0.0 ## [2,] -0.6 1.1 0.0 -0.6 ## [,1] [,2] ## [1,] 4.0 0.8 ## [2,] 0.8 1.0 ysim &lt;- VARMAsim(Nlen, arlags = 2, cnst = p0, phi = Pmat, sigma = Sig) Yt = ysim$series MTSplot(Yt) # 時系列プロット 生成パス\\(y_t\\)の標本自己共分散行列 対角成分: 各成分の自己相関 \\(\\hat{\\rho}_1(h), \\hat{\\rho}_2(h)\\) 非対角成分: \\(y^1_t,y^2_t\\)間のクロス相関 行列の(1,2)成分: \\(\\hat{\\rho}_{1,2}(h),\\,h\\ge0\\) 行列の(2,1)成分: \\(\\hat{\\rho}_{1,2}(h)\\equiv\\hat{\\rho}_{2,1}(-h), \\,h\\le0\\) acf(Yt) # 標本自己共分散行列 (2x2-行列) # acf()の出力結果の非対角成分の確認 # cor(Y1(t+h), Y2(t)) # h&gt;0 cor(Yt[2:Nlen, 1], Yt[1:(Nlen-1), 2]) # Y1(t+1) vs Y2(t) ## [1] -0.2491788 cor(Yt[3:Nlen, 1], Yt[1:(Nlen-2), 2]) # Y1(t+2) vs Y2(t) ## [1] 0.5855889 # h&lt;0 cor(Yt[1:(Nlen-1), 1], Yt[2:Nlen, 2]) # Y1(t) vs Y2(t+1) ## [1] -0.2269957 cor(Yt[1:(Nlen-2), 1], Yt[3:Nlen, 2]) # y1(t) vs Y2(t+2) ## [1] 0.2156902 9.1.2 VAR(\\(p\\))モデルの次数同定 分析者による最適なラグ次数の選択を支援 - MTS::VARorder()関数 - maxp: ラグ次数の最大値 (デフォルト=13) - 出力: BIC, HQ (Hannan and Quinn情報量規準), M(p), p-value (カイ二乗検定統計量 &amp; p値) VARorder(Yt, maxp = 10, output = T) ## selected order: aic = 2 ## selected order: bic = 2 ## selected order: hq = 2 ## Summary table: ## p AIC BIC HQ M(p) p-value ## [1,] 0 4.2159 4.2159 4.2159 0.0000 0.0000 ## [2,] 1 3.8924 3.9418 3.9122 100.3170 0.0000 ## [3,] 2 1.5169 1.6157 1.5564 683.4158 0.0000 ## [4,] 3 1.5299 1.6781 1.5892 3.8619 0.4250 ## [5,] 4 1.5434 1.7409 1.6224 3.6978 0.4484 ## [6,] 5 1.5325 1.7794 1.6313 10.4626 0.0333 ## [7,] 6 1.5548 1.8511 1.6734 1.2025 0.8777 ## [8,] 7 1.5575 1.9032 1.6958 6.5850 0.1595 ## [9,] 8 1.5799 1.9750 1.7381 1.1470 0.8867 ## [10,] 9 1.5896 2.0340 1.7674 4.6092 0.3298 ## [11,] 10 1.6099 2.1037 1.8075 1.7109 0.7887 - vars::VARselect()関数 - lag.max: ラグ次数の最大値 (デフォルト=10) - type: 確定的な(定数・トレンド)項の種類 &quot;const&quot;(定数項有), &quot;trend&quot;(トレンド有), &quot;both&quot;(定数項・トレンド共有), &quot;none&quot;(両方無) - 出力: AIC, HQ, SC (Schwarz情報量規準), FPE (forecast prediction error) library(vars) vars::VARselect(Yt, lag.max = 10, type = &quot;const&quot;) ## $selection ## AIC(n) HQ(n) SC(n) FPE(n) ## 2 2 2 2 ## ## $criteria ## 1 2 3 4 5 6 7 8 ## AIC(n) 3.907125 1.532547 1.546463 1.560866 1.550885 1.574122 1.577719 1.601096 ## HQ(n) 3.937546 1.583248 1.617444 1.652128 1.662427 1.705945 1.729823 1.773480 ## SC(n) 3.983054 1.659094 1.723629 1.788652 1.829289 1.903146 1.957362 2.031358 ## FPE(n) 49.755778 4.629985 4.694921 4.763133 4.715983 4.827081 4.844789 4.959798 ## 9 10 ## AIC(n) 1.611643 1.632857 ## HQ(n) 1.804307 1.845802 ## SC(n) 2.092524 2.164357 ## FPE(n) 5.012920 5.121076 9.1.3 VAR(\\(p\\))モデルの推定 最小2乗法によるパラメータ推定 - MTS::VAR()関数 - p: ラグ次数 - include.mean: 平均ベクトルを加える(推定する)か (デフォルト=T) - fixed: パラメータに制約を付与する論理値行列. 制約付推定 (主に有意でない推定値の除去) に使用 est.VAR1 &lt;- MTS::VAR(Yt, p = 2, output = T, include.mean = T, fixed = NULL) ## Constant term: ## Estimates: 0.7010694 -0.4390955 ## Std.Error: 0.2935926 0.1458662 ## AR coefficient matrix ## AR( 1 )-matrix ## [,1] [,2] ## [1,] -0.0928 0.0954 ## [2,] -0.0197 -0.0286 ## standard error ## [,1] [,2] ## [1,] 0.0575 0.0462 ## [2,] 0.0286 0.0230 ## AR( 2 )-matrix ## [,1] [,2] ## [1,] 0.105 0.402 ## [2,] -0.616 1.117 ## standard error ## [,1] [,2] ## [1,] 0.0575 0.0465 ## [2,] 0.0285 0.0231 ## ## Residuals cov-mtx: ## [,1] [,2] ## [1,] 4.4990390 0.8786783 ## [2,] 0.8786783 1.1105526 ## ## det(SSE) = 4.224344 ## AIC = 1.494197 ## BIC = 1.592965 ## HQ = 1.533724 - vars::VAR()関数 - p: ラグ次数 - type: 確定的な(定数・トレンド)項の種類 &quot;const&quot;(定数項有), &quot;trend&quot;(トレンド有), &quot;both&quot;(定数項・トレンド共有), &quot;none&quot;(両方無) - season: 中心化済の季節性ダミー変数の追加 (frequencyを表す整数を指定) - exogen: 外生変数の追加 - lag.max: ラグ次数の最大値 (ラグ次数選択において) - in: 情報量規準 (lag.maxを指定している場合) est.VAR2 &lt;- vars::VAR(Yt, p = 2, type = &quot;const&quot;) # 最小2乗法によるパラメータ推定 # type: &quot;const&quot;(定数項有), trend:(&quot;トレンド有&quot;), &quot;both&quot;, &quot;none&quot; summary(est.VAR2) ## ## VAR Estimation Results: ## ========================= ## Endogenous variables: y1, y2 ## Deterministic variables: const ## Sample size: 298 ## Log Likelihood: -1060.376 ## Roots of the characteristic polynomial: ## 0.9308 0.7541 0.7541 0.6891 ## Call: ## vars::VAR(y = Yt, p = 2, type = &quot;const&quot;) ## ## ## Estimation results for equation y1: ## =================================== ## y1 = y1.l1 + y2.l1 + y1.l2 + y2.l2 + const ## ## Estimate Std. Error t value Pr(&gt;|t|) ## y1.l1 -0.09285 0.05751 -1.614 0.1075 ## y2.l1 0.09536 0.04624 2.062 0.0401 * ## y1.l2 0.10498 0.05745 1.827 0.0687 . ## y2.l2 0.40175 0.04645 8.648 3.49e-16 *** ## const 0.70107 0.29359 2.388 0.0176 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## ## Residual standard error: 2.139 on 293 degrees of freedom ## Multiple R-Squared: 0.3636, Adjusted R-squared: 0.3549 ## F-statistic: 41.86 on 4 and 293 DF, p-value: &lt; 2.2e-16 ## ## ## Estimation results for equation y2: ## =================================== ## y2 = y1.l1 + y2.l1 + y1.l2 + y2.l2 + const ## ## Estimate Std. Error t value Pr(&gt;|t|) ## y1.l1 -0.01967 0.02857 -0.688 0.49185 ## y2.l1 -0.02859 0.02297 -1.244 0.21435 ## y1.l2 -0.61604 0.02854 -21.583 &lt; 2e-16 *** ## y2.l2 1.11695 0.02308 48.395 &lt; 2e-16 *** ## const -0.43910 0.14587 -3.010 0.00284 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## ## Residual standard error: 1.063 on 293 degrees of freedom ## Multiple R-Squared: 0.9232, Adjusted R-squared: 0.9222 ## F-statistic: 880.9 on 4 and 293 DF, p-value: &lt; 2.2e-16 ## ## ## ## Covariance matrix of residuals: ## y1 y2 ## y1 4.5758 0.8937 ## y2 0.8937 1.1295 ## ## Correlation matrix of residuals: ## y1 y2 ## y1 1.0000 0.3931 ## y2 0.3931 1.0000 9.1.4 VAR(\\(p\\))モデル予測 - MTS::VARpred()関数 - h: 予測期間の長さ - orig: 予測の起点 (デフォルト=0, 最終のデータ点) - Out.level: 出力の詳細のコントロール (T/F) pred.VAR1 = VARpred(est.VAR1, h = 20, orig = 0, Out.level = F, output = T) ## orig 300 ## Forecasts at origin: 300 ## [,1] [,2] ## [1,] -1.6935 -4.659 ## [2,] -1.5588 -2.224 ## [3,] -1.4159 -4.506 ## [4,] -0.6541 -1.806 ## [5,] -1.3692 -4.535 ## [6,] -0.3984 -1.896 ## [7,] -1.4084 -4.599 ## [8,] -0.4105 -2.153 ## [9,] -1.4616 -4.638 ## [10,] -0.5135 -2.429 ## [11,] -1.4999 -4.640 ## [12,] -0.6321 -2.674 ## [13,] -1.5169 -4.609 ## [14,] -0.7383 -2.875 ## [15,] -1.5155 -4.556 ## [16,] -0.8252 -3.035 ## [17,] -1.5012 -4.491 ## [18,] -0.8939 -3.163 ## [19,] -1.4795 -4.423 ## [20,] -0.9480 -3.266 ## Standard Errors of predictions: ## [,1] [,2] ## [1,] 2.121 1.054 ## [2,] 2.129 1.056 ## [3,] 2.199 1.729 ## [4,] 2.205 1.734 ## [5,] 2.269 2.315 ## [6,] 2.270 2.333 ## [7,] 2.357 2.728 ## [8,] 2.358 2.760 ## [9,] 2.432 3.010 ## [10,] 2.435 3.050 ## [11,] 2.488 3.207 ## [12,] 2.493 3.249 ## [13,] 2.528 3.349 ## [14,] 2.535 3.388 ## [15,] 2.557 3.453 ## [16,] 2.564 3.486 ## [17,] 2.579 3.530 ## [18,] 2.586 3.557 ## [19,] 2.596 3.588 ## [20,] 2.602 3.609 ## Root mean square errors of predictions: ## [,1] [,2] ## [1,] 2.139 1.063 ## [2,] 2.154 1.061 ## [3,] 2.408 2.994 ## [4,] 2.226 1.751 ## [5,] 2.460 3.586 ## [6,] 2.275 2.391 ## [7,] 2.616 3.717 ## [8,] 2.359 2.859 ## [9,] 2.656 3.698 ## [10,] 2.444 3.174 ## [11,] 2.649 3.664 ## [12,] 2.510 3.378 ## [13,] 2.636 3.650 ## [14,] 2.557 3.508 ## [15,] 2.628 3.653 ## [16,] 2.587 3.591 ## [17,] 2.626 3.667 ## [18,] 2.607 3.643 ## [19,] 2.627 3.683 ## [20,] 2.620 3.678 - predict()関数 (vars::VARの出力に対して適用) - n.ahead: 予測期間の長さ - ci: 予測信頼区間 pred.VAR2 = predict(est.VAR2, n.ahead = 10) plot(pred.VAR2) pred.VAR2$fcst ## $y1 ## fcst lower upper CI ## [1,] -1.6935489 -5.886138 2.499040 4.192589 ## [2,] -1.5588289 -5.766916 2.649258 4.208087 ## [3,] -1.4158594 -5.761805 2.930087 4.345946 ## [4,] -0.6541053 -5.012838 3.704628 4.358733 ## [5,] -1.3691744 -5.853357 3.115008 4.484182 ## [6,] -0.3983955 -4.885523 4.088732 4.487127 ## [7,] -1.4084408 -6.067917 3.251035 4.659476 ## [8,] -0.4104564 -5.070912 4.250000 4.660456 ## [9,] -1.4615648 -6.269351 3.346221 4.807786 ## [10,] -0.5135316 -5.326625 4.299561 4.813093 ## ## $y2 ## fcst lower upper CI ## [1,] -4.659151 -6.742164 -2.57613758 2.083013 ## [2,] -2.223532 -4.309952 -0.13711248 2.086420 ## [3,] -4.505606 -7.922276 -1.08893531 3.416670 ## [4,] -1.805711 -5.233098 1.62167648 3.427387 ## [5,] -4.534908 -9.110020 0.04020335 4.575112 ## [6,] -1.896451 -6.507997 2.71509585 4.611547 ## [7,] -4.598833 -9.990735 0.79306982 5.391903 ## [8,] -2.152730 -7.607556 3.30209602 5.454826 ## [9,] -4.638479 -10.588832 1.31187382 5.950353 ## [10,] -2.429372 -8.458542 3.59979824 6.029170 MTSパッケージは, 外生変数有りのVARXモデル, VMAモデル, さらには, 一般のVARMAモデルに対しても, 次数同定, モデル推定, 予測のための関数を用意. 9.2 VAR解析 VARモデルによる変数間の動学的関係性の分析 以下, MTSパッケージ, varsパッケージを利用 https://www.rdocumentation.org/packages/MTS/versions/1.0 https://www.rdocumentation.org/packages/vars/versions/1.5-3 9.2.1 VAR(\\(p\\))モデルの推定(復習) 以下では, シミュレーションデータを使用 MTSパッケージのVARsim関数でパスを生成 varパッケージのVARselect,VAR関数を使って, 次数同定およびモデル推定 \\[Y_{1,t}=1.0 + 0.6 Y_{1,t-1} + 0.1 Y_{2,t-1} + \\epsilon_{1,t}\\] \\[Y_{2,t}=-1.0 +0.5 Y_{1,t-1} + 0.7 Y_{2,t-1} + \\epsilon_{2,t}\\] \\[ \\left[ \\begin{array}{r} \\epsilon_{1,t} \\\\ \\epsilon_{2,t} \\end{array} \\right] \\sim_{\\it i.i.d.} N \\Big(\\left[ \\begin{array}{r} 0 \\\\ 0 \\end{array} \\right], \\left[ \\begin{array}{rr} 4 &amp; 1 \\\\ 1 &amp; 1 \\end{array} \\right]\\Big) \\] library(MTS) Nlen &lt;- 300 Seedv &lt;- 1 set.seed(Seedv) p0 &lt;- c(1, -1) # Phi0 (定数項) Pmat &lt;- matrix(c(0.6, 0.5, 0.1, 0.7), 2, 2) # Phi1 (ラグ1のVAR係数行列) Sig &lt;- matrix(c(4, 1, 1, 1), 2, 2) # イノベーションの分散共分散行列 (正値定符号) Pmat; Sig ## [,1] [,2] ## [1,] 0.6 0.1 ## [2,] 0.5 0.7 ## [,1] [,2] ## [1,] 4 1 ## [2,] 1 1 ysim &lt;- VARMAsim(Nlen, arlags = 1, cnst = p0, phi = Pmat, sigma = Sig) Yt &lt;- ysim$series acf(Yt) # クロス相関 MTSplot(Yt) # 時系列プロット VAR(\\(p\\))モデルの次数同定 vars::VARselect()関数 library(vars) ## Loading required package: MASS ## Loading required package: strucchange ## Loading required package: zoo ## ## Attaching package: &#39;zoo&#39; ## The following objects are masked from &#39;package:base&#39;: ## ## as.Date, as.Date.numeric ## Loading required package: sandwich ## Loading required package: urca ## Loading required package: lmtest ## ## Attaching package: &#39;vars&#39; ## The following object is masked from &#39;package:MTS&#39;: ## ## VAR Yt &lt;- data.frame(Y1 = Yt[,1], Y2 = Yt[,2]) VARselect(Yt, lag.max = 5, type = &quot;const&quot;) ## $selection ## AIC(n) HQ(n) SC(n) FPE(n) ## 1 1 1 1 ## ## $criteria ## 1 2 3 4 5 ## AIC(n) 1.417189 1.432965 1.454790 1.471126 1.460469 ## HQ(n) 1.447216 1.483011 1.524855 1.561208 1.570570 ## SC(n) 1.492178 1.557947 1.629765 1.696094 1.735430 ## FPE(n) 4.125512 4.191134 4.283662 4.354299 4.308277 VAR(\\(p\\))モデルの推定 vars::VAR()関数 est_VAR1 &lt;- vars::VAR(Yt, p = 1, type = &quot;const&quot;) summary(est_VAR1) ## ## VAR Estimation Results: ## ========================= ## Endogenous variables: Y1, Y2 ## Deterministic variables: const ## Sample size: 299 ## Log Likelihood: -1051.693 ## Roots of the characteristic polynomial: ## 0.8123 0.3886 ## Call: ## vars::VAR(y = Yt, p = 1, type = &quot;const&quot;) ## ## ## Estimation results for equation Y1: ## =================================== ## Y1 = Y1.l1 + Y2.l1 + const ## ## Estimate Std. Error t value Pr(&gt;|t|) ## Y1.l1 0.50728 0.06004 8.449 1.35e-15 *** ## Y2.l1 0.07759 0.04514 1.719 0.0866 . ## const 1.08864 0.17861 6.095 3.40e-09 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## ## Residual standard error: 2.133 on 296 degrees of freedom ## Multiple R-Squared: 0.3322, Adjusted R-squared: 0.3277 ## F-statistic: 73.64 on 2 and 296 DF, p-value: &lt; 2.2e-16 ## ## ## Estimation results for equation Y2: ## =================================== ## Y2 = Y1.l1 + Y2.l1 + const ## ## Estimate Std. Error t value Pr(&gt;|t|) ## Y1.l1 0.46669 0.03001 15.55 &lt;2e-16 *** ## Y2.l1 0.69357 0.02256 30.74 &lt;2e-16 *** ## const -0.97716 0.08928 -10.95 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## ## Residual standard error: 1.066 on 296 degrees of freedom ## Multiple R-Squared: 0.9054, Adjusted R-squared: 0.9048 ## F-statistic: 1417 on 2 and 296 DF, p-value: &lt; 2.2e-16 ## ## ## ## Covariance matrix of residuals: ## Y1 Y2 ## Y1 4.551 1.096 ## Y2 1.096 1.137 ## ## Correlation matrix of residuals: ## Y1 Y2 ## Y1 1.000 0.482 ## Y2 0.482 1.000 上で推定されたVAR(1)モデルを使用して, VARモデルによる変数間の動学的関係性の分析を行う. 9.2.2 グレンジャーの因果性検定 - vars::causality()関数 - x: VAR()関数により生成された&#39;varest&#39;クラスのオブジェクト - cause: cause変数 (デフォルトは入力x$yの第1列の変数) - vcov.: 推定係数の共分散行列の指定 - boot: 棄却点を計算する際にwildブートストラップを使用するか否か(T/F) - boot.runs: boot=TRUEの場合のブートストラップの反復数 vars::causality(est_VAR1, cause = &quot;Y1&quot;) ## $Granger ## ## Granger causality H0: Y1 do not Granger-cause Y2 ## ## data: VAR object est_VAR1 ## F-Test = 241.8, df1 = 1, df2 = 592, p-value &lt; 2.2e-16 ## ## ## $Instant ## ## H0: No instantaneous causality between: Y1 and Y2 ## ## data: VAR object est_VAR1 ## Chi-squared = 56.374, df = 1, p-value = 5.995e-14 # VAR(1)の推定結果var1を用い, Y1に関するGranger因果性検定 vars::causality(est_VAR1, cause = &quot;Y2&quot;) ## $Granger ## ## Granger causality H0: Y2 do not Granger-cause Y1 ## ## data: VAR object est_VAR1 ## F-Test = 2.9555, df1 = 1, df2 = 592, p-value = 0.08611 ## ## ## $Instant ## ## H0: No instantaneous causality between: Y2 and Y1 ## ## data: VAR object est_VAR1 ## Chi-squared = 56.374, df = 1, p-value = 5.995e-14 # 同, Y2に関するGranger因果性検定 9.2.3 インパルス応答 直交インパルス応答 - vars::irf()関数 - x: VAR()関数により生成された&#39;varest&#39;クラスのオブジェクト等 - impulse: インパルス変数 (デフォルト=全変数) - response: 応答変数 (デフォルト=全変数) - n.ahead: 将来区間の長さ - ortho: 直交インパルス応答か (デフォルト=T) - cumulative: 累積インパルス応答か (デフォルト=F) - boot: インパルス応答係数のブートストラップ誤差バンド計算の有無 (T/F) - ci: bootstrap誤差バンドの信頼区間 - runs: bootstrap回数 # vars::irf()関数 (ortho = T (デフォルト)) ip1 &lt;- vars::irf(est_VAR1, impulse = c(&quot;Y1&quot;), response = c(&quot;Y1&quot;, &quot;Y2&quot;), n.ahead = 5, boot = T) ip2 &lt;- vars::irf(est_VAR1, impulse = c(&quot;Y2&quot;), response = c(&quot;Y1&quot;, &quot;Y2&quot;), n.ahead = 5, boot = T) plot(ip1) plot(ip2) # 破線は信頼区間 # ip1; ip2 非直交インパルス応答 # vars::irf()関数 (ortho = F) ip1 &lt;- vars::irf(est_VAR1, impulse = c(&quot;Y1&quot;), response = c(&quot;Y1&quot;, &quot;Y2&quot;), ortho = F, n.ahead = 5, boot = T) ip2 &lt;- vars::irf(est_VAR1, impulse = c(&quot;Y2&quot;), response = c(&quot;Y1&quot;, &quot;Y2&quot;), ortho = F, n.ahead = 5, boot = T) plot(ip1) plot(ip2) # ip1; ip2 累積インパルス応答 ip1_cum &lt;- vars::irf(est_VAR1, impulse = c(&quot;Y1&quot;), response = c(&quot;Y1&quot;,&quot;Y2&quot;), n.ahead = 5, boot = TRUE, cumulative=T) ip2_cum &lt;- vars::irf(est_VAR1, impulse = c(&quot;Y2&quot;), response = c(&quot;Y2&quot;,&quot;Y1&quot;), n.ahead = 5, boot = TRUE, cumulative=T) plot(ip1_cum) plot(ip2_cum) 9.2.4 予測誤差分散分解 (forecast error variance decomposition) - vars::fevd()関数 - x: VAR()関数により生成された&#39;varest&#39;クラスのオブジェクト等 - n.ahead: 予測区間の長さ 直交化インパルス応答関数を使い, 第\\(j(=1,2)\\)変数の第\\(k(=1,2)\\)変数の\\(h(=1,\\ldots,10)\\)先予測誤差分散への寄与を評価 res_fevd &lt;- vars::fevd(est_VAR1, n.ahead = 10) # 10期先まで評価する plot(res_fevd) 9.3 VAR解析 (データ分析例) VARモデルによる変数間の動学的関係性の分析 事例1: ソフトバンク(9434) vs ソフトバンクグループ(9984) ソフトバンク(9434): 上場日 2018年12月19日 親会社ソフトバンクG (9984) 保有比率(%): 66.49 (2019.03), 67.13 (2020.03), 40.86 (2021.03), 40.68 (2022.03), 40.47 (2023.03) cf. https://www.buffett-code.com/company/9434/mainshareholder データをYahoo!ファイナンスより入手 library(quantmod) ## Loading required package: xts ## Loading required package: zoo ## ## Attaching package: &#39;zoo&#39; ## The following objects are masked from &#39;package:base&#39;: ## ## as.Date, as.Date.numeric ## Loading required package: TTR ## Registered S3 method overwritten by &#39;quantmod&#39;: ## method from ## as.zoo.data.frame zoo s9984 &lt;- getSymbols(&#39;9984.T&#39;, from = &#39;2018-12-19&#39;, auto.assign = FALSE) s9434 &lt;- getSymbols(&#39;9434.T&#39;, from = &#39;2018-12-19&#39;, auto.assign = FALSE) s9984ret &lt;- diff(log(s9984$`9984.T.Adjusted`))[-1] s9434ret &lt;- diff(log(s9434$`9434.T.Adjusted`))[-1] sb &lt;- merge.xts(s9984ret, s9434ret, join = &quot;inner&quot;) colnames(sb) &lt;- c(&quot;s9984&quot;, &quot;s9434&quot;) 各変数の単位根検定 library(fUnitRoots) #unitrootTest(s9984, type = &quot;c&quot;, lags = 1) # type: &quot;nc&quot;, &quot;c&quot;, &quot;ct&quot; unitrootTest(s9984ret, type = &quot;c&quot;, lags = 1) ## ## Title: ## Augmented Dickey-Fuller Test ## ## Test Results: ## PARAMETER: ## Lag Order: 1 ## STATISTIC: ## DF: -23.7902 ## P VALUE: ## t: &lt; 2.2e-16 ## n: 0.004413 ## ## Description: ## Thu Dec 21 22:48:04 2023 by user: unitrootTest(s9434ret, type = &quot;c&quot;, lags = 1) ## ## Title: ## Augmented Dickey-Fuller Test ## ## Test Results: ## PARAMETER: ## Lag Order: 1 ## STATISTIC: ## DF: -26.6918 ## P VALUE: ## t: &lt; 2.2e-16 ## n: 0.002129 ## ## Description: ## Thu Dec 21 22:48:04 2023 by user: –&gt; 帰無仮説(\\(\\phi_1 = 1\\))を棄却 (単位根なし) 標本自己共分散行列 acf(sb) VARモデルの推定 以下, パッケージvarsを利用 VAR(p)モデルの次数の決定 library(vars) ## Loading required package: MASS ## Loading required package: strucchange ## Loading required package: sandwich ## Loading required package: urca ## ## Attaching package: &#39;urca&#39; ## The following objects are masked from &#39;package:fUnitRoots&#39;: ## ## punitroot, qunitroot, unitrootTable ## Loading required package: lmtest vars::VARselect(sb, lag.max = 5, type = &quot;const&quot;) # &quot;const&quot;(定数項有), trend:(&quot;トレンド有&quot;), &quot;both&quot;, &quot;none&quot; ## $selection ## AIC(n) HQ(n) SC(n) FPE(n) ## 3 1 1 3 ## ## $criteria ## 1 2 3 4 5 ## AIC(n) -1.643053e+01 -1.643284e+01 -1.643585e+01 -1.643141e+01 -1.642647e+01 ## HQ(n) -1.642104e+01 -1.641703e+01 -1.641372e+01 -1.640295e+01 -1.639169e+01 ## SC(n) -1.640533e+01 -1.639085e+01 -1.637706e+01 -1.635582e+01 -1.633408e+01 ## FPE(n) 7.316636e-08 7.299743e-08 7.277807e-08 7.310216e-08 7.346430e-08 –&gt; AIC, FPEでは3, HQ, SCでは1が最適 VAR(1)モデルの推定 (OLS推定) var1 &lt;- vars::VAR(sb, p = 1, type = &quot;const&quot;) summary(var1) ## ## VAR Estimation Results: ## ========================= ## Endogenous variables: s9984, s9434 ## Deterministic variables: const ## Sample size: 1219 ## Log Likelihood: 6551.186 ## Roots of the characteristic polynomial: ## 0.05631 0.03926 ## Call: ## vars::VAR(y = sb, p = 1, type = &quot;const&quot;) ## ## ## Estimation results for equation s9984: ## ====================================== ## s9984 = s9984.l1 + s9434.l1 + const ## ## Estimate Std. Error t value Pr(&gt;|t|) ## s9984.l1 0.0444823 0.0290643 1.530 0.126158 ## s9434.l1 -0.2681082 0.0783560 -3.422 0.000643 *** ## const 0.0004995 0.0007821 0.639 0.523158 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## ## Residual standard error: 0.02728 on 1216 degrees of freedom ## Multiple R-Squared: 0.01015, Adjusted R-squared: 0.008524 ## F-statistic: 6.236 on 2 and 1216 DF, p-value: 0.002021 ## ## ## Estimation results for equation s9434: ## ====================================== ## s9434 = s9984.l1 + s9434.l1 + const ## ## Estimate Std. Error t value Pr(&gt;|t|) ## s9984.l1 -0.0036948 0.0108395 -0.341 0.7333 ## s9434.l1 -0.0274348 0.0292229 -0.939 0.3480 ## const 0.0004829 0.0002917 1.655 0.0981 . ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## ## Residual standard error: 0.01017 on 1216 degrees of freedom ## Multiple R-Squared: 0.0009603, Adjusted R-squared: -0.0006828 ## F-statistic: 0.5844 on 2 and 1216 DF, p-value: 0.5576 ## ## ## ## Covariance matrix of residuals: ## s9984 s9434 ## s9984 7.440e-04 5.482e-05 ## s9434 5.482e-05 1.035e-04 ## ## Correlation matrix of residuals: ## s9984 s9434 ## s9984 1.0000 0.1976 ## s9434 0.1976 1.0000 –&gt; 2式とも, 9984_{t-1}の係数, 有意でない. 一方, 9434_{t-1} → 9984_tの係数, 有意 インパルス応答 直交化インパルス応答 # s9434 --&gt; 将来のs9434, s9984の変動を調べる ip &lt;- vars::irf(var1, impulse = c(&quot;s9434&quot;), response = c(&quot;s9434&quot;, &quot;s9984&quot;), n.ahead = 5, boot = TRUE) #ip &lt;- vars::irf(var1, impulse = c(&quot;s9984&quot;), response = c(&quot;s9984&quot;, &quot;s9434&quot;), # n.ahead = 5, boot = TRUE) # ortho = T (デフォルト): 直交化インパルス応答; ortho = F: 非直交化インパルス応答 # boot = T: ブートストラップ法により, 信頼区間計算 # cumulative = T: 累積インパルス応答. デフォルトはF. plot(ip) # 破線は信頼区間 ip ## ## Impulse response coefficients ## $s9434 ## s9984 s9434 ## [1,] 0.000000e+00 9.972441e-03 ## [2,] -2.673693e-03 -2.735917e-04 ## [3,] -4.557996e-05 1.738477e-05 ## [4,] -6.688503e-06 -3.085372e-07 ## [5,] -2.147990e-07 3.317754e-08 ## [6,] -1.844993e-08 -1.165725e-10 ## ## ## Lower Band, CI= 0.95 ## $s9434 ## s9984 s9434 ## [1,] 0.000000e+00 9.177181e-03 ## [2,] -4.205260e-03 -8.888821e-04 ## [3,] -2.521648e-04 -3.199214e-05 ## [4,] -4.510445e-05 -9.468737e-06 ## [5,] -2.382412e-06 -3.119641e-08 ## [6,] -5.707879e-07 -1.123451e-07 ## ## ## Upper Band, CI= 0.95 ## $s9434 ## s9984 s9434 ## [1,] 0.000000e+00 1.072020e-02 ## [2,] -1.318749e-03 2.540259e-04 ## [3,] 2.012880e-04 1.100048e-04 ## [4,] 2.140303e-06 3.235183e-06 ## [5,] 2.168235e-06 1.387381e-06 ## [6,] 1.039391e-08 4.344533e-08 ip_2 &lt;- vars::irf(var1, impulse = c(&quot;s9984&quot;), response = c(&quot;s9984&quot;, &quot;s9434&quot;), n.ahead = 5, boot = TRUE) plot(ip_2) ip_2 ## ## Impulse response coefficients ## $s9984 ## s9984 s9434 ## [1,] 2.727697e-02 2.009806e-03 ## [2,] 6.744982e-04 -1.559224e-04 ## [3,] 7.180732e-05 1.785539e-06 ## [4,] 2.715441e-06 -3.143018e-07 ## [5,] 2.050561e-07 -1.410294e-09 ## [6,] 9.499487e-09 -7.189564e-10 ## ## ## Lower Band, CI= 0.95 ## $s9984 ## s9984 s9434 ## [1,] 2.525930e-02 1.214171e-03 ## [2,] -8.048462e-04 -6.473644e-04 ## [3,] -5.635468e-05 -1.732487e-05 ## [4,] -5.645969e-06 -6.292207e-06 ## [5,] -7.161346e-08 -3.059057e-07 ## [6,] -8.326693e-08 -1.055196e-07 ## ## ## Upper Band, CI= 0.95 ## $s9984 ## s9984 s9434 ## [1,] 2.898089e-02 2.952165e-03 ## [2,] 2.336642e-03 4.128241e-04 ## [3,] 3.531654e-04 3.560512e-05 ## [4,] 3.263530e-05 8.089438e-07 ## [5,] 5.223653e-06 4.936534e-07 ## [6,] 4.802351e-07 7.489385e-09 非直交化インパルス応答 ip_3 &lt;- vars::irf(var1, impulse = c(&quot;s9434&quot;), response = c(&quot;s9434&quot;, &quot;s9984&quot;), ortho = F, n.ahead = 5, boot = TRUE) plot(ip_3) ip_3 ## ## Impulse response coefficients ## $s9434 ## s9984 s9434 ## [1,] 0.000000e+00 1.000000e+00 ## [2,] -2.681082e-01 -2.743478e-02 ## [3,] -4.570592e-03 1.743282e-03 ## [4,] -6.706987e-04 -3.093898e-05 ## [5,] -2.153926e-05 3.326923e-06 ## [6,] -1.850092e-06 -1.168947e-08 ## ## ## Lower Band, CI= 0.95 ## $s9434 ## s9984 s9434 ## [1,] 0.0000000000 1.000000e+00 ## [2,] -0.4328842468 -8.030885e-02 ## [3,] -0.0295216934 -4.745515e-03 ## [4,] -0.0051470691 -1.009429e-03 ## [5,] -0.0003754103 -7.587480e-06 ## [6,] -0.0000714332 -1.169252e-05 ## ## ## Upper Band, CI= 0.95 ## $s9434 ## s9984 s9434 ## [1,] 0.000000e+00 1.000000e+00 ## [2,] -9.527659e-02 2.602563e-02 ## [3,] 1.655887e-02 1.088928e-02 ## [4,] 7.119054e-04 4.564396e-04 ## [5,] 2.152073e-04 1.444814e-04 ## [6,] 3.915594e-06 6.971783e-06 累積インパルス応答 ip_cum &lt;- vars::irf(var1, impulse = c(&quot;s9434&quot;), response = c(&quot;s9434&quot;, &quot;s9984&quot;), n.ahead = 5, boot = TRUE, cumulative = T) plot(ip_cum) Grangerの因果性検定 vars::causality(var1, cause = &quot;s9434&quot;) # VAR(1)の推定結果var1を用い, 9434をcauseとするGranger因果性検定 ## $Granger ## ## Granger causality H0: s9434 do not Granger-cause s9984 ## ## data: VAR object var1 ## F-Test = 11.708, df1 = 1, df2 = 2432, p-value = 0.0006327 ## ## ## $Instant ## ## H0: No instantaneous causality between: s9434 and s9984 ## ## data: VAR object var1 ## Chi-squared = 45.792, df = 1, p-value = 1.315e-11 –&gt; 帰無仮説(因果性なし)棄却 → 9434をcauseとするGranger因果性の存在を示唆 vars::causality(var1, cause = &quot;s9984&quot;) ## $Granger ## ## Granger causality H0: s9984 do not Granger-cause s9434 ## ## data: VAR object var1 ## F-Test = 0.11619, df1 = 1, df2 = 2432, p-value = 0.7332 ## ## ## $Instant ## ## H0: No instantaneous causality between: s9984 and s9434 ## ## data: VAR object var1 ## Chi-squared = 45.792, df = 1, p-value = 1.315e-11 –&gt; 帰無仮説(因果性なし)棄却できず → 9984をcauseとするGranger因果性存在せず 一方、Grangerの瞬時因果性, 9984, 9434, いずれの方向も棄却できず → 存在を示唆 事例2: 米英日3株式市場 (S&amp;P500, FTSE, 日経平均) データをYahoo!ファイナンスより入手 library(vars) gspc &lt;- getSymbols(&#39;^GSPC&#39;, periodicity = &quot;monthly&quot;, from = &#39;1999-12-31&#39;, auto.assign = FALSE) ftse &lt;- getSymbols(&#39;^FTSE&#39;, periodicity = &quot;monthly&quot;, from = &#39;1999-12-31&#39;, auto.assign = FALSE) n225 &lt;- getSymbols(&#39;^N225&#39;, periodicity = &quot;monthly&quot;, from = &#39;1999-12-31&#39;, auto.assign = FALSE) us &lt;- diff(log(gspc$GSPC.Adjusted))[-1] uk &lt;- diff(log(ftse$FTSE.Adjusted))[-1] jp &lt;- diff(log(n225$N225.Adjusted))[-1] mkt &lt;- cbind(us, uk, jp) idx &lt;- complete.cases(mkt) # 欠損値(NA)のあるレコードの除去 mkt &lt;- mkt[idx] colnames(mkt) &lt;- c(&quot;us&quot;, &quot;uk&quot;, &quot;jp&quot;) plot(cumsum(mkt), type = &quot;l&quot;, col = c(&quot;black&quot;, &quot;blue&quot;, &quot;red&quot;), main = &quot;Market indices: S&amp;P500 (black), FTSE (blue), NK225 (red)&quot;) VARモデルの推定 以下, 引き続きパッケージvarsを利用 3変量VAR(2)モデルを仮定した場合の推定 usukjp &lt;- data.frame(mkt$us, mkt$uk, mkt$jp) head(usukjp, 5) ## us uk jp ## 2000-02-01 -0.02031300 -0.005743495 0.02125795 ## 2000-03-01 0.09232375 0.048174179 0.01875144 ## 2000-04-01 -0.03127991 -0.033078382 -0.12354810 ## 2000-05-01 -0.02215875 0.005044624 -0.09575560 ## 2000-06-01 0.02365163 -0.007370510 0.06395117 var2usukjp &lt;- vars::VAR(usukjp, p = 2, type = &quot;const&quot;) #summary(var2usukjp) # 係数推定値 (値のみ） coef(var2usukjp) ## $us ## Estimate Std. Error t value Pr(&gt;|t|) ## us.l1 -0.098366211 0.107245232 -0.9172082 0.35982854 ## uk.l1 0.052154361 0.114076391 0.4571880 0.64789296 ## jp.l1 0.106098331 0.065362581 1.6232274 0.10567417 ## us.l2 -0.134442286 0.108105768 -1.2436181 0.21468784 ## uk.l2 0.024561762 0.114609346 0.2143085 0.83046357 ## jp.l2 0.048196279 0.065157097 0.7396935 0.46011017 ## const 0.004629363 0.002708948 1.7089157 0.08858263 ## ## $uk ## Estimate Std. Error t value Pr(&gt;|t|) ## us.l1 0.089803762 0.093616627 0.9592715 0.33825552 ## uk.l1 -0.146331204 0.099579690 -1.4694885 0.14283109 ## jp.l1 0.072566294 0.057056376 1.2718350 0.20449468 ## us.l2 -0.159211069 0.094367806 -1.6871333 0.09269939 ## uk.l2 0.100300932 0.100044917 1.0025590 0.31694552 ## jp.l2 -0.008197911 0.056877005 -0.1441340 0.88549907 ## const 0.000733407 0.002364698 0.3101484 0.75668052 ## ## $jp ## Estimate Std. Error t value Pr(&gt;|t|) ## us.l1 -0.040003349 0.131655833 -0.3038479 0.7614711 ## uk.l1 0.125197816 0.140041865 0.8940028 0.3720937 ## jp.l1 0.073726787 0.080240071 0.9188275 0.3589823 ## us.l2 -0.205453556 0.132712239 -1.5481131 0.1227327 ## uk.l2 0.087750268 0.140696128 0.6236864 0.5333449 ## jp.l2 0.079655295 0.079987816 0.9958429 0.3201925 ## const 0.002344731 0.003325544 0.7050670 0.4813589 # 係数推定値の行列表示 (t値や標準誤差は非表示) vars::Acoef(var2usukjp) # as a list of matrices ## [[1]] ## us.l1 uk.l1 jp.l1 ## us -0.09836621 0.05215436 0.10609833 ## uk 0.08980376 -0.14633120 0.07256629 ## jp -0.04000335 0.12519782 0.07372679 ## ## [[2]] ## us.l2 uk.l2 jp.l2 ## us -0.1344423 0.02456176 0.048196279 ## uk -0.1592111 0.10030093 -0.008197911 ## jp -0.2054536 0.08775027 0.079655295 vars::Bcoef(var2usukjp) # as a matrix ## us.l1 uk.l1 jp.l1 us.l2 uk.l2 jp.l2 ## us -0.09836621 0.05215436 0.10609833 -0.1344423 0.02456176 0.048196279 ## uk 0.08980376 -0.14633120 0.07256629 -0.1592111 0.10030093 -0.008197911 ## jp -0.04000335 0.12519782 0.07372679 -0.2054536 0.08775027 0.079655295 ## const ## us 0.004629363 ## uk 0.000733407 ## jp 0.002344731 次数\\(p\\)を選択する場合 VAR()関数によって, 情報量規準により最適な次数を選択 最大次数lag.max と採用する情報量規準icを指定 varusukjp &lt;- vars::VAR(usukjp, type = &quot;const&quot;, lag.max = 5, ic = &quot;AIC&quot;) summary(varusukjp) ## ## VAR Estimation Results: ## ========================= ## Endogenous variables: us, uk, jp ## Deterministic variables: const ## Sample size: 286 ## Log Likelihood: 1661.778 ## Roots of the characteristic polynomial: ## 0.2008 0.1097 0.1021 ## Call: ## vars::VAR(y = usukjp, type = &quot;const&quot;, lag.max = 5, ic = &quot;AIC&quot;) ## ## ## Estimation results for equation us: ## =================================== ## us = us.l1 + uk.l1 + jp.l1 + const ## ## Estimate Std. Error t value Pr(&gt;|t|) ## us.l1 -0.091179 0.105869 -0.861 0.3898 ## uk.l1 0.043224 0.111943 0.386 0.6997 ## jp.l1 0.104531 0.065042 1.607 0.1091 ## const 0.004473 0.002682 1.668 0.0965 . ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## ## Residual standard error: 0.04496 on 282 degrees of freedom ## Multiple R-Squared: 0.01087, Adjusted R-squared: 0.0003438 ## F-statistic: 1.033 on 3 and 282 DF, p-value: 0.3785 ## ## ## Estimation results for equation uk: ## =================================== ## uk = us.l1 + uk.l1 + jp.l1 + const ## ## Estimate Std. Error t value Pr(&gt;|t|) ## us.l1 0.1067524 0.0924070 1.155 0.2490 ## uk.l1 -0.1706150 0.0977090 -1.746 0.0819 . ## jp.l1 0.0691963 0.0567711 1.219 0.2239 ## const 0.0002765 0.0023413 0.118 0.9061 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## ## Residual standard error: 0.03924 on 282 degrees of freedom ## Multiple R-Squared: 0.01669, Adjusted R-squared: 0.006228 ## F-statistic: 1.595 on 3 and 282 DF, p-value: 0.1907 ## ## ## Estimation results for equation jp: ## =================================== ## jp = us.l1 + uk.l1 + jp.l1 + const ## ## Estimate Std. Error t value Pr(&gt;|t|) ## us.l1 -0.010457 0.129260 -0.081 0.936 ## uk.l1 0.098224 0.136677 0.719 0.473 ## jp.l1 0.068652 0.079412 0.864 0.388 ## const 0.001684 0.003275 0.514 0.608 ## ## ## Residual standard error: 0.05489 on 282 degrees of freedom ## Multiple R-Squared: 0.01362, Adjusted R-squared: 0.003126 ## F-statistic: 1.298 on 3 and 282 DF, p-value: 0.2754 ## ## ## ## Covariance matrix of residuals: ## us uk jp ## us 0.002021 0.001409 0.001630 ## uk 0.001409 0.001540 0.001267 ## jp 0.001630 0.001267 0.003013 ## ## Correlation matrix of residuals: ## us uk jp ## us 1.0000 0.7988 0.6605 ## uk 0.7988 1.0000 0.5881 ## jp 0.6605 0.5881 1.0000 # ic = AIC, HQ, SC, FPE # HQ: Hannan-Quinn 情報量規準, FPE: forecast prediction error 規準 –&gt; \\(p=1\\)を選択 推定されたVARモデルによる予測 predict(var2usukjp, n.ahead = 10, ci = 0.95) # 95%区間予測を 10期先まで ## $us ## fcst lower upper CI ## [1,] -0.002850571 -0.09067302 0.08497188 0.08782245 ## [2,] 0.001145018 -0.08718551 0.08947554 0.08833052 ## [3,] 0.004255887 -0.08437414 0.09288591 0.08863002 ## [4,] 0.004125680 -0.08450590 0.09275726 0.08863158 ## [5,] 0.003980478 -0.08465179 0.09261274 0.08863226 ## [6,] 0.004003315 -0.08462895 0.09263558 0.08863227 ## [7,] 0.004009239 -0.08462303 0.09264151 0.08863227 ## [8,] 0.004008362 -0.08462391 0.09264064 0.08863227 ## [9,] 0.004006993 -0.08462528 0.09263927 0.08863227 ## [10,] 0.004007225 -0.08462505 0.09263950 0.08863227 ## ## $uk ## fcst lower upper CI ## [1,] -0.0138577396 -0.09051981 0.06280433 0.07666207 ## [2,] 0.0011811761 -0.07604333 0.07840568 0.07722450 ## [3,] -0.0003778686 -0.07828125 0.07752551 0.07790338 ## [4,] 0.0012238198 -0.07669747 0.07914511 0.07792129 ## [5,] 0.0003394923 -0.07758835 0.07826733 0.07792784 ## [6,] 0.0006130563 -0.07731547 0.07854158 0.07792852 ## [7,] 0.0005179819 -0.07741064 0.07844660 0.07792862 ## [8,] 0.0005533697 -0.07737526 0.07848200 0.07792863 ## [9,] 0.0005387375 -0.07738990 0.07846737 0.07792863 ## [10,] 0.0005438698 -0.07738476 0.07847250 0.07792863 ## ## $jp ## fcst lower upper CI ## [1,] -0.003515401 -0.1113275 0.1042967 0.1078121 ## [2,] -0.001846269 -0.1104276 0.1067351 0.1085814 ## [3,] 0.001400307 -0.1076724 0.1104730 0.1090727 ## [4,] 0.001951749 -0.1071236 0.1110271 0.1090754 ## [5,] 0.001680803 -0.1073955 0.1107571 0.1090763 ## [6,] 0.001767145 -0.1073092 0.1108435 0.1090764 ## [7,] 0.001737497 -0.1073389 0.1108139 0.1090764 ## [8,] 0.001749362 -0.1073270 0.1108258 0.1090764 ## [9,] 0.001742780 -0.1073336 0.1108192 0.1090764 ## [10,] 0.001744748 -0.1073317 0.1108211 0.1090764 Granger因果性の検定 日本をcauseとする因果性 var3usukjp &lt;- vars::VAR(usukjp, p = 3, type = &quot;const&quot;) head(var3usukjp$y) # ## us uk jp ## 2000-02-01 -0.02031300 -0.005743495 0.02125795 ## 2000-03-01 0.09232375 0.048174179 0.01875144 ## 2000-04-01 -0.03127991 -0.033078382 -0.12354810 ## 2000-05-01 -0.02215875 0.005044624 -0.09575560 ## 2000-06-01 0.02365163 -0.007370510 0.06395117 ## 2000-07-01 -0.01647627 0.008297825 -0.10169496 vars::causality(var3usukjp, cause = &quot;jp&quot;) # jp --&gt; us, uk ## $Granger ## ## Granger causality H0: jp do not Granger-cause us uk ## ## data: VAR object var3usukjp ## F-Test = 0.77537, df1 = 6, df2 = 822, p-value = 0.5894 ## ## ## $Instant ## ## H0: No instantaneous causality between: jp and us uk ## ## data: VAR object var3usukjp ## Chi-squared = 87.237, df = 2, p-value &lt; 2.2e-16 –&gt; Gragnerの意味での因果性なし. 同時因果性あり 日英をcauseとする因果性 vars::causality(var3usukjp, cause = c(&quot;jp&quot;, &quot;uk&quot;)) # jp, uk --&gt; us ## $Granger ## ## Granger causality H0: uk jp do not Granger-cause us ## ## data: VAR object var3usukjp ## F-Test = 0.63007, df1 = 6, df2 = 822, p-value = 0.7063 ## ## ## $Instant ## ## H0: No instantaneous causality between: uk jp and us ## ## data: VAR object var3usukjp ## Chi-squared = 116.26, df = 2, p-value &lt; 2.2e-16 –&gt; Grangerの意味での因果性なし. 同時因果性あり - vars::causality() - causeを指定なし (デフォルト) では, 第1列の変数がcause - K変量VARモデルに対する因果性検定 (対応する係数にゼロ制約を課す) - ← 特定の2変量のみの因果性を調べる検定ではない 予測誤差分散分解 (forecast error variance decomposition) 直交化インパルス応答関数を使い, 第j変数の第k変数のh先予測誤差分散への寄与 # library(vars) var3_fevd &lt;- vars::fevd(var3usukjp, n.ahead = 10) # 10期先まで評価する plot(var3_fevd) varmkt &lt;- vars::VAR(mkt, p = 3, type = &quot;const&quot;) varmkt_fevd &lt;- vars::fevd(varmkt, n.ahead = 10) # 10期先まで評価する plot(varmkt_fevd) 変数の順番の影響の確認 分散分解 (変数の順序入れ替え) usjpuk &lt;- data.frame(mkt$us, mkt$jp, mkt$uk) cov(usukjp) ## us uk jp ## us 0.002017123 0.001398409 0.001627248 ## uk 0.001398409 0.001544378 0.001256618 ## jp 0.001627248 0.001256618 0.003013484 cov(usjpuk) ## us jp uk ## us 0.002017123 0.001627248 0.001398409 ## jp 0.001627248 0.003013484 0.001256618 ## uk 0.001398409 0.001256618 0.001544378 var3usjpuk &lt;- vars::VAR(usjpuk, p = 3, type = &quot;const&quot;) var3_fevd_2 &lt;- vars::fevd(var3usjpuk, n.ahead = 10) # 10期先まで評価する plot(var3_fevd_2) 直交インパルス応答 米国 → 他市場 (米国, 英国, 日本)の順序 vs (米国, 日本, 英国)の順序 # (us, uk, jp) ip1 &lt;- vars::irf(var3usukjp, impulse = c(&quot;us&quot;), n.ahead = 5, boot = TRUE) # ortho = T (デフォルト): 直交化インパルス応答; ortho = F: 非直交化インパルス応答 # boot = T: ブートストラップ法により, 信頼区間計算 # cumulative = T: 累積インパルス応答. デフォルトはF. plot(ip1) # # (us, jp, uk) ip2 &lt;- vars::irf(var3usjpuk, impulse = c(&quot;us&quot;), n.ahead = 5, boot = TRUE) plot(ip2) 日本 → 他市場 # (us, uk, jp) #ip3 &lt;- vars::irf(var3usukjp, impulse = c(&quot;uk&quot;), n.ahead = 5, boot = TRUE) ip3 &lt;- vars::irf(var3usukjp, impulse = c(&quot;jp&quot;), n.ahead = 5, boot = TRUE) plot(ip3) # (us, jp, uk) ip4 &lt;- vars::irf(var3usjpuk, impulse = c(&quot;jp&quot;), n.ahead = 5, boot = TRUE) plot(ip4) 確認: Choleski分解: \\(\\Sigma = P P&#39;\\) #chol(cov(usjpuk)) # 上三角行列P&#39; # (us, uk, jp) t(chol(cov(usukjp))) # 下三角行列P&#39; ## us uk jp ## us 0.04491240 0.000000000 0.00000000 ## uk 0.03113638 0.023977159 0.00000000 ## jp 0.03623161 0.005359133 0.04089052 # (us, jp, uk) t(chol(cov(usjpuk))) # 下三角行列P&#39; ## us jp uk ## us 0.04491240 0.000000000 0.00000000 ## jp 0.03623161 0.041240209 0.00000000 ## uk 0.03113638 0.003115813 0.02377385 (参考) Tsay氏作成パッケージMTS library(MTS) # &#39;vars&#39;との同時使用は避ける (VAR()関数が重複) var3 &lt;- MTS::VAR(usukjp, p = 3) # include.mean = T (デフォルト), VAR係数の最小2乗推定 MTS::GrangerTest(usukjp, p = 3) # include.mean = T (デフォルト) MTS::VARMAirf(Phi = var3$Phi, Sigma = var3$Sigma) # Theta = NULL (デフォルト): VMA係数行列 その他: Granger因果性検定の関数 パッケージlmtest - grangertest(): 2変量間のGranger因果性検定 - usage: grangertest(x, y, order = 1, na.action = na.omit, ...) #library(lmtest) data(ChickEgg) # mts, tsクラス plot(ChickEgg) lmtest::grangertest(egg ~ chicken, order = 3, data = ChickEgg) # → 有意でない ## Granger causality test ## ## Model 1: egg ~ Lags(egg, 1:3) + Lags(chicken, 1:3) ## Model 2: egg ~ Lags(egg, 1:3) ## Res.Df Df F Pr(&gt;F) ## 1 44 ## 2 47 -3 0.5916 0.6238 lmtest::grangertest(chicken ~ egg, order = 3, data = ChickEgg) # → 有意(1%) ## Granger causality test ## ## Model 1: chicken ~ Lags(chicken, 1:3) + Lags(egg, 1:3) ## Model 2: chicken ~ Lags(chicken, 1:3) ## Res.Df Df F Pr(&gt;F) ## 1 44 ## 2 47 -3 5.405 0.002966 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ccf(ChickEgg[, &quot;chicken&quot;], ChickEgg[, &quot;egg&quot;]) # 1: chicken, 2: egg パッケージNlinTS: 非線形時系列解析, 因果性検出 - causality.test(): 2変量間のGranger因果性検定 - usage: causality.test(ts1, ts2, lag, diff = FALSE) library (NlinTS) # 非線形時系列解析, 因果性検出. causality.test() ## Loading required package: Rcpp res1 &lt;- NlinTS::causality.test(ChickEgg[, &quot;egg&quot;], ChickEgg[, &quot;chicken&quot;], lag = 3) res2 &lt;- NlinTS::causality.test(ChickEgg[, &quot;chicken&quot;], ChickEgg[, &quot;egg&quot;], lag = 3) res1$summary() ## -------------------- ## Test summary ## -------------------- ## The lag parameter: p = 3 ## The Granger causality Index: GCI = 0.0395451 ## The value of the F-test: 0.591615 ## The p_value of the F-test: 0.623786 ## The critical value with 5% of risk:: 2.822 res2$summary() ## -------------------- ## Test summary ## -------------------- ## The lag parameter: p = 3 ## The Granger causality Index: GCI = 0.313731 ## The value of the F-test: 5.40498 ## The p_value of the F-test: 0.0029664 ## The critical value with 5% of risk:: 2.822 –&gt; 上のgrangertst()の結果と同一 パッケージMTS - GrangerTest(): p変量のGranger因果性検定 - usage: GrangerTest(X,p=1,include.mean=T,locInput=c(1)) library(MTS) ## ## Attaching package: &#39;MTS&#39; ## The following object is masked from &#39;package:vars&#39;: ## ## VAR ## The following object is masked from &#39;package:TTR&#39;: ## ## VMA EggChick &lt;- data.frame(egg = ChickEgg[, &quot;egg&quot;], chicken = ChickEgg[, &quot;chicken&quot;]) MTS::GrangerTest(EggChick, p = 3) # カイ2乗検定 (F値x3 〜 (漸近的に)Chisq(3)) ## Number of targeted zero parameters: 3 ## Chi-square test for Granger Causality and p-value: 1.774846 0.620424 ## Constant term: ## Estimates: 306.1473 133544.6 ## Std.Error: 132.5194 41073.51 ## AR coefficient matrix ## AR( 1 )-matrix ## [,1] [,2] ## [1,] 1.3 0.000 ## [2,] 76.6 0.292 ## standard error ## [,1] [,2] ## [1,] 0.143 0.000 ## [2,] 25.279 0.184 ## AR( 2 )-matrix ## [,1] [,2] ## [1,] -0.361 0.000 ## [2,] -47.078 0.445 ## standard error ## [,1] [,2] ## [1,] 0.234 0.000 ## [2,] 39.387 0.186 ## AR( 3 )-matrix ## [,1] [,2] ## [1,] 0.0042 0.00000 ## [2,] -35.9327 0.00407 ## standard error ## [,1] [,2] ## [1,] 0.141 0.000 ## [2,] 28.538 0.174 ## ## Residuals cov-mtx: ## [,1] [,2] ## [1,] 22800.12 1843210 ## [2,] 1843210.37 412998788 ## ## det(SSE) = 6.018998e+12 ## AIC = 29.75928 ## BIC = 30.09077 ## HQ = 29.88712 # MTS::GrangerTest(ChickEgg, p = 3) –&gt; 上のgrangertst()の結果とやや異なる "],["共和分分析誤差修正モデル.html", "10 共和分分析・誤差修正モデル 10.1 見せかけの回帰 10.2 共和分検定 10.3 誤差修正モデル: データ分析例 (Tsay, MTS, Ch5)", " 10 共和分分析・誤差修正モデル 10.1 見せかけの回帰 単位根検定で扱った内容の再掲 参考: 福地・伊藤, 10.1 Tlen &lt;- 300 Seedv &lt;- 1 set.seed(Seedv) w1 &lt;- rnorm(Tlen) w2 &lt;- rnorm(Tlen) x &lt;- cumsum(w1) y &lt;- cumsum(w2) matplot(cbind(x,y), type = &quot;l&quot;) reslm &lt;- lm(y ~ x) summary(reslm) ## ## Call: ## lm(formula = y ~ x) ## ## Residuals: ## Min 1Q Median 3Q Max ## -8.0778 -3.6190 0.0812 3.9438 8.6039 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 0.13230 0.55381 0.239 0.8114 ## x 0.16810 0.06713 2.504 0.0128 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 4.284 on 298 degrees of freedom ## Multiple R-squared: 0.02061, Adjusted R-squared: 0.01733 ## F-statistic: 6.272 on 1 and 298 DF, p-value: 0.0128 plot(x, y); abline(reslm, col = &quot;red&quot;) 残差に自己相関が残ることの確認 reslm_resid = resid(reslm) plot(reslm_resid, type = &quot;l&quot;) acf(reslm_resid) Durbin-Watson検定 Durbin-Watson統計量 回帰残差の系列相関の有無を検定 \\(DW \\approx 2(1-\\rho)\\). \\(0&lt;DW&lt;4\\). 無相関⇔ \\(DW=2\\) 見せかけの回帰の場合. \\(DW\\)が小さい傾向(正の系列相関) library(lmtest) ## Loading required package: zoo ## ## Attaching package: &#39;zoo&#39; ## The following objects are masked from &#39;package:base&#39;: ## ## as.Date, as.Date.numeric dwtest(reslm) ## ## Durbin-Watson test ## ## data: reslm ## DW = 0.060411, p-value &lt; 2.2e-16 ## alternative hypothesis: true autocorrelation is greater than 0 単位根検定のためのR関数 ADF検定: “tseries”内, adf.test(); “fUnitRoots”内, unitrootTest(), adfTest() Phillips-Perron検定: “urca”内, ur.pp(); “tseries”内, pp.test() KPSS検定: “urca”内, ur.kpss(); “tseries”内, kpss.test() 10.2 共和分検定 沖本, 問題6.3, p.144, を参考に4系列 \\({\\bf y}_t=(y_{1,t},y_{2,t},y_{3,t},y_{4,t})&#39;\\) を生成 \\(w_{1,t},w_{2,t}\\)は, 互いに独立な単位根過程 \\(u_{1,t},u_{2,t},u_{3,t},u_{4,t}\\)は互いに独立な定常過程. \\(w_{1,t},w_{2,t}\\)とも独立 \\[ \\left\\{ \\begin{split} y_{1,t} &amp;= w_{1,t}+u_{1,t} \\\\ y_{2,t} &amp;= 2 w_{1,t} + u_{1,t} \\\\ y_{3,t} &amp;= w_{2,t} + u_{3,t} \\\\ y_{4,t} &amp;= w_{1,t}+ 2 w_{2,t} + u_{4,t} \\end{split} \\right. \\] この時, 線形独立な共和分ベクトル \\(\\beta_1 = (1,-0.5,0,0)\\), \\(\\beta_2 = (1,0,2,-1)\\). それ以外の共和分ベクトルは\\(\\beta_1,\\beta_2\\)の線形和で表現される. 以下では, 全て正規乱数によりサンプルパス生成 (長さ=300) Tlen &lt;- 300 Seedv &lt;- 1 set.seed(Seedv) w1 &lt;- cumsum(rnorm(Tlen)) w2 &lt;- cumsum(rnorm(Tlen)) u1 &lt;- rnorm(Tlen); u2 &lt;- rnorm(Tlen) u3 &lt;- rnorm(Tlen); u4 &lt;- rnorm(Tlen) # y1 &lt;- w1 + u1 y2 &lt;- 2 * w1 + u2 y3 &lt;- w2 + u3 y4 &lt;- w1 + 2 * w2 + u4 # # beta1 = (1, -0.5, 0, 0) # beta2 = (1, 0, 2, -1) # ymat &lt;- cbind(y1, y2, y3, y4) matplot(ymat, type = &quot;l&quot;) 各成分が単位根過程 \\(I(1)\\) であることを確認 fUnitRoots::adfTest(y1) ## ## Title: ## Augmented Dickey-Fuller Test ## ## Test Results: ## PARAMETER: ## Lag Order: 1 ## STATISTIC: ## Dickey-Fuller: -1.0735 ## P VALUE: ## 0.2742 ## ## Description: ## Thu Dec 21 22:48:13 2023 by user: fUnitRoots::adfTest(y2) ## ## Title: ## Augmented Dickey-Fuller Test ## ## Test Results: ## PARAMETER: ## Lag Order: 1 ## STATISTIC: ## Dickey-Fuller: -0.6699 ## P VALUE: ## 0.4028 ## ## Description: ## Thu Dec 21 22:48:13 2023 by user: fUnitRoots::adfTest(y3) ## ## Title: ## Augmented Dickey-Fuller Test ## ## Test Results: ## PARAMETER: ## Lag Order: 1 ## STATISTIC: ## Dickey-Fuller: -2.429 ## P VALUE: ## 0.01647 ## ## Description: ## Thu Dec 21 22:48:13 2023 by user: fUnitRoots::adfTest(y4) ## ## Title: ## Augmented Dickey-Fuller Test ## ## Test Results: ## PARAMETER: ## Lag Order: 1 ## STATISTIC: ## Dickey-Fuller: -1.4105 ## P VALUE: ## 0.1668 ## ## Description: ## Thu Dec 21 22:48:13 2023 by user: 10.2.1 Engle-Grangerの方法 共和分検定 Philips-Ouliaris検定 - &#39;urca&#39;パッケージ内, ca.po関数 - demean (使用するランダムウォーク・モデルのトレンドの指定): &quot;none&quot;, &quot;const&quot;(定数項), &quot;trend&quot;(定数項+時間トレンド) - type (検定種類): &quot;Pu&quot;(デフォルト), &quot;Pz&quot; library(urca) test_po &lt;- ca.po(ymat[, 1:2], demean = &quot;const&quot;) summary(test_po) ## ## ######################################## ## # Phillips and Ouliaris Unit Root Test # ## ######################################## ## ## Test of type Pu ## detrending of series with constant only ## ## ## Call: ## lm(formula = z[, 1] ~ z[, -1]) ## ## Residuals: ## Min 1Q Median 3Q Max ## -2.9862 -0.8963 0.0480 0.8510 3.7398 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 0.011865 0.159168 0.075 0.941 ## z[, -1] 0.496697 0.009679 51.315 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 1.232 on 298 degrees of freedom ## Multiple R-squared: 0.8983, Adjusted R-squared: 0.898 ## F-statistic: 2633 on 1 and 298 DF, p-value: &lt; 2.2e-16 ## ## ## Value of test-statistic is: 237.1763 ## ## Critical values of Pu are: ## 10pct 5pct 1pct ## critical values 27.8536 33.713 48.0021 –&gt; 帰無仮説棄却. y1とy2には共和分関係あり test_po &lt;- ca.po(ymat[, c(1, 3)], demean = &quot;const&quot;) summary(test_po) ## ## ######################################## ## # Phillips and Ouliaris Unit Root Test # ## ######################################## ## ## Test of type Pu ## detrending of series with constant only ## ## ## Call: ## lm(formula = z[, 1] ~ z[, -1]) ## ## Residuals: ## Min 1Q Median 3Q Max ## -9.0665 -2.7199 0.2856 2.6610 8.5926 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 7.16688 0.23222 30.863 &lt;2e-16 *** ## z[, -1] 0.10689 0.04944 2.162 0.0314 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 3.833 on 298 degrees of freedom ## Multiple R-squared: 0.01545, Adjusted R-squared: 0.01214 ## F-statistic: 4.675 on 1 and 298 DF, p-value: 0.0314 ## ## ## Value of test-statistic is: 49.2634 ## ## Critical values of Pu are: ## 10pct 5pct 1pct ## critical values 27.8536 33.713 48.0021 –&gt; 帰無仮説棄却されず. y1とy3には共和分関係なし 10.2.2 Johansenの方法 観測時系列がGaussian VAR(p)に従う場合 (1) 最大固有値検定 \\(H_0\\): 共和分ランク\\(=r\\), \\(H_1\\): 共和分ランク\\(=r+1\\) - &#39;urca&#39;パッケージ内, ca.jo関数: - type (検定の種類): ‘eigen’(最大固有値検定) or ‘trace’(トレース検定) - ecdet (トレンド種類): ‘none’(切片項なし), ‘const’(定数項あり),‘trend’(トレンド項あり) - K (時系列(水準)のVAR表現におけるラグ次数) - spec (VECMの定式化の2つの方法の一つを選択): &quot;longrun&quot;(デフォルト), or &quot;transitory&quot; - season (季節ダミー): データの頻度を指定(例, 四半期の場合は4) \\(y_{1,t}\\) vs \\(y_{2,t}\\) # Y1 vs Y2 result_e1 &lt;- ca.jo(ymat[, 1:2], ecdet = &quot;none&quot;, type = &quot;eigen&quot;, spec = &quot;longrun&quot;) # result_e1 &lt;- ca.jo(ymat[, 1:2], ecdet = &quot;const&quot;, type = &quot;eigen&quot;, spec = &quot;longrun&quot;) summary(result_e1) ## ## ###################### ## # Johansen-Procedure # ## ###################### ## ## Test type: maximal eigenvalue statistic (lambda max) , with linear trend ## ## Eigenvalues (lambda): ## [1] 0.3905716 0.0248999 ## ## Values of teststatistic and critical values of test: ## ## test 10pct 5pct 1pct ## r &lt;= 1 | 7.51 6.50 8.18 11.65 ## r = 0 | 147.58 12.91 14.90 19.19 ## ## Eigenvectors, normalised to first column: ## (These are the cointegration relations) ## ## y1.l2 y2.l2 ## y1.l2 1.0000000 1.000000 ## y2.l2 -0.5067464 1.605612 ## ## Weights W: ## (This is the loading matrix) ## ## y1.l2 y2.l2 ## y1.d -1.0278147 -0.01135393 ## y2.d 0.2537971 -0.02386878 # Test type: maximal eigenvalue statistic (lambda max) , without linear trend and constant in cointegration –&gt; \\(r=0\\)棄却. \\(r=1\\)採択 –&gt; \\(r=1\\)棄却されず –&gt; 共和分ベクトルの個数\\(=1\\) \\(y_{1,t}\\) vs \\(y_{3,t}\\) result_e2 &lt;- ca.jo(ymat[, c(1, 3)], ecdet = &quot;none&quot;, type = &quot;eigen&quot;, spec = &quot;longrun&quot;) summary(result_e2) ## ## ###################### ## # Johansen-Procedure # ## ###################### ## ## Test type: maximal eigenvalue statistic (lambda max) , with linear trend ## ## Eigenvalues (lambda): ## [1] 0.03647142 0.01989793 ## ## Values of teststatistic and critical values of test: ## ## test 10pct 5pct 1pct ## r &lt;= 1 | 5.99 6.50 8.18 11.65 ## r = 0 | 11.07 12.91 14.90 19.19 ## ## Eigenvectors, normalised to first column: ## (These are the cointegration relations) ## ## y1.l2 y3.l2 ## y1.l2 1.0000000 1.000000 ## y3.l2 -0.2931313 3.722196 ## ## Weights W: ## (This is the loading matrix) ## ## y1.l2 y3.l2 ## y1.d -0.08988397 -0.001808379 ## y3.d 0.00931081 -0.012801165 –&gt; 共和分ベクトルの個数 = 0 –&gt; 共和分関係の有無はシステムに含まれる (分析対象の) 変数に依存する 全変数 result_e3 &lt;- ca.jo(ymat, ecdet = &quot;none&quot;, type = &quot;eigen&quot;, spec = &quot;longrun&quot;) summary(result_e3) ## ## ###################### ## # Johansen-Procedure # ## ###################### ## ## Test type: maximal eigenvalue statistic (lambda max) , with linear trend ## ## Eigenvalues (lambda): ## [1] 0.41152190 0.31843086 0.03070008 0.01518851 ## ## Values of teststatistic and critical values of test: ## ## test 10pct 5pct 1pct ## r &lt;= 3 | 4.56 6.50 8.18 11.65 ## r &lt;= 2 | 9.29 12.91 14.90 19.19 ## r &lt;= 1 | 114.24 18.90 21.07 25.75 ## r = 0 | 158.00 24.78 27.14 32.14 ## ## Eigenvectors, normalised to first column: ## (These are the cointegration relations) ## ## y1.l2 y2.l2 y3.l2 y4.l2 ## y1.l2 1.0000000 1.000000 1.0000000 1.000000 ## y2.l2 -0.4152868 -1.203804 1.6984235 -0.709649 ## y3.l2 0.4077782 -2.778127 -0.4655081 2.308246 ## y4.l2 -0.1932126 1.416298 -0.4252644 2.950571 ## ## Weights W: ## (This is the loading matrix) ## ## y1.l2 y2.l2 y3.l2 y4.l2 ## y1.d -0.9686408 -0.07197835 -0.013303876 1.041764e-05 ## y2.d 0.1872784 0.08900271 -0.027317212 3.384301e-04 ## y3.d -0.2500354 0.21295281 0.001268037 -3.840195e-03 ## y4.d 0.3195356 -0.10057155 -0.012859058 -8.212798e-03 –&gt; 共和分ベクトルの個数\\(=2\\) (2) トレース検定 \\(H_0\\): 共和分ランク\\(=r\\), \\(H_1\\): 共和分ランク\\(=m\\) (原系列は定常) result_t1 &lt;- ca.jo(ymat, ecdet = &quot;none&quot;, type = &quot;trace&quot;, spec = &quot;longrun&quot;) #result_t1 &lt;- ca.jo(ymat, ecdet = &quot;const&quot;, type = &quot;trace&quot;, spec = &quot;longrun&quot;) summary(result_t1) ## ## ###################### ## # Johansen-Procedure # ## ###################### ## ## Test type: trace statistic , with linear trend ## ## Eigenvalues (lambda): ## [1] 0.41152190 0.31843086 0.03070008 0.01518851 ## ## Values of teststatistic and critical values of test: ## ## test 10pct 5pct 1pct ## r &lt;= 3 | 4.56 6.50 8.18 11.65 ## r &lt;= 2 | 13.85 15.66 17.95 23.52 ## r &lt;= 1 | 128.09 28.71 31.52 37.22 ## r = 0 | 286.10 45.23 48.28 55.43 ## ## Eigenvectors, normalised to first column: ## (These are the cointegration relations) ## ## y1.l2 y2.l2 y3.l2 y4.l2 ## y1.l2 1.0000000 1.000000 1.0000000 1.000000 ## y2.l2 -0.4152868 -1.203804 1.6984235 -0.709649 ## y3.l2 0.4077782 -2.778127 -0.4655081 2.308246 ## y4.l2 -0.1932126 1.416298 -0.4252644 2.950571 ## ## Weights W: ## (This is the loading matrix) ## ## y1.l2 y2.l2 y3.l2 y4.l2 ## y1.d -0.9686408 -0.07197835 -0.013303876 1.041764e-05 ## y2.d 0.1872784 0.08900271 -0.027317212 3.384301e-04 ## y3.d -0.2500354 0.21295281 0.001268037 -3.840195e-03 ## y4.d 0.3195356 -0.10057155 -0.012859058 -8.212798e-03 –&gt; 共和分ベクトルの個数\\(=2\\) 共和分ベクトルをウェイトとする\\(Yt\\)の各成分の線形和計算 → 定常性の確認 tmp &lt;- ymat %*% summary(result_t1)@V fUnitRoots::adfTest(tmp[, 1]) ## Warning in fUnitRoots::adfTest(tmp[, 1]): p-value smaller than printed p-value ## ## Title: ## Augmented Dickey-Fuller Test ## ## Test Results: ## PARAMETER: ## Lag Order: 1 ## STATISTIC: ## Dickey-Fuller: -13.8251 ## P VALUE: ## 0.01 ## ## Description: ## Thu Dec 21 22:48:13 2023 by user: fUnitRoots::adfTest(tmp[, 2]) ## Warning in fUnitRoots::adfTest(tmp[, 2]): p-value smaller than printed p-value ## ## Title: ## Augmented Dickey-Fuller Test ## ## Test Results: ## PARAMETER: ## Lag Order: 1 ## STATISTIC: ## Dickey-Fuller: -11.6347 ## P VALUE: ## 0.01 ## ## Description: ## Thu Dec 21 22:48:13 2023 by user: ##fUnitRoots::adfTest(tmp[, 3]) ##fUnitRoots::adfTest(tmp[, 4]) 10.3 誤差修正モデル: データ分析例 (Tsay, MTS, Ch5) 出所: Tsay, MTS, Ch5より抜粋（適宜, 補足説明挿入, または修正) https://faculty.chicagobooth.edu/ruey-s-tsay/research/multivariate-time-series-analysis-with-r-and-financial-applications 10.3.1 共和分検定 Tsay, 5.9, pp.310– require(fUnitRoots) # adfTest ## Loading required package: fUnitRoots require(urca) # ca.jo ## Loading required package: urca ## ## Attaching package: &#39;urca&#39; ## The following objects are masked from &#39;package:fUnitRoots&#39;: ## ## punitroot, qunitroot, unitrootTable require(MTS) # VARorder() ## Loading required package: MTS 分析に使用するデータ 月次社債イールド, 1954.7–2005.3 FRB St. Louisのデータ 系列(Aaa, Baa)が2変量VAR(\\(p\\))モデルに従うと仮定し. 次数\\(p\\)を決定: ifl &lt;- file.path(dir_MTS, &quot;m-bnd.txt&quot;) # dir_MTS: m-bnd.txtを格納しているディレクトリ da &lt;- read.table(ifl) head(da) ## V1 V2 V3 V4 V5 ## 1 1954 7 1 2.89 3.50 ## 2 1954 8 1 2.87 3.49 ## 3 1954 9 1 2.89 3.47 ## 4 1954 10 1 2.87 3.46 ## 5 1954 11 1 2.89 3.45 ## 6 1954 12 1 2.90 3.45 bnd &lt;- da[, 4:5] colnames(bnd) &lt;- c(&quot;Aaa&quot;, &quot;Baa&quot;) m1 &lt;- MTS::VARorder(bnd) # original function, now in &#39;MTS&#39; ## selected order: aic = 11 ## selected order: bic = 3 ## selected order: hq = 3 ## Summary table: ## p AIC BIC HQ M(p) p-value ## [1,] 0 -0.5697 -0.5697 -0.5697 0.0000 0.0000 ## [2,] 1 -7.8664 -7.8374 -7.8551 4331.0806 0.0000 ## [3,] 2 -8.1844 -8.1264 -8.1618 195.5266 0.0000 ## [4,] 3 -8.2589 -8.1720 -8.2251 51.6109 0.0000 ## [5,] 4 -8.2552 -8.1393 -8.2101 5.5112 0.2387 ## [6,] 5 -8.2481 -8.1032 -8.1917 3.5073 0.4768 ## [7,] 6 -8.2751 -8.1013 -8.2075 23.4161 0.0001 ## [8,] 7 -8.2803 -8.0775 -8.2014 10.6262 0.0311 ## [9,] 8 -8.2826 -8.0507 -8.1924 8.9080 0.0634 ## [10,] 9 -8.2784 -8.0176 -8.1769 5.1613 0.2711 ## [11,] 10 -8.2775 -7.9877 -8.1648 7.0457 0.1335 ## [12,] 11 -8.2840 -7.9652 -8.1600 11.2224 0.0242 ## [13,] 12 -8.2812 -7.9334 -8.1459 5.8956 0.2071 ## [14,] 13 -8.2716 -7.8949 -8.1251 2.0355 0.7292 → BIC, HQ(Nannan-Quinn情報量規準), \\(p=3\\)を選択 次に, 各系列の単位根検定 (ADF検定) \\(H_0\\): 単位根有り pacf(bnd[, 1]) pacf(bnd[, 2]) # または, # ar(bnd[, 1]) # --&gt; AIC, p = 3 # ar(bnd[, 2]) # --&gt; AIC, p = 2 # fUnitRoots::adfTest(bnd[, 1], lags = 3, type = &quot;c&quot;) ## ## Title: ## Augmented Dickey-Fuller Test ## ## Test Results: ## PARAMETER: ## Lag Order: 3 ## STATISTIC: ## Dickey-Fuller: -1.7007 ## P VALUE: ## 0.425 ## ## Description: ## Thu Dec 21 22:48:15 2023 by user: fUnitRoots::adfTest(bnd[, 2], lags = 2, type = &quot;c&quot;) ## ## Title: ## Augmented Dickey-Fuller Test ## ## Test Results: ## PARAMETER: ## Lag Order: 2 ## STATISTIC: ## Dickey-Fuller: -1.6221 ## P VALUE: ## 0.4544 ## ## Description: ## Thu Dec 21 22:48:15 2023 by user: –&gt; Aaa, Baa系列のADF検定、棄却されない (H0: 単位根非定常) matplot(bnd, type=&quot;l&quot;) # Tsay本の内容に沿って, 以下を挿入 apply(apply(bnd, 2, diff), 2, mean)/ apply(apply(bnd, 2, diff), 2, sd) ## Aaa Baa ## 0.01862195 0.02077461 #apply(apply(bnd, 2, diff), 2, fBasics::stdev) 階階差列の平均値ベクトルは, ゼロから有意に離れていない → 共和分検定に, 定数項入れない (Tsay, p.310) 共和分検定におけるトレンドの指定. Tsay, p.304を参照 10.3.2 Johansenの方法 (Johansen-Procedure) Johansenの方法 → 共和分関係の検定, 共和分ベクトルや共和分ランク(個数)の推定 最大固有値法 \\(H_0\\): 多くても\\(r\\)個の共和分関係しか存在しない vs \\(H_1\\): \\((r+1)\\)個の共和分関係が存在する (\\(H_0\\): 共和分ランク\\(=r\\) vs \\(H_1\\): 共和分ランク\\(=r+1\\)) - urca::ca.jp関数 - x: 共和分を調べたいデータ行列 (原系列) - type: 検定方法の種類. &#39;eigen&#39;(最大固有値法), &#39;trace&#39; (トレース法) - ecdet: トレンド指定. &#39;none&#39; (なし), &#39;const&#39; (定数項有), &#39;trend&#39; (線形トレンド有) - $\\Delta {\\bf y}_t = {\\bf \\mu}_0 + {\\bf \\mu}_1 t+\\cdots$ - (→ 共和分関係にも定数項や線形トレンドが含まれる) - K: 系列(水準)のVARラグ次数 - spec: VECMの特定化. &quot;longrun&quot; ($ {\\bf Γ}_i , 長期的(累積)インパクト), &quot;transitory&quot; ((${\\bf Γ}_i$, 一時的インパクト) ) m2 &lt;- urca::ca.jo(bnd, K = 2, ecdet = c(&quot;none&quot;)) # spec = &quot;longrun&quot; (デフォルト) summary(m2) ## ## ###################### ## # Johansen-Procedure # ## ###################### ## ## Test type: maximal eigenvalue statistic (lambda max) , with linear trend ## ## Eigenvalues (lambda): ## [1] 0.054773196 0.004665298 ## ## Values of teststatistic and critical values of test: ## ## test 10pct 5pct 1pct ## r &lt;= 1 | 2.84 6.50 8.18 11.65 ## r = 0 | 34.19 12.91 14.90 19.19 ## ## Eigenvectors, normalised to first column: ## (These are the cointegration relations) ## ## Aaa.l2 Baa.l2 ## Aaa.l2 1.0000000 1.000000 ## Baa.l2 -0.8856789 -2.723912 ## ## Weights W: ## (This is the loading matrix) ## ## Aaa.l2 Baa.l2 ## Aaa.d -0.04696894 0.002477064 ## Baa.d 0.04046524 0.002139536 → \\(r=0\\)は棄却. \\(r=1\\)は棄却されず → \\(r=1\\) (共和分有. 共和分ベクトルの個数 (\\(\\Pi\\) 行列のランク)) #m3 &lt;- urca::ca.jo(bnd, K = 2, ecdet = c(&quot;none&quot;), spec = c(&quot;transitory&quot;)) #summary(m3) # 定数項有のケース m3 &lt;- urca::ca.jo(bnd, K = 2, ecdet = c(&quot;const&quot;), spec = c(&quot;longrun&quot;)) summary(m3) ## ## ###################### ## # Johansen-Procedure # ## ###################### ## ## Test type: maximal eigenvalue statistic (lambda max) , without linear trend and constant in cointegration ## ## Eigenvalues (lambda): ## [1] 5.477346e-02 4.878009e-03 6.308723e-20 ## ## Values of teststatistic and critical values of test: ## ## test 10pct 5pct 1pct ## r &lt;= 1 | 2.97 7.52 9.24 12.97 ## r = 0 | 34.19 13.75 15.67 20.20 ## ## Eigenvectors, normalised to first column: ## (These are the cointegration relations) ## ## Aaa.l2 Baa.l2 constant ## Aaa.l2 1.000000000 1.000000 1.000000 ## Baa.l2 -0.885675435 -2.701784 -3.315369 ## constant -0.003491742 16.399576 -13.776952 ## ## Weights W: ## (This is the loading matrix) ## ## Aaa.l2 Baa.l2 constant ## Aaa.d -0.04699903 0.002507156 1.086407e-18 ## Baa.d 0.04043910 0.002165681 -1.197343e-18 トレース法 \\(H_0\\): 多くても\\(r\\)個の共和分関係しか存在しない vs \\(H_1\\): 全ての変数が定常 (\\(H_0\\): 共和分ランク\\(=r\\) vs \\(H_1\\): 共和分ランク\\(=m\\) (原系列は定常)) m4 &lt;- urca::ca.jo(bnd, K = 2, ecdet = c(&quot;none&quot;), type = c(&quot;trace&quot;), spec = c(&quot;transitory&quot;)) summary(m4) ## ## ###################### ## # Johansen-Procedure # ## ###################### ## ## Test type: trace statistic , with linear trend ## ## Eigenvalues (lambda): ## [1] 0.054773196 0.004665298 ## ## Values of teststatistic and critical values of test: ## ## test 10pct 5pct 1pct ## r &lt;= 1 | 2.84 6.50 8.18 11.65 ## r = 0 | 37.03 15.66 17.95 23.52 ## ## Eigenvectors, normalised to first column: ## (These are the cointegration relations) ## ## Aaa.l1 Baa.l1 ## Aaa.l1 1.0000000 1.000000 ## Baa.l1 -0.8856789 -2.723912 ## ## Weights W: ## (This is the loading matrix) ## ## Aaa.l1 Baa.l1 ## Aaa.d -0.04696894 0.002477064 ## Baa.d 0.04046524 0.002139536 → \\(r=0\\)は棄却. \\(r=1\\)は棄却されず → \\(r=1\\) (同) (coint_vec &lt;- summary(m4)@V) ## Aaa.l1 Baa.l1 ## Aaa.l1 1.0000000 1.000000 ## Baa.l1 -0.8856789 -2.723912 → 共和分ベクトル: \\((1, -0.886)\\) 得られた``cointegration’’系列 \\(w_t=1 \\cdot Aaa_t - 0.886 \\cdot Baa_t\\)に対して単位根検定 # wt &lt;- bnd[, 1] - 0.886 * bnd[, 2] wt &lt;- as.matrix(bnd) %*% coint_vec[, 1] # fUnitRoots::adfTest(wt, lags = 3, type = &quot;c&quot;) ## Warning in fUnitRoots::adfTest(wt, lags = 3, type = &quot;c&quot;): p-value smaller than ## printed p-value ## ## Title: ## Augmented Dickey-Fuller Test ## ## Test Results: ## PARAMETER: ## Lag Order: 3 ## STATISTIC: ## Dickey-Fuller: -4.6052 ## P VALUE: ## 0.01 ## ## Description: ## Thu Dec 21 22:48:15 2023 by user: → \\(p\\)値\\(=0.01\\) (単位根無) plot(wt, type = &quot;l&quot;) → ``定常時系列の特徴を示す’’ 10.3.3 誤差修正モデル(ECM)の推定 前提: VARモデルの次数\\(p\\),共和分ベクトルの数は既知 (上で得られた) ECMのOLS推定 共和分ベクトル\\(\\beta_t\\)が既知の場合: 上で得られた ``cointegrating系列’’wt=bnd[,1]-0.886*bnd[,2] を所与として \\((p=3, r=1)\\), ECMをOLS推定 - MTS::ECMvar1(x, p, wt=wt, include.const = FALSE, fixed = NULL, output = TRUE) - ECM VAR(p)モデルのOLS推定 (wtが既知の場合) - x: (Txk), k次元共和分VAR過程 - wt: (Txm), m次元共和分過程 - include.const: 定数項の有無 (デフォルト=F) m1 &lt;- MTS::ECMvar1(bnd, 3, wt) ## Given the co-integrated vector ## alpha: ## Aaa Baa ## [1,] -0.00122 0.0634 ## standard error ## [,1] [,2] ## [1,] 0.0347 0.0306 ## AR coefficient matrix ## AR( 1 )-matrix ## Aaa Baa ## Aaa 0.452 -0.00149 ## Baa 0.293 0.20380 ## standard error ## [,1] [,2] ## [1,] 0.0879 0.1008 ## [2,] 0.0774 0.0887 ## AR( 2 )-matrix ## Aaa Baa ## Aaa -0.300 0.0535 ## Baa -0.151 0.0274 ## standard error ## [,1] [,2] ## [1,] 0.0860 0.0940 ## [2,] 0.0757 0.0827 ## ----- ## Residuals cov-mtx: ## Aaa Baa ## Aaa 0.0400851 0.03167180 ## Baa 0.0316718 0.03105888 ## ## det(sse) = 0.0002418953 ## AIC = -8.294165 ## BIC = -8.221721 m1$coef # 表示の向きに注意 (xmtx調整行列, 左辺の各成分が列方向に, 右辺のARラグ項が行方向に) ## Aaa Baa ## xmtx -0.001217005 0.06339082 ## Aaa 0.451993390 0.29303941 ## Baa -0.001491101 0.20379673 ## Aaa -0.299907502 -0.15075817 ## Baa 0.053499341 0.02742606 m1$secoef # 同 ## [,1] [,2] ## [1,] 0.03471368 0.03055639 ## [2,] 0.08790257 0.07737541 ## [3,] 0.10080919 0.08873634 ## [4,] 0.08600254 0.07570293 ## [5,] 0.09396739 0.08271391 m1$coef / m1$secoef # 同 ## Aaa Baa ## xmtx -0.03505836 2.0745518 ## Aaa 5.14198170 3.7872419 ## Baa -0.01479132 2.2966546 ## Aaa -3.48719367 -1.9914443 ## Baa 0.56933946 0.3315773 推定されたECM (\\(w_t=\\beta&#39;{\\bf y}_t=(1,- 0.886){\\bf y}_t\\)) \\[ \\Delta {\\bf y}_t = \\left[\\begin{array}{r} -0.001 \\\\ 0.064 \\end{array}\\right] w_t + \\left[\\begin{array}{rr} 0.452 &amp; -0.001 \\\\ 0.293 &amp; 0.204 \\end{array} \\right] \\Delta {\\bf y}_{t-1} \\] \\[ +\\left[\\begin{array}{rr} -0.300 &amp; 0.054 \\\\ -0.151 &amp; 0.028 \\end{array} \\right] \\Delta {\\bf y}_{t-2} + \\epsilon_t,\\quad \\hat{\\Sigma}= \\frac{1}{100} \\left[\\begin{array}{rr} 4.01 &amp; 3.17 \\\\ 3.17 &amp; 3.11 \\end{array} \\right] \\] OLS推定されたECMの修正 ECMの修正 (パラメータ数削減) 有意でない係数を0に置く - MTS::refECMvar1(m1, thres = 1) - ECM VAR(p)モデルの制約付きOLS推定 (wtが既知の場合) - thres: t-ratioの閾値(デフォルト=1) - |t-ratio| &lt; thres の推定係数を0に置き換える m2 &lt;- MTS::refECMvar1(m1) ####### Refine the model fit ## Equation: 1 npar = 2 ## Equation: 2 npar = 4 ## alpha: ## [,1] [,2] ## [1,] 0 0.0625 ## standard error ## [,1] [,2] ## [1,] 1 0.0304 ## AR coefficient matrix ## AR( 1 )-matrix ## [,1] [,2] ## [1,] 0.448 0.000 ## [2,] 0.286 0.212 ## standard error ## [,1] [,2] ## [1,] 0.0393 1.0000 ## [2,] 0.0746 0.0855 ## AR( 2 )-matrix ## [,1] [,2] ## [1,] -0.256 0 ## [2,] -0.129 0 ## standard error ## [,1] [,2] ## [1,] 0.0393 1 ## [2,] 0.0382 1 ## ----- ## Residuals cov-mtx: ## [,1] [,2] ## [1,] 0.04010853 0.03168277 ## [2,] 0.03168277 0.03106450 ## ## det(sse) = 0.0002421536 ## AIC = -8.306234 ## BIC = -8.262768 推定されたECM (修正後) \\[ \\Delta {\\bf y}_t = \\left[\\begin{array}{r} 0.000 \\\\ 0.063 \\end{array}\\right] w_t + \\left[\\begin{array}{rr} 0.448 &amp; 0.000 \\\\ 0.286 &amp; 0.212 \\end{array} \\right] \\Delta {\\bf y}_{t-1} \\] \\[ +\\left[\\begin{array}{rr} -0.256 &amp; 0.000 \\\\ -0.129 &amp; 0.000 \\end{array} \\right] \\Delta {\\bf y}_{t-2} + \\epsilon_t,\\quad \\hat{\\Sigma}= \\frac{1}{100} \\left[\\begin{array}{rr} 4.01 &amp; 3.17 \\\\ 3.17 &amp; 3.11 \\end{array} \\right] \\] # pacf(m2$residuals) # --&gt; model checking, 若干の系列相関, 相互相関有り(教科書の記述と齟齬?) # --&gt; alpha(1,1)=0 &lt;-- Aaa系列の1階階差系列は定常 m2$coef ## [,1] [,2] ## [1,] 0.0000000 0.06250339 ## [2,] 0.4484522 0.28620026 ## [3,] 0.0000000 0.21172072 ## [4,] -0.2559947 -0.12908889 ## [5,] 0.0000000 0.00000000 m2$secoef ## [,1] [,2] ## [1,] 1.00000000 0.03044171 ## [2,] 0.03929053 0.07458234 ## [3,] 1.00000000 0.08546551 ## [4,] 0.03930742 0.03821387 ## [5,] 1.00000000 1.00000000 m2$coef / m1$secoef ## [,1] [,2] ## [1,] 0.000000 2.045509 ## [2,] 5.101696 3.698853 ## [3,] 0.000000 2.385953 ## [4,] -2.976594 -1.705203 ## [5,] 0.000000 0.000000 ECMのQML推定 共和分ベクトル\\(\\beta_t\\)が未知の場合: 仮定:イノベーション系列 \\({\\epsilon_t}\\) がGaussian - MTS::ECMvar(x,p,ibeta) - ECM VAR(p)モデルのQML推定 (wtが未知の場合) - ibeta: co-integrating matrix初期値 - alpha: alpha行列の初期値 (デフォルト=NULL) # beta &lt;- c(1, -0.886) ### Initial value of co-integration beta &lt;- coint_vec[, 1] m3 &lt;- MTS::ECMvar(bnd, p = 3, ibeta = beta, include.const = F) #### Joint estimation ## Order p: 3 Co-integrating rank: 1 ## Number of parameters: 11 ## initial estimates: -0.001217005 0.06339082 -0.8856789 0.4519934 -0.001491101 -0.2999075 0.05349934 0.2930394 0.2037967 -0.1507582 0.02742606 ## Par. Lower-bounds: -0.05328753 0.01755623 -0.9464619 0.3201395 -0.1527049 -0.4289113 -0.08745174 0.1769763 0.07069222 -0.2643126 -0.09664481 ## Par. Upper-bounds: 0.05085352 0.1092254 -0.8248958 0.5838472 0.1497227 -0.1709037 0.1944504 0.4091025 0.3369012 -0.03720378 0.1514969 ## Final Estimates: -0.0007844935 0.06377964 -0.8865271 0.451819 -0.001406126 -0.3000979 0.05359478 0.2928488 0.2039182 -0.150974 0.02759907 ## ## Coefficient(s): ## Estimate Std. Error t value Pr(&gt;|t|) ## -0.0007845 0.0359051 -0.022 0.982568 ## 0.0637796 0.0314069 2.031 0.042280 * ## Baa.l1 -0.8865271 0.0055004 -161.176 &lt; 2e-16 *** ## 0.4518190 0.0878174 5.145 2.68e-07 *** ## -0.0014061 0.1022704 -0.014 0.989030 ## -0.3000979 0.0864320 -3.472 0.000516 *** ## 0.0535948 0.0948894 0.565 0.572201 ## 0.2928488 0.0772944 3.789 0.000151 *** ## 0.2039182 0.0897482 2.272 0.023080 * ## -0.1509740 0.0760263 -1.986 0.047054 * ## 0.0275991 0.0833998 0.331 0.740701 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## alpha: ## [,1] ## [1,] -0.000784 ## [2,] 0.063780 ## standard error ## [,1] ## [1,] 0.0359 ## [2,] 0.0314 ## beta: ## [,1] ## [1,] 1.000 ## [2,] -0.887 ## standard error ## [,1] ## [1,] 1.0000 ## [2,] 0.0055 ## AR coefficient matrix ## AR( 1 )-matrix ## [,1] [,2] ## [1,] 0.452 -0.00141 ## [2,] 0.293 0.20392 ## standard error ## [,1] [,2] ## [1,] 0.0878 0.1023 ## [2,] 0.0773 0.0897 ## AR( 2 )-matrix ## [,1] [,2] ## [1,] -0.300 0.0536 ## [2,] -0.151 0.0276 ## standard error ## [,1] [,2] ## [1,] 0.0864 0.0949 ## [2,] 0.0760 0.0834 ## ----- ## Residuals cov-mtx: ## Aaa Baa ## Aaa 0.0399535 0.03156630 ## Baa 0.0315663 0.03095427 ## ## det(sse) = 0.0002403005 ## AIC = -8.297496 ## BIC = -8.217807 # m3$ncoint # 共和分ベクトル数 ## [1] 1 m3$alpha # 調整行列 ## [,1] ## [1,] -0.0007844935 ## [2,] 0.0637796425 m3$beta # 共和分行列 ## [,1] ## [1,] 1.0000000 ## [2,] -0.8865271 m3$Phip ## [,1] [,2] ## [1,] 0.451818972 0.29284885 ## [2,] -0.001406126 0.20391818 ## [3,] -0.300097916 -0.15097397 ## [4,] 0.053594777 0.02759907 m3$se.Phip ## [,1] [,2] ## [1,] 0.08781738 0.07729435 ## [2,] 0.10227039 0.08974821 ## [3,] 0.08643197 0.07602634 ## [4,] 0.09488937 0.08339984 推定されたECM (修正後) \\[ \\Delta {\\bf y}_t = \\left[\\begin{array}{r} -0.001 \\\\ 0.064 \\end{array}\\right] [1,-0.887] {\\bf y}_t + \\left[\\begin{array}{rr} 0.452 &amp; -0.001 \\\\ 0.293 &amp; 0.204 \\end{array} \\right] \\Delta {\\bf y}_{t-1} \\] \\[ +\\left[\\begin{array}{rr} -0.300 &amp; 0.054 \\\\ -0.151 &amp; 0.028 \\end{array} \\right] \\Delta {\\bf y}_{t-2} + \\epsilon_t,\\quad \\hat{\\Sigma}= \\frac{1}{100} \\left[\\begin{array}{rr} 4.00 &amp; 3.16 \\\\ 3.16 &amp; 3.10 \\end{array} \\right] \\] → 初期モデル(m1)と近い結果 ``サンプルサイズが比較的大きい一方で低次元であり, 驚くことでない’’ (補足): \\(w_t=1 \\cdot Aaa_t - 0.887 \\cdot Baa_t\\)が定常過程 \\(w_t&gt;0\\) → Aaa_tのイールドが相対高, Baa_tが相対安 → スプレッド”縮小”時 → \\({\\bf y}_t\\)への影響; \\([-0.001,0.064]&#39;w_t\\) 翌月のAaa_tイールドを\\(0.001\\cdot w_t\\)押し下げる 翌月のBaa_tイールドを\\(0.064\\cdot w_t\\)押し上げる → 翌月のスプレッドが”拡大”する方向に作用 "],["バブル-生成崩壊-検出.html", "A バブル (生成・崩壊) 検出 A.1 検定法に関する最近のレビュー論文 A.2 Supreme ADF検定/SADF (PWY, 2011), Generalized supreme ADF 検定/GSADF (PSY, 2015) A.3 実証分析", " A バブル (生成・崩壊) 検出 2023年11月17日 論文多数. 一部の紹介. A.1 検定法に関する最近のレビュー論文 Skrobotov, A.(2021). Testing for Explosive Bubbles: A Review, preprint. https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3779111 A.2 Supreme ADF検定/SADF (PWY, 2011), Generalized supreme ADF 検定/GSADF (PSY, 2015) Phillips, P.C.B., Wu, Y., Yu, J. (2011). Explosive behavior in the 1990s Nasdaq: when did exuber- ance escalate asset values? Int. Econ. Rev. 52 (1), 201–226. Phillips, P. C. B., Shi, S., &amp; Yu, J. (2015a). Testing for multiple bubbles: Historical episodes of exuberance and collapse in the S&amp;P 500. International Economic Review, 56(4), 1034–1078. Phillips, P. C. B., Shi, S., &amp; Yu, J. (2015b). Testing for multiple bubbles: Limit Theory for Real- Time Detectors. International Economic Review, 56(4), 1079–1134. Phillips, P. C. B., &amp; Shi, S.(2020) Real time monitoring of asset markets: Bubbles and crisis. In Hrishikesh D. Vinod and C.R. Rao (Eds.), Handbook of Statistics Volume 41 - Econometrics Using R. Rパッケージ psymonitor: https://cran.r-project.org/web/packages/psymonitor/psymonitor.pdf MultiBubbles: https://cran.r-project.org/web/packages/MultipleBubbles/MultipleBubbles.pdf exuber: https://www.dallasfed.org/~/media/documents/institute/wpapers/2020/0383.pdf https://cran.rstudio.com/web/packages/exuber/vignettes/exuber.html A.2.1 数理ファイナンス (Jarrow, Protterら) Jarrow, R., Protter P., and Shimbo, K. (2007), Asset price bubbles in complete markets, in Advances in Mathematical Finance, Birkha ̈user Boston, Cambridge, MA, 97–121. Jarrow, R., Protter P., and Shimbo, K. (2010). Asset price bubbles in incomplete markets, Math. Finance, 20, 145–185. Jarrow, R., Kchia, Y., and Protter, P. (2011). How to Detect an Asset Bubble, SIAM Journal on Financial Mathematics, 2-1, 839-865. Protter P. (2013) A Mathematical Theory of Financial Bubbles. In: Paris-Princeton Lectures on Mathematical Finance 2013. Lecture Notes in Mathematics, vol 2081. Springer, Cham. https://doi.org/10.1007/978-3-319-00413-6_1 A.2.2 経済物理学 (Sornetteら) Johansen, A., Ledoit, O., Sornette, D. (2000). Crashes as critical points, International Journal of Theoretical and Applied Finance 3, 219–255. https://arxiv.org/pdf/cond-mat/9810071.pdf Sornette, D., Woodard, R., Yan, W., and Zhou, W.X. (2013). Clarifications to Questions and Criticisms on the Johansen-Ledoit-Sornette Financial Bubble Model, Physica A, 392-19, Pages 4417-4428. https://arxiv.org/pdf/1107.3171.pdf Sornette, D. (2017) Why Stock Markets Crash: Critical Events in Complex Financial Systems, Revised ed., Princeton Science Library. ISBN-10: 0691175950 A.3 実証分析 株式市場の例 Breitung, J. and Kruse, R. (2013) ‘When bubbles burst: econometric tests based on structural breaks’, Statistical Papers, 54(4), pp. 911–930. Available at: https://doi.org/10.1007/s00362-012-0497-3. Monschang, V. and Wilfling, B. (2021) ‘Sup-ADF-style bubble-detection methods under test’, Empirical Economics, 61(1), pp. 145–172. Available at: https://doi.org/10.1007/s00181-020-01859-7. Shi, S. and Song, Y. (2014) ‘Identifying Speculative Bubbles Using an Infinite Hidden Markov Model’, Journal of Financial Econometrics, p. nbu025. Available at: https://doi.org/10.1093/jjfinec/nbu025. 暗号資産市場の例 Cross, J.L., Hou, C. and Trinh, K. (2021) ‘Returns, volatility and the cryptocurrency bubble of 2017–18’, Economic Modelling, 104, p. 105643. Available at: https://doi.org/10.1016/j.econmod.2021.105643. Yao, C.-Z. and Li, H.-Y. (2021) ‘A study on the bursting point of Bitcoin based on the BSADF and LPPLS methods’, The North American Journal of Economics and Finance, 55, p. 101280. Available at: https://doi.org/10.1016/j.najef.2020.101280. "],["長期記憶過程-1.html", "B 長期記憶過程 B.1 理論・概説 B.2 株式市場 B.3 外国為替市場 B.4 コモディティ・暗号資産 B.5 VIX B.6 高頻度データ (ボラティリティ, 注文フロー等) B.7 長期記憶性の発生要因, 非長期記憶モデルによる近似", " B 長期記憶過程 2023年11月17日 ダウンロード可能なものを中心に紹介します (ワーキングペーパー含む). 文献多数あり, 重要なものをカバーしている訳ではありません. ここにないものについては, 電子ジャーナル等を通じて適宜入手してください B.1 理論・概説 Gennady Samorodnitsky (2006). Long Range Dependence. Foundations and Trends in Stochastic Systems, 1(3), 163–257. https://people.orie.cornell.edu/gennady/techreports/LRD-NOW.pdf https://pdfs.semanticscholar.org/f182/3f5bcc8524d73af14ba3e29e7bbdcc50545e.pdf Rama Cont (2005). Long range dependence in financial markets, In: Lévy-Véhel J., Lutton E. (eds) Fractals in Engineering. Springer, London. https://doi.org/10.1007/1-84628-048-6_11 https://www.researchgate.net/publication/226697823_Long_range_dependence_in_financial_market Thomas Mikosch and Ca ̆ta ̆lin Sta ̆rica ̆ (2004). Nonstationarities in Financial Time Series, the Long-range Dependence, and the IGARCH Effects. The Review of Economics and Statistics, 86(1), 378–390. https://gec.cr.usgs.gov/outgoing/threshold_articles/Mikosch_Starica2004.pdf Richard T. Baillie (1996). Long memory processes and fractional integration in econometrics, Journal of Econometrics, 73, 5-59. http://long-memory.com/Baillie1996.pdf B.2 株式市場 Andrew W. Lo (1991). Long term memory in stock market prices, Econometrica 59 1279–313. https://www.nber.org/system/files/working_papers/w2984/w2984.pdf Walter Willinger, Murad S. Taqqu, Vadim Teverovsky (1999). Stock market prices and long-range dependence, Finance &amp; Stochastics, 3, 1–13. http://www.long-memory.com/returns/WillingerTaqquTeverovsky1999.pdf B.3 外国為替市場 Yin-Wong Cheung (1993). Long Memory in Foreign-Exchange Rates, Journal of Business &amp; Economic Statistics, 11(1), 93-101, DOI: 10.1080/07350015.1993.10509935. https://people.ucsc.edu/~cheung/JBES/LongMemoryFX_JBES1993.pdf Richard T. Baillie and Tim Bollerslev(1994). The long memory of the forward premium, Journal of International Money and Finance, 13(5), 565-571. https://dukespace.lib.duke.edu/dspace/bitstream/handle/10161/1965/Bollerslev_the_long_memory.pdf?sequence=1 Dominique M. Guillaume, Michel M. Dacorogna, Rakhal R. Davé, Ulrich A. Müller, Richard B. Olsen &amp; Olivier V. Pictet (1997). From the bird’s eye to the microscope: A survey of new stylized facts of the intra-daily foreign exchange markets. Finance and Stochastics, 1, pages95–129. https://link.springer.com/article/10.1007%2Fs007800050018 B.4 コモディティ・暗号資産 Mohamed El Hedi Arouri, Shawkat Hammoudeh, Amine Lahiani, Duc Khuong Nguyen(2012). Long memory and structural breaks in modeling the return and volatility dynamics of precious metals, The Quarterly Review of Economics and Finance, 52-2, 207-218. https://hal.archives-ouvertes.fr/file/index/docid/798033/filename/Arouri_et_al_QREF_R3-1.pdf Guglielmo Maria Caporale, Luis Gil-Alana, Alex Plastun (2018), Persistence in the cryptocurrency market, Research in International Business and Finance, 46, pp. 141-148. https://www.sciencedirect.com/science/article/pii/S0275531917309200 B.5 VIX Guglielmo Maria Caporale, Luis Gil-Alana, Alex Plastun (2018). Is market fear persistent? A long-memory analysis. Finance Research Letters, 27, 140-147. https://doi.org/10.1016/j.frl.2018.02.007. https://www.sciencedirect.com/science/article/pii/S1544612317303793 B.6 高頻度データ (ボラティリティ, 注文フロー等) Lillo, F. and Farmer, J. D. (2004). The Long Memory of the Efficient Market, Studies in Nonlinear Dynamics &amp; Econometrics, 8(3). doi: https://doi.org/10.2202/1558-3708.1226 https://arxiv.org/pdf/cond-mat/0311053 Torben G Andersen and Tim Bollerslev (1997), Heterogeneous Information Arrivals and Return Volatility Dynamics: Uncovering the Long‐Run in High Frequency Returns. The Journal of Finance, 52, 975-1005. https://doi.org/10.1111/j.1540-6261.1997.tb02722.x https://www.nber.org/system/files/working_papers/w5752/w5752.pdf Torben G Andersen, Tim Bollerslev, Francis X Diebold &amp; Paul Labys (2001). The Distribution of Realized Exchange Rate Volatility, Journal of the American Statistical Association, 96, 42-55. https://www.nber.org/system/files/working_papers/w6961/w6961.pdf B.7 長期記憶性の発生要因, 非長期記憶モデルによる近似 Chevillon, G. and Mavroeidis, S. (2018) ‘Perpetual learning and apparent long memory’, Journal of Economic Dynamics and Control, 90, pp. 343–365. Available at: https://doi.org/10.1016/j.jedc.2018.03.012. Corsi, F. (2004) ‘A Simple Long Memory Model of Realized Volatility’, SSRN Electronic Journal [Preprint]. Available at: https://doi.org/10.2139/ssrn.626064. Corsi, F., Audrino, F. and Renò, R. (2012) ‘HAR Modeling for Realized Volatility Forecasting’, in L. Bauwens, C. Hafner, and S. Laurent (eds) Handbook of Volatility Models and Their Applications. 1st edn. Wiley, pp. 363–382. Available at: https://doi.org/10.1002/9781118272039.ch15. Granger, C.W.J. (1980) ‘LONG MEMORY RELATIONSHIPS AND THE AGGREGATION OF DYNAMIC MODELS’, Journal of Econometrics, 14(2), pp. 227–238. Available at: https://www.sciencedirect.com/science/article/pii/0304407680900925. Granger, C.W.J. and Hyung, N. (2004) ‘Occasional structural breaks and long memory with an application to the S&amp;P 500 absolute stock returns’, Journal of Empirical Finance, 11(3), pp. 399–421. Available at: https://doi.org/10.1016/j.jempfin.2003.03.001. "],["markov-switching-regime-switchingモデル.html", "C Markov switching/ regime switchingモデル C.1 理論・概説 C.2 株式市場 C.3 金利・債券市場 C.4 外国為替市場 C.5 アセット・アロケーション", " C Markov switching/ regime switchingモデル 2023年11月30日 論文多数につき, ごく一部のみ紹介. ダウンロード可能なもの中心に紹介 (ワーキングペーパー含む) C.1 理論・概説 Hamilton, J. D. (1989). A New Approach to the Economic Analysis of Nonstationary Time Series and the Business Cycle. Econometrica, 57, 357–384. https://www.ssc.wisc.edu/~bhansen/718/Hamilton1989.pdf Hamilton J.D. (2008) Regime Switching Models. In: Durlauf S.N., Blume L.E. (eds) The New Palgrave Dictionary of Economics. Palgrave Macmillan, London. https://doi.org/10.1007/978-1-349-58802-2_1408 https://econweb.ucsd.edu/~jhamilto/palgrav1.pdf Timmermann, Allan (2000). Moments of Markov switching models, Journal of Econometrics, 96(1), 75-111. https://ideas.repec.org/a/eee/econom/v96y2000i1p75-111.html C.2 株式市場 Lunde, A. and Timmermann, A. (2004). Duration dependence in stock prices: An analysis of bull and bear markets. Journal of Business &amp; Economic Statistics, 22(3), 253–273. https://www.tandfonline.com/doi/pdf/10.1198/073500104000000136?casa_token=rx5Tgip1JfUAAAAA:VVHIVFY86vzPzWi-05QLaeEa3Inkb8Wo70zQI9OQaiUCAtbkj57H3r3b2uSftk9sUq6nADGUjRY54wg Maheu, J. M. and McCurdy, T. H. (2000). Identifying bull and bear markets in stock returns. Journal of Business &amp; Economic Statistics, 18(1), 100–112. https://www.tandfonline.com/doi/abs/10.1080/07350015.2000.10524851#aHR0cHM6Ly93d3cudGFuZGZvbmxpbmUuY29tL2RvaS9wZGYvMTAuMTA4MC8wNzM1MDAxNS4yMDAwLjEwNTI0ODUxP25lZWRBY2Nlc3M9dHJ1ZUBAQDA= C.3 金利・債券市場 Ang, A. and Bekaert, G. (2002). Regime switches in interest rates. Journal of Business and Economic Statistics 20, 163–82. https://www.nber.org/system/files/working_papers/w6508/w6508.pdf Dai, Qiang, Singleton, Kenneth J. and Yang, Wei (2007). Regime Shifts in a Dynamic Term Structure Model of U.S. Treasury Bond Yields. The Review of Financial Studies, 20(5), 1669-1706. https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.409.8573&amp;rep=rep1&amp;type=pdf C.4 外国為替市場 Dueker, Michael and Neely, Christopher J. (2007). Can Markov Switching Models Predict Excess Foreign Exchange Returns? Journal of banking &amp; finance, 31(2), 279-296. http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.197.9927&amp;rep=rep1&amp;type=pdf Cheung, Yin-Wong and Erlandsson, Ulf G. (2005). Exchange Rates and Markov Switching Dynamics, Journal of Business &amp; Economic Statistics, 23(3), 314-320. https://papers.ssrn.com/sol3/papers.cfm?abstract_id=637163 C.5 アセット・アロケーション Ang, A. and Bekaert, G. (2002). International asset allocation with regime shifts. Review of Financial Studies, 15(4), 1137–1187. https://pdfs.semanticscholar.org/2521/155069503babc51b65fae22ee7281674ea4a.pdf Guidolin, M. and Timmermann, A. (2007). Asset allocation under multivariate regime switching. Journal of Economics Dynamics &amp; Control, 31(11), 3503–3544. https://papers.ssrn.com/sol3/papers.cfm?abstract_id=940652 "],["archgarchモデル.html", "D ARCH/GARCHモデル D.1 概説 D.2 ARCH model D.3 GARCH model D.4 ARCH-M Model D.5 GJR model D.6 APARCH model", " D ARCH/GARCHモデル 2023年12月9日 論文多数. ダウンロード可能なものごく一部の紹介. D.1 概説 Tim Bollerslev, Ray Y. Chou and Kenneth F. Kroner (1992). “ARCH modeling in finance: A review of the theory and empirical evidence”, Journal of Econometrics, 52, 1–2, 5-59. http://www-stat.wharton.upenn.edu/~steele/Courses/434/434Context/GARCH/BollerslevReview.pdf Tim Bollerslev, Robert F. Engle, Danile B. Nelson(1994). “ARCH models”, in Handbook of Econometrics, Volume IV (Edited by R.F. Engle and D.L. McFadden). https://d1wqtxts1xzle7.cloudfront.net/43834885/arch-with-cover-page-v2.pdf?Expires=1639120389&amp;Signature=ImncR825Ozi~78eBe4x-ZZPU0pp9cebOmIEaGK06oLukIeZ8uviF3xhkW1~4SJkc4GWLQMrcFR1~C-Uc218lxMhj1bgt8lFtaVOhuvDPuXyUEkf~WpC4zFmFnC3Re20YzFmx7CQEOPbmCmPWiwOcO4SZvw~CwebW4Q2f~2eRj7xKzVYJn-59E66cuk3chFx3xCeH47QVZwd959Nq55ncW4CA7CsTi2CHCNCZesdznpZBsC4xd-F-GaKHuFN9O7O2qDataXJkvPhRqYMJV2SwHcBGfYp3ASXXwDNgsmKl7PJD7XwMQ9Aqj2H61rXo12lg6-dH4-r7mFdGGS~G~BE5tw__&amp;Key-Pair-Id=APKAJLOHF5GGSLRBV4ZA Robert Engle(2003). “Risk and Volatility: Econometric Models and Financial Practice”, Nobel Lecture, December 8, 2003. https://www.nobelprize.org/uploads/2018/06/engle-lecture.pdf https://www.nobelprize.org/prizes/economic-sciences/2003/engle/lecture/ D.2 ARCH model Robert F. Engle (1982). “Autoregressive Conditional Heteroskedasticity with Estimates of the Variance of U.K. Inflation”, Econometrica, 50, 987-1008. http://www.econ.uiuc.edu/~econ508/Papers/engle82.pdf D.3 GARCH model Tim Bollerslev (1986). “Generalized Autoregressive Conditional Heteroskedasticity”, Journal of Eco- nometrics, 31, 307 327. http://public.econ.duke.edu/~boller/Published_Papers/joe_86.pdf D.4 ARCH-M Model Robert Engle, David M. Lilien and Russell P. Robins (1987). “Estimating Time Varying Risk Premia in the Term Structure: The Arch-M Model”, Econometrica, 1987, 55(2), 391-407. https://econpapers.repec.org/article/ecmemetrp/v_3a55_3ay_3a1987_3ai_3a2_3ap_3a391-407.htm D.5 GJR model Lawrence R. Glosten, Ravi Jagannathan and David E. Runkle(1993). “On the Relation between the Expected Value and the Volatility of the Nominal Excess Return on Stocks”, Journal of Finance, 48(5), 1779-1801. http://finance.martinsewell.com/stylized-facts/volatility/GlostenJagannathanRunkle1993.pdf D.6 APARCH model Zhuanxin Ding, Clive W.J. Granger and Robert F. Engle(1993). “A long memory property of stock market returns and a new model”, Journal of Empirical Finance 1 (1), 83-106. https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.471.7587&amp;rep=rep1&amp;type=pdf "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
